#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef KITABOO_READER_SDK_SWIFT_H
#define KITABOO_READER_SDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFAudio;
@import AVFoundation;
@import AVKit;
@import CoreData;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Kitaboo_Reader_SDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UILabel;
@class NSURL;
@class NSString;
@class NSMutableDictionary;
@class NSDictionary;

@interface AVPlayerViewController (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
@property (nonatomic, strong) UILabel * _Nullable subtitleLabel;
- (void)addSubtitles;
- (BOOL)openWithFileFromLocal:(NSURL * _Nonnull)filePath error:(NSError * _Nullable * _Nullable)error;
- (void)showWithSubtitles:(NSString * _Nonnull)string;
- (void)showByDictionaryWithDictionaryContent:(NSMutableDictionary * _Nonnull)dictionaryContent;
- (void)addPeriodicNotificationWithParsedPayload:(NSDictionary * _Nonnull)parsedPayload;
@end

@class NSBundle;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19AccessibilityHelper")
@interface AccessibilityHelper : NSObject
/// Used to set the bundle for reader accessibility files.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nullable readerAccessibilityBundle;)
+ (NSBundle * _Nullable)readerAccessibilityBundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setReaderAccessibilityBundle:(NSBundle * _Nullable)value;
/// Used to set the bundle for app accessibility files.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nullable appAccessibilityBundle;)
+ (NSBundle * _Nullable)appAccessibilityBundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setAppAccessibilityBundle:(NSBundle * _Nullable)value;
/// Used to set the language for accessibility files.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable language;)
+ (NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
+ (void)setLanguage:(NSString * _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, AudioBookPlayerViewStateUpdate, open) {
  AudioBookPlayerViewStateUpdateKAudioBookUpdatePlayPauseState = 0,
  AudioBookPlayerViewStateUpdateKAudioBookUpdateReadingSpeed = 1,
  AudioBookPlayerViewStateUpdateKAudioBookUpdateCurrentTime = 2,
};

@class NSNumber;

SWIFT_CLASS_NAMED("BookClassSharingConfiguration")
@interface BookClassSharingConfiguration : NSObject
- (nonnull instancetype)initWithSharingList:(NSDictionary<NSString *, NSString *> * _Nonnull)sharingList type:(NSString * _Nonnull)type role:(NSInteger)role OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isSharingEnable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isTeacherSharingEnable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isStudentSharingEnable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isStudent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURLRequest;
@class NSData;
@class KitabooServiceMetaData;

SWIFT_CLASS_NAMED("KitabooRequest")
@interface KitabooRequest : NSObject
- (NSURLRequest * _Nonnull)registerUser:(NSString * _Nonnull)firstName lastName:(NSString * _Nonnull)lastName email:(NSString * _Nonnull)email userName:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password accessCode:(NSString * _Nonnull)accessCode SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)validateAccessCodeWithUserToken:(NSString * _Nonnull)userToken withAccessCode:(NSString * _Nonnull)accessCode SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)authenticateUserWith:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)authenticateUserWith:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password addUUID:(BOOL)addUUID SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)authenticateGoogleClassRoomUserWith:(NSDictionary<NSString *, id> * _Nonnull)tokenSchema SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)changePasswordWith:(NSString * _Nonnull)userToken existingPassword:(NSString * _Nonnull)password password:(NSString * _Nonnull)newPassword andUserName:(NSString * _Nonnull)userName SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)resetPasswordWithUserName:(NSString * _Nonnull)userName SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)bookClassInfo:(NSString * _Nonnull)userToken bookIds:(NSArray<NSString *> * _Nonnull)bookIds SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)forceUpdate:(NSString * _Nonnull)appVersion SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)dowloadBookURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)dowloadBookOnlineURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType timeStamp:(int64_t)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)downloadMediaBookURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)authenticateHLSPackageWithBaseURL:(NSString * _Nonnull)baseURL userToken:(NSString * _Nonnull)userToken packageId:(int64_t)packageId timeStamp:(int64_t)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)consumeBookWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)releaseBookWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBookListWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBookListForCategoryWithUserToken:(NSString * _Nonnull)userToken startIndex:(NSString * _Nullable)startIndex endIndex:(NSString * _Nullable)endIndex categoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBookListForCategoryV1WithUserToken:(NSString * _Nonnull)userToken startIndex:(NSString * _Nullable)startIndex endIndex:(NSString * _Nullable)endIndex categoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchCategoryListWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchCategoryListV1WithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBooksForCollectionWithUserToken:(NSString * _Nonnull)userToken categoryName:(NSString * _Nonnull)categoryName collectionName:(NSString * _Nonnull)collectionName startIndex:(NSString * _Nullable)startIndex endIndex:(NSString * _Nullable)endIndex categoryId:(NSString * _Nullable)categoryId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchRecentlyViewedBooksWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)downloadAllBooksUrlWithUserToken:(NSString * _Nonnull)userToken state:(NSString * _Nonnull)state bookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)deleteAllBooksWithUserToken:(NSString * _Nonnull)userToken bookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveSessionHistoryWithUserToken:(NSString * _Nonnull)userToken sessionHistory:(NSDictionary<NSString *, NSArray<NSDictionary<NSString *, id> *> *> * _Nonnull)sessionHistory SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)refreshBookListWithUserToken:(NSString * _Nonnull)userToken bookIdAndTypeDict:(NSDictionary<NSString *, id> * _Nonnull)bookIdAndTypeDict timeStamp:(NSString * _Nullable)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchUserSettingsWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)markFavouriteWithUserToken:(NSString * _Nonnull)userToken favoriteBook:(NSDictionary<NSString *, id> * _Nonnull)favoriteBook SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchFavouriteWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)unmarkFavouriteWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchCollabUGC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp bookVersion:(NSString * _Nonnull)bookVersion SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchCollabShare:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchUGC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp bookVersion:(NSString * _Nonnull)bookVersion SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchTeacherAnnotations:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp bookVersion:(NSString * _Nonnull)bookVersion SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchStudentAnnotations:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId learnerId:(NSString * _Nonnull)learnerId timeStamp:(NSString * _Nonnull)timeStamp bookVersion:(NSString * _Nonnull)bookVersion SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchKalturaURL:(NSString * _Nonnull)userToken entryID:(NSString * _Nonnull)entryID type:(NSInteger)type SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)registerDevice:(NSString * _Nonnull)userToken body:(NSData * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)deRegisterDevice:(NSString * _Nonnull)userToken body:(NSData * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getNotifications:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)deleteNotification:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)markReadNotifications:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId body:(NSData * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveUGCData:(NSString * _Nonnull)userToken ugcData:(NSData * _Nonnull)ugcData bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveUGCData:(NSString * _Nonnull)userToken ugcData:(NSData * _Nonnull)ugcData bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp metaDataObject:(KitabooServiceMetaData * _Nonnull)metaData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveColllabData:(NSString * _Nonnull)userToken collab:(NSData * _Nonnull)collab bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveColllabData:(NSString * _Nonnull)userToken collab:(NSData * _Nonnull)collab bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp metaDataObject:(KitabooServiceMetaData * _Nonnull)metaData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveHighlightData:(NSString * _Nonnull)userToken highlight:(NSData * _Nonnull)highlight bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveTrackingData:(NSString * _Nonnull)userToken analytics:(NSData * _Nonnull)analytics bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getAnalyticsData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId classId:(NSNumber * _Nonnull)classId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)elasticSearchData:(NSString * _Nonnull)userToken searchData:(NSData * _Nonnull)searchData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)updateUserDetails:(NSString * _Nonnull)userToken profileData:(NSData * _Nonnull)profileData coverData:(NSData * _Nonnull)coverData firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)acceptRejectCollab:(NSString * _Nonnull)userToken collabData:(NSData * _Nonnull)collabData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveTeacherAnnotations:(NSString * _Nonnull)userToken annotations:(NSData * _Nonnull)annotations bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp learnerId:(NSString * _Nonnull)learnerId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)submitAnotation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchReadingSpeedInformationWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchLastPageAccessedWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchFurthestPageWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveLastPageAccessedWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId lastPageData:(NSString * _Nonnull)lastPageData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveFurthestPageDataWithUserToken:(NSString * _Nonnull)userToken furthestPageData:(NSData * _Nonnull)furthestPageData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveSCORMData:(NSString * _Nonnull)userToken scormData:(NSData * _Nonnull)scormData bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchSCORMData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId classId:(NSString * _Nonnull)classId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getBookDetails:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getBookDetailsWithID:(NSString * _Nonnull)bookId userToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)packageURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getBookDetailsSecured:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchRecentlyViewedBooksSecuredWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBooksForCollectionSecuredWithUserToken:(NSString * _Nonnull)userToken categoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId collectionName:(NSString * _Nonnull)collectionName startIndex:(NSString * _Nullable)startIndex endIndex:(NSString * _Nullable)endIndex SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBookListForCategorySecuredWithUserToken:(NSString * _Nonnull)userToken startIndex:(NSString * _Nullable)startIndex endIndex:(NSString * _Nullable)endIndex categoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchFavouriteSecuredWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)downloadAllBooksUrlSecuredWithUserToken:(NSString * _Nonnull)userToken state:(NSString * _Nonnull)state bookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)refreshBookListSecuredWithUserToken:(NSString * _Nonnull)userToken bookIdAndTypeDict:(NSDictionary<NSString *, id> * _Nonnull)bookIdAndTypeDict timeStamp:(NSString * _Nullable)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)refreshCategoryListSecured:(NSString * _Nonnull)userToken categoryIdList:(NSDictionary<NSString *, id> * _Nonnull)categoryIdList SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchPreferredLocaleWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)savePreferredLocaleWithUserToken:(NSString * _Nonnull)userToken languageData:(NSData * _Nonnull)languageData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBookTOC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchStudentMarkupReport:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId classID:(NSString * _Nonnull)classID chapterNumbers:(NSString * _Nonnull)chapterNumbers email:(NSString * _Nonnull)email userIDs:(NSString * _Nonnull)userIDs SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getScreenshotCountWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)updateScreenshotCountWithUserToken:(NSString * _Nonnull)userToken screenshotCount:(NSInteger)screenshotCount SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getFetchsessionWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)deleteSessionWithUserToken:(NSString * _Nonnull)userToken uuId:(NSString * _Nonnull)uuId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)deleteAllSessionWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getImmersiveReaderTokenWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ClientRequest")
@interface ClientRequest : KitabooRequest
@end

/// To get current state of Media Book.
typedef SWIFT_ENUM(NSInteger, CurrentState, open) {
  CurrentStatePLAYING = 0,
  CurrentStatePAUSE = 1,
  CurrentStateCANCELLED = 2,
  CurrentStateLOADED = 3,
  CurrentStateUNKNOWN = 4,
  CurrentStateLOADING = 5,
};

@class NSCoder;
@class UIScrollView;

/// An Object that create custom view as per requirement.
/// <ul>
///   <li>
///     The CustomizeView class defines a view where user can create any customized view as per requirement.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK13CustomizeView")
@interface CustomizeView : UIView <UIScrollViewDelegate>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWith:(NSURL * _Nonnull)localUrl OBJC_DESIGNATED_INITIALIZER;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class WKUserContentController;
@class WKScriptMessage;
@protocol EquationEditorKeyboardViewControllerDelegate;
@class KFLinkVO;
@class SDKFIBVO;
@class WKWebView;
@class WKNavigationAction;
@class WKNavigation;

SWIFT_CLASS_NAMED("EquationEditorKeyboardViewController")
@interface EquationEditorKeyboardViewController : UIViewController <UIScrollViewDelegate, WKNavigationDelegate, WKScriptMessageHandler, WKUIDelegate>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
/// The object that acts as the delegate of the EquationEditorKeyboardViewController.
/// The delegate must adopt the EquationEditorKeyboardViewControllerDelegate protocol.
@property (nonatomic, strong) id <EquationEditorKeyboardViewControllerDelegate> _Nullable delegate;
/// link refers to data of the KFLinkVO
@property (nonatomic, strong) KFLinkVO * _Nonnull link;
/// fibVO is responsible for FIB and refers to SDKFIBVO.
@property (nonatomic, strong) SDKFIBVO * _Null_unspecified fibVO;
/// latex is Text of Equation view.
@property (nonatomic, copy) NSString * _Nonnull latex;
/// To set Y position of TextView for Equation Editor.
@property (nonatomic, copy) NSString * _Nonnull posY;
- (nonnull instancetype)initWithEqfibVO:(SDKFIBVO * _Nonnull)eqfibVO OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL_NAMED("EquationEditorKeyboardViewControllerDelegate")
@protocol EquationEditorKeyboardViewControllerDelegate
/// This method will be called to dismiss Equation Keyboard and show Default keyboard.
/// \param link Object of type KFLinkVO.
///
/// \param FIBVO Object of type SDKFIBVO.
///
/// \param text entered Text in Equation Textview.
///
- (void)changeEquationKeyboardToNormalForLink:(KFLinkVO * _Nonnull)link FIBVO:(SDKFIBVO * _Nullable)FIBVO withEnterText:(NSString * _Nonnull)text;
/// This method will be called to save Equation Editor.
/// \param link Object of type KFLinkVO.
///
/// \param FIBVO Object of type SDKFIBVO.
///
/// \param text entered Text in Equation Textview to save.
///
- (void)saveEquationEditorForLink:(KFLinkVO * _Nonnull)link FIBVO:(SDKFIBVO * _Nullable)FIBVO :(NSString * _Nonnull)text;
/// This method will be called to close the Equation Editor.
- (void)closeEquationEditor;
@end

@protocol FIBMathEquationViewDelegate;
@class UIColor;

SWIFT_CLASS_NAMED("FIBMathEquationView")
@interface FIBMathEquationView : UIView
/// The object that acts as the delegate of the FIBMathEquationView.
/// The delegate must adopt the FIBMathEquationViewDelegate protocol.
@property (nonatomic, strong) id <FIBMathEquationViewDelegate> _Nullable delegate;
/// fibVO is responsible for FIB.
@property (nonatomic, strong) SDKFIBVO * _Nullable fibVO;
@property (nonatomic) BOOL isTeacher;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Initializes an allocated FIBMathEquationView object with KFLinkVO ,equationTxt,isSubmited and frame.
/// \param link KFLinkVO
///
/// \param equationTxt Text of EquationView
///
/// \param isSubmited Boolean value to indicate  whether Equation view is Submitted.
///
/// \param frame Equation View Frame.
///
- (nonnull instancetype)initWithLink:(KFLinkVO * _Nonnull)link equationTxt:(NSString * _Nonnull)equationTxt isSubmited:(BOOL)isSubmited frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLink:(KFLinkVO * _Nonnull)link fibVO:(SDKFIBVO * _Nonnull)fibVO frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLink:(KFLinkVO * _Nonnull)link fibVO:(SDKFIBVO * _Nonnull)fibVO frame:(CGRect)frame useDefaultIcon:(BOOL)useDefaultIcon OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// To RootLabel view’s background color and mathEquationLabel text color
- (void)setThemeColor:(UIColor * _Nonnull)color;
- (void)focusToTextField;
@end


SWIFT_PROTOCOL_NAMED("FIBMathEquationViewDelegate")
@protocol FIBMathEquationViewDelegate
/// This method will be called when user Tap Math Equation View.
/// \param link Object of type KFLinkVO.
///
/// \param fibVO Object of type SDKFIBVO.
///
- (void)showEquationEditorKeyboardForLink:(KFLinkVO * _Nonnull)link withFIBVO:(SDKFIBVO * _Nullable)fibVO;
- (void)didSelectSubmittedEquation:(SDKFIBVO * _Nullable)fibVO withKFLinkVO:(KFLinkVO * _Nonnull)link withSourceView:(FIBMathEquationView * _Nonnull)sourceView;
@end

@class NSIndexPath;

SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK42GenerateReportChapterTableViewCellDelegate_")
@protocol GenerateReportChapterTableViewCellDelegate
- (void)didTapOnNodeButton:(NSIndexPath * _Nullable)indexPath;
@end

typedef SWIFT_ENUM(NSInteger, GenerateReportFilter, open) {
  GenerateReportFilterCHAPTER = 0,
  GenerateReportFilterSTUDENT = 1,
};

@protocol GenerateReportMailViewControllerDelegate;
@protocol UIViewControllerTransitionCoordinator;

/// An object that manages the UI
/// A GenerateReportMailViewController object manages the UI and provides call backs
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK32GenerateReportMailViewController")
@interface GenerateReportMailViewController : UIViewController <UITextFieldDelegate>
@property (nonatomic, weak) id <GenerateReportMailViewControllerDelegate> _Nullable delegate;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// Initializes the GenerateReportMailViewController object
/// This method should be called to initialize the GenerateReportMailViewController object to send the report to specific email ID
/// \param emailID emailID is the String instance.This is the current email ID of the active user.
/// =
///
- (nonnull instancetype)init:(NSString * _Nonnull)emailID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK40GenerateReportMailViewControllerDelegate_")
@protocol GenerateReportMailViewControllerDelegate
/// Delegate method when tapped on done button on the UIAlertController
/// This method will be called when user tap on the done button on the UIAlertController
/// \param alternateEmail alternateEmail is the String instance.This is the alternail email ID in UIAlertController text field.
///
- (void)didTapOnDoneForGenerateReportMail:(NSString * _Nonnull)alternateEmail;
/// Delegate method when tapped on cancel button on the UIAlertController
/// This method will be called when user tap on the cancel button on the UIAlertController
- (void)didTapOnCancelForGenerateReportMail;
@end

@class KFBookVO;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20GenerateReportParser")
@interface GenerateReportParser : NSObject
- (NSArray * _Nonnull)parseGenerateReportTOC:(NSDictionary<NSString *, id> * _Nonnull)tocDict :(KFBookVO * _Nonnull)bookVO SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19GenerateReportTOCVO")
@interface GenerateReportTOCVO : NSObject
@property (nonatomic, copy) NSString * _Nullable chapterTitle;
@property (nonatomic, copy) NSString * _Nullable chapterID;
@property (nonatomic, copy) NSString * _Nullable nodeID;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isExpanded;
@property (nonatomic) BOOL isSubNode;
@property (nonatomic) NSInteger subnodeLevel;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable folioNumberArray;
@property (nonatomic, copy) NSArray<GenerateReportTOCVO *> * _Nullable subnodes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol GenerateReportViewControllerDelegate;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK28GenerateReportViewController")
@interface GenerateReportViewController : UIViewController
@property (nonatomic, weak) id <GenerateReportViewControllerDelegate> _Nullable delegate;
@property (nonatomic) enum GenerateReportFilter selectedMode;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// Initializes the GenerateReportViewController object
/// This method should be called to initialize the GenerateReportViewController object
/// \param themeColor mediaBookModel is the UIColor instance.This instance to set the theme color to components of GenerateReportViewController
///
- (nonnull instancetype)initWithThemeColor:(UIColor * _Nullable)themeColor OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// To set the data to specific selected view i.e, Chapter/Student
/// This method should be called everytime when user receive the callback for selected view i.e,Chapter/Student to set the relative data of the selected view.
/// \param data data is the NSArray instance.When user select Chapter view then it should be an array of GenerateReportTOCVO.When user select Student view then it should be an array of student details.
///
- (void)setData:(NSArray * _Nonnull)data;
- (void)setStatusData:(NSDictionary * _Nonnull)statusData;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK36GenerateReportViewControllerDelegate_")
@protocol GenerateReportViewControllerDelegate
/// Delegate method when tapped on cancel button
/// This method will be called when user tap on the cancel button
- (void)didTapOnCancelForGenerateReport;
/// Delegate method when tapped on back button
/// This method will be called when user tap on the back button.This is only application for iPhone devices as back button is not present in iPad devices
- (void)didTapOnBackForGenerateReport;
/// Delegate method when tapped on next button
/// This method will be called when user tap on the next button.
/// \param reportData reportData is the Dictionary instance.It consists both chapter and student data with chapterID and studentID keys respetively
///
- (void)didTapOnNextToSendMailWithReportData:(NSDictionary<NSString *, id> * _Nonnull)reportData;
/// Delegate method when tapped on Select Chapter view
/// This method will be called when user tap on Select Chapter view of Generate Report View
- (void)didSelectChapterSegmentForGenerateReport;
/// Delegate method when tapped on Select Student view
/// This method will be called when user tap on Select Student view of Generate Report View
- (void)didSelectStudentSegmentForGenerateReport;
@end

/// This enum represent the currently selected glossary item.
typedef SWIFT_ENUM_NAMED(NSInteger, GlossaryResourceType, "GlossaryResourceType", open) {
  GlossaryResourceTypeKGlossaryResourceTypeAudio = 0,
  GlossaryResourceTypeKGlossaryResourceTypeVideo = 1,
  GlossaryResourceTypeKGlossaryResourceTypeImage = 2,
  GlossaryResourceTypeKGlossaryResourceTypeURL = 3,
};

@protocol GlossaryViewControllerDelegate;
@class KFGlossaryVO;

/// GlossaryViewController is a class which will be responsible for loading/displaying content related to the selected glossary and gives callback when any item is selected, so one can perform respective actions.
SWIFT_CLASS_NAMED("GlossaryViewController")
@interface GlossaryViewController : UIViewController
/// The object that acts as the delegate of the GlossaryViewController.
/// The delegate must adopt the GlossaryViewControllerDelegate protocol.
@property (nonatomic, strong) id <GlossaryViewControllerDelegate> _Nullable delegate;
/// object of type KFGlossaryVO which have all information related to selected glossary.
@property (nonatomic, strong) KFGlossaryVO * _Nullable glossaryItem;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
/// To set colors for items which are present in glossary view.
/// <h3>Usage Example:</h3>
/// \code
/// [glossaryViewController setColorsForGlossaryViewWithIconColor:hdThemeVO.glossary_icon_color iconBorderColor:hdThemeVO.glossary_icon_border_color alphabetTextColor:hdThemeVO.glossary_alphabet_label_color keyWordTextColor:hdThemeVO.glossary_keyword_label_color descriptionTextColor:hdThemeVO.glossary_description_color];
///
/// \endcode\param iconColor color for icons which are present in glossary controller
///
/// \param iconBorderColor boreder color for icons
///
/// \param alphabetTextColor text color for alphabet text
///
/// \param keyWordTextColor text color for keyword text
///
/// \param descriptionTextColor text color for description text
///
- (void)setColorsForGlossaryViewWithIconColor:(UIColor * _Nonnull)iconColor iconBorderColor:(UIColor * _Nonnull)iconBorderColor alphabetTextColor:(UIColor * _Nonnull)alphabetTextColor keyWordTextColor:(UIColor * _Nonnull)keyWordTextColor descriptionTextColor:(UIColor * _Nonnull)descriptionTextColor;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The delegate of a GlossaryViewController object must adopt the GlossaryViewControllerDelegate protocol.
/// <ul>
///   <li>
///     GlossaryViewControllerDelegate Protocol used to handle all the callbacks of GlossaryViewController Class.The GlossaryViewControllerDelegate protocol defines methods that allow user to manage all the actions/events when any Glossary Item is selected.
///   </li>
///   <li>
///     When configuring the GlossaryViewController object, assign your delegate object to its delegate property.
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("GlossaryViewControllerDelegate")
@protocol GlossaryViewControllerDelegate
/// Tells the delegate that the glossary item  is now selected.
/// The delegate handles selections in this method.  This method will called when the glossary Item is Select.
/// \param selectedType Selected GlossaryResourceType.
///
/// \param resorcePath Path of resource for selected glossary item
///
- (void)didSelectGlossaryItemWithType:(enum GlossaryResourceType)selectedType withPath:(NSString * _Nonnull)resorcePath;
@end

@class NSURLSessionDownloadTask;
@class NSDate;

SWIFT_CLASS_NAMED("HDBookDownloadDetails")
@interface HDBookDownloadDetails : NSObject
/// UniqueID of the book that needs to be downloaded
@property (nonatomic, copy) NSString * _Null_unspecified bookUniqueID;
/// Book URL of the book that needs to be downloaded
@property (nonatomic, copy) NSString * _Null_unspecified bookDownloadURL;
/// Download state of the book that needs to be downloaded.The status of the book will be in four states i.e,GettingInfo,Downloading,Paused,Failed,Unknown
@property (nonatomic, copy) NSString * _Nonnull bookDownloadState;
/// Download size of the book that needs to be downloaded
@property (nonatomic) float bookDownloadSize;
/// Download size of the book that needs to be downloaded only in bytes
@property (nonatomic) float bookDownloadSizeBytes;
/// Download units of the book that needs to be downloaded
@property (nonatomic, copy) NSString * _Null_unspecified bookDownloadUnit;
/// Downloaded size of the book out of the total book download size
@property (nonatomic) float downloadedBookSize;
/// Downloaded size of the book out of the total book download size in bytes
@property (nonatomic) float downloadedBookSizeBytes;
/// Downloaded size unit of the book out of the total book download size
@property (nonatomic, copy) NSString * _Null_unspecified downloadedBookUnit;
/// Progress of the book that needs to be downloaded
@property (nonatomic) float progress;
/// Download Task of the current book
@property (nonatomic, strong) NSURLSessionDownloadTask * _Nullable task;
@property (nonatomic, copy) NSDate * _Nullable bookDownloadInitiatedTime;
@property (nonatomic, copy) NSString * _Nonnull bookDownloadDestinationPath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HDAVAssetTaskDetails;

/// An Object that contains all the information about downloading HLS Media Book.
SWIFT_CLASS_NAMED("HDAVAssetDownloadDetails") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface HDAVAssetDownloadDetails : HDBookDownloadDetails
/// All the details about all the downloading assets.
@property (nonatomic, copy) NSArray<HDAVAssetTaskDetails *> * _Nullable assetTaskDetails;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An object that manages the download handlings of a Media Book.
/// A HDAVAssetDownloaderManager object is responsible for all download actions for a media book, i.e. Download, Pause, Resume etc.
/// <ul>
///   <li>
///     SuperClass : NSObject
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("HDAVAssetDownloaderManager") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface HDAVAssetDownloaderManager : NSObject
+ (HDAVAssetDownloaderManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol HDAVAssetDownloaderManagerDelegate;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface HDAVAssetDownloaderManager (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
/// This method is called to download the HLS Media Book
/// - parameter bookId : Book needs to be downloaded
/// - parameter bookDownloadURLs : URLs which needs to be downloaded.
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)downloadAVAsset:(NSString * _Nonnull)bookId bookDownloadURLs:(NSArray<NSURL *> * _Nonnull)bookDownloadURLs delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to pause the downloading HLS book
/// - parameter bookId : Book needs to be paused
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)pauseAVAsset:(NSString * _Nonnull)bookId delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to resume the paused HLS book
/// - parameter bookId : Book needs to be resumed
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)resumeAVAsset:(NSString * _Nonnull)bookId delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
- (void)setDelegateForAVAssetWithDelegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate bookID:(NSString * _Nonnull)bookID;
/// This method is called to retry the download of  a HLS book
/// - parameter bookId : Book needs to be downloaded
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)retryAVAssetDownload:(NSString * _Nonnull)bookId delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to get the details of HLS book
/// - parameter bookId : BookID
- (HDAVAssetDownloadDetails * _Nullable)getAVAssetDetails:(NSString * _Nonnull)bookID SWIFT_WARN_UNUSED_RESULT;
/// This method is called to get the array of HLS books which are in downloading state
- (NSArray<HDAVAssetDownloadDetails *> * _Nullable)getAllAVAssetDetails SWIFT_WARN_UNUSED_RESULT;
/// This method is called to pause all the downloading HLS books
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)pauseAllAVAssetWithDelegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to get the count of downloading HLS books
- (NSInteger)inProgressAVAssetDownloadCount SWIFT_WARN_UNUSED_RESULT;
/// This method is called to cancel the downloading HLS book
/// - parameter bookId : Book needs to be cancelled
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)cancelAVAsset:(NSString * _Nonnull)bookId delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to delete the downloaded HLS book
/// - parameter bookId : Book needs to be deleted.
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)deleteAVAsset:(NSString * _Nonnull)bookId delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to get the status of provided AVAsset whether it is downloaded or not.
/// - parameter bookId : Book whose status needs to be checked.
- (BOOL)isAVAssetDownloaded:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
@end

@class NSError;

/// The delegate of a HDAVAssetDownloaderManager object must adopt the HDAVAssetDownloaderManagerDelegate protocol.
/// HDAVAssetDownloaderManagerDelegate Protocol used to handle all the callbacks of HDAVAssetDownloaderManager Class.The HDAVAssetDownloaderManagerDelegate protocol defines methods to provide callbacks when user perform any action on downloading Media Book..
/// When configuring the HDAVAssetDownloaderManager object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL_NAMED("HDAVAssetDownloaderManagerDelegate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@protocol HDAVAssetDownloaderManagerDelegate
@optional
/// A delegate method to pause all the downloading tasks
- (void)didPauseAllAVAssetDownloads;
/// A delegate method to pause all the downloading tasks
- (void)didDeleteDownloadedAVAssetWithBookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever a download task state is updated i.e Started, Downloading, Paused, Cancelled, Finished, Failed etc.
/// - parameter bookDownloadDetail : HDAVAssetDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is paused
- (void)didDownloadRequestStateUpdateForAVAsset:(HDAVAssetDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever any download task is failed due to any reason
/// - parameter bookDownloadDetail : HDAVAssetDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is failed
/// - parameter error : NSError for which the download has been failed
- (void)didDownloadRequestFailForAVAsset:(NSError * _Nonnull)error bookDownloadDetail:(HDAVAssetDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
@end

@class AVAggregateAssetDownloadTask;
@class AVURLAsset;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20HDAVAssetTaskDetails") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface HDAVAssetTaskDetails : NSObject
/// Name of the current asset.
@property (nonatomic, copy) NSString * _Nullable assetM3U8Name;
/// Download Task of the current book.
@property (nonatomic, strong) AVAggregateAssetDownloadTask * _Nullable aggregateTask;
/// Downloaded Asset url path of the current book.
@property (nonatomic, copy) NSURL * _Nullable assetDownloadedURLPath;
/// Downloading Asset url of the current book.
@property (nonatomic, copy) NSURL * _Nullable assetURL;
/// Downloading Asset url of the current book.
@property (nonatomic, strong) AVURLAsset * _Nullable avURLAsset;
/// Loaded duration of the asset that needs to be downloaded.
@property (nonatomic) float taskLoadedDuration;
/// Total duration of the asset that needs to be downloaded.
@property (nonatomic) float taskTotalDuration;
/// Progress of the asset that needs to be downloaded.
@property (nonatomic) float taskProgress;
@property (nonatomic, copy) NSString * _Nonnull taskDownloadState;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HDAudioBookPlayerViewControllerDelegate;
@class HDMediaBookModel;
@class HDMediaBookChapterVO;
@class HDKitabooMediaBookThemeVO;
@class SDKBookmarkVO;
@class UIButton;

/// An object that manages the UI for Audio Book.
/// A HDAudioBookPlayerViewController object manages the UI and provides call backs when multiple actions performed.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK31HDAudioBookPlayerViewController")
@interface HDAudioBookPlayerViewController : UIViewController
/// The object that acts as the delegate of the HDAudioBookPlayerViewController.
/// The delegate must adopt the HDAudioBookPlayerViewControllerDelegate protocol.
@property (nonatomic, weak) id <HDAudioBookPlayerViewControllerDelegate> _Nullable delegate;
/// A Time constant value for forward backward buttons.
@property (nonatomic) float forwardBackwardTimeConstant;
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// Initializes the HDAudioBookPlayerViewController object
/// This method should be called to initialize the HDAudioBookPlayerViewController object
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)updateChapterViewControlsFont;
- (void)updateConstraints;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)setPlayPauseButtonCornerRadius:(CGFloat)radius;
- (void)updateAudioThumbnail;
- (void)addSleepTimeView;
- (void)removeSleepTimeView;
- (void)setSleepTimeLabelText:(NSString * _Nonnull)text;
/// To update the player view according to the state received
/// This method should be called to update the player view according to the state received.Set the state to kAudioBookUpdatePlayPauseState to update the play/pause button title according to the current state of the AudioBook.Set the state to kAudioBookUpdateReadingSpeed to update the text of the narration speed label.Set the state to kAudioBookUpdateCurrentTime to update the slider progress and time label text.
/// \param state state is an enum of  AudioBookStateUpdate
///
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel object
///
- (void)updatePlayerView:(enum AudioBookPlayerViewStateUpdate)state mediaBookModel:(HDMediaBookModel * _Nonnull)mediaBookModel showLoader:(BOOL)showLoader;
/// To update the chapter name and number for the current playing chapter of the AudioBook
/// This method should be called to update the chapter name and number for the current playing chapter of the AudioBook
/// \param enable chapterVO is the HDMediaBookChapterVO instance.This is an instance of the current playing chapter.
///
- (void)setCurrentChapter:(HDMediaBookChapterVO * _Nullable)chapterVO;
/// To set the theme color to various UI components of the HDAudioBookPlayerViewController
/// This method should be called to set the color to various UI components of the HDAudioBookPlayerViewController. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To hide/unhide the Bookmark
/// This method should be called to hide/unhide the Bookmark button.If this method is not called then by default the Bookmark button will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the Bookmark button will be hidden and vice versa.
///
- (void)hideBookmark:(BOOL)hide;
/// To disable the next chapter button.
/// This method should be called to disable the next chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa
///
- (void)disableNextChapter:(BOOL)disable;
/// To disable the previous chapter button.
/// This method should be called to disable the previous chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa
///
- (void)disablePreviousChapter:(BOOL)disable;
/// To disable the Bookmark  button.
/// This method should be called to disable the bookmark button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disableBookmark:(BOOL)disable;
/// To delete all the bookmarks on the view of the seek bar of the audio player.
- (void)deleteAllBookmarks:(NSArray<SDKBookmarkVO *> * _Nonnull)bookmarksVO;
/// To add the bookmark view on the seek bar of the audio player
/// This method should be called to add the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)addBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To delete the bookmark view on the seek bar of the audio player
/// This method should be called to delete the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)deleteBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To get Thumbnail Container View.
- (UIView * _Nullable)getThumbnailContainerView SWIFT_WARN_UNUSED_RESULT;
- (void)updateTimeinHours:(double)currentTime :(double)totalTime;
- (void)bookmarkButtonTapped:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@class UIImageView;

/// The delegate of a HDAudioBookPlayerViewController object must adopt the HDAudioBookPlayerViewControllerDelegate protocol.
/// HDAudioBookPlayerViewControllerDelegate Protocol used to handle all the callbacks of HDAudioBookPlayerViewController Class.The HDAudioBookPlayerViewControllerDelegate protocol defines methods to provide callback when user perform any action on HDAudioBookPlayerViewController.
/// When configuring the HDAudioBookPlayerViewController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK39HDAudioBookPlayerViewControllerDelegate_")
@protocol HDAudioBookPlayerViewControllerDelegate
@optional
/// Delegate method when user tap on bookmark button
/// This method will be called when user tap on the bookmark button
- (void)didTapOnBookmark;
/// Delegate method when tapped on play/pause button
/// This method will be called when user tap on the play/pause button
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (void)didTapOnPlayPause:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// Delegate method when tapped on Narration Speed button
/// This method will be called when user tap on the Narration Speed button
- (void)didTapOnNarrationSpeed:(UIButton * _Nonnull)button;
/// Delegate method when tapped on forward button
/// This method will be called when user tap on the forward button
- (void)didTapOnForward;
/// Delegate method when tapped on backward button
/// This method will be called when user tap on the backward button
- (void)didTapOnRewind;
/// Delegate method when tapped on next chapter button
/// This method will be called when user tap on the next chapter  button
- (void)didTapOnNextChapter;
/// Delegate method when tapped on previous chapter button
/// This method will be called when user tap on the previous chapter  button
- (void)didTapOnPreviousChapter;
/// Delegate method when update the UISlider position
/// This method will be called when user update the UISlider position
- (void)didSeekBarValueChanged;
/// Delegate method to update the thumbnail image
/// This method will be called to set the thumbnail image
/// \param thumbnailURL thumbnailURL is the String.thumbnailURL is the url of the image that needs to be displayed
///
- (UIImageView * _Nullable)imageViewForThumbnail:(NSString * _Nonnull)thumbnailURL SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS_NAMED("HDBookDownloaderManager")
@interface HDBookDownloaderManager : NSObject
+ (HDBookDownloaderManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HDBookDownloaderManagerDelegate;

@interface HDBookDownloaderManager (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
/// This method is called to download a book at specific path
/// - parameter bookId : Book needs to be downloaded
/// - parameter bookDownloadURL : URL from where the book needs to be downloaded
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)downloadBook:(NSString * _Nonnull)bookId bookDownloadURL:(NSString * _Nonnull)bookDownloadURL delegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate downloadPath:(NSString * _Nonnull)downloadPath;
/// This method is called to pause the downloading book
/// - parameter bookId : Book needs to be paused
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)pauseBookDownload:(NSString * _Nonnull)bookId delegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to resume the paused book
/// - parameter bookId : Book needs to be resumed
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)resumeBookDownload:(NSString * _Nonnull)bookId delegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate;
- (void)setDelegateForBookWithDelegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate bookID:(NSString * _Nonnull)bookID;
/// This method is called to retry the download of  a book
/// - parameter bookId : Book needs to be downloaded
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)retryBookDownload:(NSString * _Nonnull)bookId delegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to get the details of book
/// - parameter bookId : BookID
- (HDBookDownloadDetails * _Nullable)getDownloadDetails:(NSString * _Nonnull)bookID SWIFT_WARN_UNUSED_RESULT;
/// This method is called to get the array of books which are in downloading state
- (NSArray<HDBookDownloadDetails *> * _Nullable)getDownloadingBooks SWIFT_WARN_UNUSED_RESULT;
/// This method is called to pause all the downloading books
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)pauseAllDownlaodsWithDelegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to get the count of downloading books
- (NSInteger)inProgressDownloadCount SWIFT_WARN_UNUSED_RESULT;
/// This method is called to cancel the downloading book
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)cancelBookDownload:(NSString * _Nonnull)bookId delegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate;
@end



SWIFT_PROTOCOL_NAMED("HDBookDownloaderManagerDelegate")
@protocol HDBookDownloaderManagerDelegate
/// A delegate method called each time whenever any download task’s progress is updated
/// - parameter bookDownloadDetail :  HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is in progress
- (void)bookDownloadRequestDidUpdateProgress:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called when interrupted tasks are repopulated
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is interrupted
- (void)bookDownloadRequestDidPopulatedInterruptedTasks:(NSArray<HDBookDownloadDetails *> * _Nonnull)bookDownloadDetail;
@optional
/// A delegate method called each time whenever new download task is start downloading
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is started
- (void)bookDownloadRequestStarted:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever running download task is paused. If task is already paused the action will be ignored
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is paused
- (void)bookDownloadRequestDidPaused:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method to pause all the downloading tasks
- (void)didPauseAllDownloads;
/// A delegate method called each time whenever any download task is resumed. If task is already downloading the action will be ignored
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is resumed
- (void)bookDownloadRequestDidResumed:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever any download task is resumed. If task is already downloading the action will be ignored
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is retried
- (void)bookDownloadRequestDidRetry:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever any download task is cancelled by the user
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is cancelled
- (void)bookDownloadRequestCanceled:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever any download task is finished successfully
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is finished
- (void)bookDownloadRequestFinished:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever any download task is failed due to any reason
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is failed
/// - parameter error : NSError for which the download has been failed
- (void)bookDownloadRequestDidFailedWithError:(NSError * _Nonnull)error bookDownloadDetail:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever specified destination does not exists. It will be called on the session queue. It provides the opportunity to handle error appropriately
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which does not exist
/// - parameter location : URL where destination url does not exist
- (void)bookDownloadRequestDestinationDoestNotExists:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID location:(NSURL * _Nonnull)location;
@end

@protocol HDDropDownDelegate;

/// An object that manages the content of ShareSetting classes.
/// A HDDropDownController object manages content of classes in dropdown list and selection of class from dropdown list.
SWIFT_CLASS_NAMED("HDDropDownController")
@interface HDDropDownController : UIViewController
/// The object that acts as the delegate of the HDDropDownController.
/// The delegate must adopt the HDDropDownDelegate protocol.
@property (nonatomic, strong) id <HDDropDownDelegate> _Nullable delegate;
/// To initialize HDDropDowncontroller.
/// \param dataArray Array of type string which is used to display names in drop down list.
///
/// \param dropDownFrame CGRect used to set frame for drop down controller.
///
- (nonnull instancetype)initWithDataArray:(NSArray<NSString *> * _Nonnull)dataArray dropDownFrame:(CGRect)dropDownFrame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UITableView;
@class UITableViewCell;

@interface HDDropDownController (SWIFT_EXTENSION(Kitaboo_Reader_SDK)) <UITableViewDataSource, UITableViewDelegate>
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
@end


/// Methods for managing selection of items in Dropdown of ShareSettings.
SWIFT_PROTOCOL_NAMED("HDDropDownDelegate")
@protocol HDDropDownDelegate
/// *This method will be called when user selects any item from table/list and returns selected item’s name.
- (void)didSelectItemWithName:(NSString * _Nonnull)name;
@end


/// An Object that manage the content that needs to be sent in ElasticSearch service request
/// @superclass SuperClass : NSObject
SWIFT_CLASS_NAMED("HDElasticSearchRequest")
@interface HDElasticSearchRequest : NSObject
@property (nonatomic, copy) NSString * _Nullable elasticSearchText;
@property (nonatomic, copy) NSString * _Nullable elasticSearchOn;
@property (nonatomic, copy) NSString * _Nullable elasticSearchType;
@property (nonatomic, copy) NSArray * _Nullable totalBookIDs;
@property (nonatomic, copy) NSArray * _Nullable elasticSearchFields;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable elasticSearchAdvancedFilter;
@property (nonatomic, copy) NSString * _Nullable elasticSearchFrom;
@property (nonatomic, copy) NSString * _Nullable elasticSearchSize;
/// Initializes the HDElasticSearchRequest class
/// <h3>Usage Example:</h3>
/// \code
/// HDElasticSearchRequest *searchRequest = [[HDElasticSearchRequest alloc] initWithSearchText:@"multiple" searchOn:@"page_content" searchType:@"complete" bookIds:[NSArray arrayWithObjects:@"4131", @"8124", nil] searchField:nil advancedFilter:nil from:@"0" size:@"50"];
///
///
/// \endcode\param searchText Data/Text that user need to search, within the search area.
///
/// \param searchOn Considers type of search to performed.By default search will be across book content (full-text) and Metadata. But if the search has to happen on only one of these then you can mention where the search operation need to be performed. i.e. page_content or metadata. However, irrespective of where the search match is found the result will alway return its corresponding title list.
///
/// \param searchType To indicate some correctness (i.e. match parts of the term) or exact correctness within the search area.
///
/// \param bookIds Array of book ids that reader will pass to perform search operation.
///
/// \param searchField Field on which you want to search. If not given, will search on all fields.
///
/// \param advancedFilter Filter documents on Interest Level.
///
/// \param from Start Index from which results are to fetched.
///
/// \param size Number of documents to be fetched.
///
- (nonnull instancetype)initWithSearchText:(NSString * _Nonnull)searchText searchOn:(NSString * _Nonnull)searchOn searchType:(NSString * _Nonnull)searchType bookIds:(NSArray * _Nonnull)bookIds searchField:(NSArray * _Nullable)searchField advancedFilter:(NSDictionary<NSString *, id> * _Nullable)advancedFilter from:(NSString * _Nonnull)from size:(NSString * _Nonnull)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An Object that manage the content of response from ElasticSearch service.
/// @superclass SuperClass : NSObject
SWIFT_CLASS_NAMED("HDElasticSearchResult")
@interface HDElasticSearchResult : NSObject
@property (nonatomic, copy) NSString * _Nullable bookID;
@property (nonatomic, copy) NSString * _Nullable index;
@property (nonatomic, strong) NSNumber * _Nullable score;
@property (nonatomic, copy) NSString * _Nullable bookThumbnailURL;
@property (nonatomic, copy) NSString * _Nullable bookTitle;
@property (nonatomic, copy) NSString * _Nullable bookDescription;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable searchCount;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVAudioPlayer;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK34HDGoogleTextToSpeechServiceManager")
@interface HDGoogleTextToSpeechServiceManager : NSObject <AVAudioPlayerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HDGoogleTextToSpeechServiceManager * _Nonnull shared;)
+ (HDGoogleTextToSpeechServiceManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull voiceTypeIdentifer;
@property (nonatomic, copy) NSString * _Nonnull googleAPIKey;
@property (nonatomic, copy) NSString * _Nonnull languageCode;
@property (nonatomic) BOOL isMaleVoice;
@property (nonatomic) BOOL isCompletePlaying;
- (void)speakWithText:(NSString * _Nonnull)text textlanguageCode:(NSString * _Nullable)textlanguageCode completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)stopPlayer;
- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer * _Nonnull)player successfully:(BOOL)flag;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface HDGoogleTextToSpeechServiceManager (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)fetchSupportedVoicesWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK27HDGoogleTranslationLanguage")
@interface HDGoogleTranslationLanguage : NSObject
@property (nonatomic, copy) NSString * _Nullable code;
@property (nonatomic, copy) NSString * _Nullable name;
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code name:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK26HDGoogleTranslationManager")
@interface HDGoogleTranslationManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HDGoogleTranslationManager * _Nonnull shared;)
+ (HDGoogleTranslationManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull googleAPIKey;
@property (nonatomic, copy) NSArray<HDGoogleTranslationLanguage *> * _Nonnull supportedLanguages;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)detectLanguageForText:(NSString * _Nonnull)text completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)fetchSupportedLanguagesWithCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (void)translateWithTextToTranslate:(NSString * _Nonnull)textToTranslate sourceLanguageCode:(NSString * _Nonnull)sourceLanguageCode targetLanguageCode:(NSString * _Nonnull)targetLanguageCode completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20HDKitabooFontManager")
@interface HDKitabooFontManager : NSObject
+ (HDKitabooFontManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setFontNameWithFontName:(NSString * _Nonnull)fontName;
+ (NSString * _Nonnull)getFontName SWIFT_WARN_UNUSED_RESULT;
- (void)registerFontWithFileNameString:(NSString * _Nullable)fileNameString bundle:(NSBundle * _Nullable)bundle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK28HDKitabooHLSServiceInterface")
@interface HDKitabooHLSServiceInterface : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)baseURLString clientID:(NSString * _Nonnull)clientID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)microServicesBaseUrl clientID:(NSString * _Nonnull)clientID enableCDNCookies:(BOOL)enable OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)baseURLString microServicesBaseUrl:(NSString * _Nonnull)microServicesBaseUrl clientID:(NSString * _Nonnull)clientID enableCDNCookies:(BOOL)enable IsKitabooContentServer:(BOOL)kitabooContentServer OBJC_DESIGNATED_INITIALIZER;
/// This method is called to fetch HLS book download URL.
/// - parameter userToken : userToken Current user’s userToken.
/// - parameter bookId : bookId for which url will be fetched.
/// - parameter timeStamp : timestamp
/// - parameter isHLSAudio : A value which will indicate that downloaded url is an audio or video type.
/// - parameter onlineStreaming : A parameter which will decide that fetched url meta data should be downloaded on specific path or not. For online streaming no meta data will  be downloaded And for offline streaming all the metadata will be downloaded on provided path.
/// - parameter downloadablePath : A path where all the meta data of HLS streaming URL will be downloaded.
/// - parameter successHandler : Handler which gets executed when get success in the response.
/// - parameter failureHandler : Handler which gets executed when get failure in the response.
- (void)fetchHLSMediaBookDownloadURL:(NSString * _Nonnull)userToken bookId:(NSNumber * _Nonnull)bookId timeStamp:(NSNumber * _Nonnull)timeStamp isHLSOnlineStreaming:(BOOL)onlineStreaming successHandler:(void (^ _Nonnull)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nullable))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)fetchHLSM3U8URLs:(NSString * _Nonnull)hlsBaseURL isHLSAudio:(BOOL)isHLSAudio hlsMetaDataDownloadablePath:(NSString * _Nullable)downloadablePath withAudioThumbnailURL:(NSString * _Nullable)thumbnailURL successHandler:(void (^ _Nonnull)(NSArray<NSURL *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
@end








/// A class to handle the themes for Media Book all UI Components.
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK25HDKitabooMediaBookThemeVO")
@interface HDKitabooMediaBookThemeVO : NSObject
/// Theme parameters for Media Top Panel.
@property (nonatomic, strong) UIColor * _Nullable media_toppanel_background;
@property (nonatomic, strong) UIColor * _Nullable media_toppanel_icons_color;
@property (nonatomic, strong) UIColor * _Nullable media_toppanel_bookTitle_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_toppanel_bottom_line;
/// Theme parameters for Media Side Panel.
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_background;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_tab_background;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_tab_border;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_tab_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_tab_border;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_background;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_title_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_Chapter_Time_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_unselected_chapter_title_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_description_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_time_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_icons_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_delete_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_divider_color;
/// Theme parameters for Media Book Cover.
@property (nonatomic, strong) UIColor * _Nullable media_audioBookCover_background_color;
@property (nonatomic, strong) UIColor * _Nullable media_audioBookCover_shadow_color;
/// Theme parameters for Media Book Player View.
@property (nonatomic, strong) UIColor * _Nullable media_playerView_slider_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_chapter_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_slider_filled_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_default_timetext_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_current_timetext_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_chapter_title_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_chapter_count_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_navigation_arrow_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_disabled_navigation_arrow_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_selected_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_selected_icon_background;
/// Theme parameters for Media Book PopOver/Alerts/Action Sheets.
@property (nonatomic, strong) UIColor * _Nullable media_popup_background;
@property (nonatomic, strong) UIColor * _Nullable media_popup_title_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_hint_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_input_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_time_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_speed_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_selected_speed_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_action_button_main_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_action_button_cancel_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_action_button_delete_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_border;
@property (nonatomic, strong) UIColor * _Nullable media_popup_line_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_check_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_action_button_main_background_color;
@property (nonatomic, strong) UIColor * _Nullable media_action_button_cancel_border_color;
/// Theme parameters for Media Video book player.
@property (nonatomic, strong) UIColor * _Nullable video_player_background;
@property (nonatomic, strong) UIColor * _Nullable video_player_icon_color;
@property (nonatomic, strong) UIColor * _Nullable video_player_text_color;
@property (nonatomic, strong) UIColor * _Nullable video_player_Play_icon_color;
@property (nonatomic, strong) UIColor * _Nullable video_player_Play_icon_overlay_background;
/// Initializes the HDKitabooMediaBookThemeVO object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// To take the theme file from the provided theme json path.
/// <ul>
///   <li>
///     : themeJsonPath : The theme Json Path.
///   </li>
/// </ul>
- (void)updateThemeFromJsonPath:(NSString * _Nullable)themeJsonPath;
@end

@protocol HDKitabooMediaPopOverControllerDelegate;
@class HDKitabooMediaPopOverModel;

/// An object that manages the UI and handling for Media PopOver View.
/// A HDKitabooMediaPopOverController object manages the UI and provides call backs for multiple actions performed.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK31HDKitabooMediaPopOverController")
@interface HDKitabooMediaPopOverController : UIViewController
/// The object that acts as the delegate of the HDKitabooMediaPopOverController.
/// The delegate must adopt the HDKitabooMediaPopOverControllerDelegate protocol.
@property (nonatomic, strong) id <HDKitabooMediaPopOverControllerDelegate> _Nullable delegate;
/// Initializes an allocated HDKitabooMediaPopOverController object.
/// \param mediaPopOverModel mediaPopOverModel is the HDKitabooMediaPopOverModel instance.
///
- (nonnull instancetype)init:(HDKitabooMediaPopOverModel * _Nonnull)mediaPopOverModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface HDKitabooMediaPopOverController (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end

@class UIGestureRecognizer;
@class UITouch;

@interface HDKitabooMediaPopOverController (SWIFT_EXTENSION(Kitaboo_Reader_SDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end






/// The delegate of a HDKitabooMediaPopOverController object must adopt the HDKitabooMediaPopOverControllerDelegate protocol.
/// HDKitabooMediaPopOverControllerDelegate Protocol used to handle all the callbacks of HDKitabooMediaPopOverController Class.The HDKitabooMediaPopOverControllerDelegate protocol defines methods to provide callback when user perform any action on HDKitabooMediaPopOverController.
/// When configuring the HDKitabooMediaPopOverController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK39HDKitabooMediaPopOverControllerDelegate_")
@protocol HDKitabooMediaPopOverControllerDelegate
@optional
/// Tell the delegate that the HDKitabooMediaPopOverController any Item is tapped.
/// This callback will be initialised when the user taps on any item of HDKitabooMediaPopOverController. HDKitabooMediaPopOverController will be dismissed after this callback.
- (void)didTapOnItem:(NSString * _Nonnull)itemTitle;
/// Tell the delegate that the HDKitabooMediaPopOverController’s Switch control button state(ON/OFF) has been changed.
/// This callback will only be initialised when the user is using Default Customised Controller where Switch control button is available and user is changing it’s state.
- (void)didChangeSwitchState:(BOOL)isOn;
/// Tell the delegate that the HDKitabooMediaPopOverController is being dismissed.
/// This callback will be initialised when the user dismisses the view by tapping outside it.
- (void)didTapOnCancelItem;
@end

@class UIFont;

/// An Object that will contain additional information for HDKitabooMediaPopOverController.
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK26HDKitabooMediaPopOverModel")
@interface HDKitabooMediaPopOverModel : NSObject
/// HDKitabooMediaPopOverController header Title.
/// <ul>
///   <li>
///     If a user is not setting this value, By default no Header will be shown on Pop Over.
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable popOverTitle;
/// Total number of items in HDKitabooMediaPopOverController view.
@property (nonatomic, strong) NSNumber * _Nullable numberOfItems;
/// To set HDKitabooMediaPopOverController all items text.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable itemsTitles;
/// To set HDKitabooMediaPopOverController all items font.
@property (nonatomic, strong) UIFont * _Nullable itemFont;
/// To set  selected item Text.
@property (nonatomic, copy) NSString * _Nullable selectedItem;
/// To set color to selected item font.
@property (nonatomic, strong) UIColor * _Nullable selectedItemColor;
/// To set HDKitabooMediaPopOverController all custom items text.
/// <ul>
///   <li>
///     If enableCustomController value is true, along with default items, additional items will also be shown on pop over.  And customItemTitles will set text to these additional items.
///   </li>
/// </ul>
@property (nonatomic, copy) NSArray<NSString *> * _Nullable customItemTitles;
/// To set HDKitabooMediaPopOverController all custom items font.
/// <ul>
///   <li>
///     If enableCustomController value is true, along with default items, additional items will also be shown on pop over.  And customItemFonts will set font to these additional items.
///   </li>
/// </ul>
@property (nonatomic, strong) UIFont * _Nullable customItemFont;
/// To set HDKitabooMediaPopOverController source View. If source View is not being sat, in that case pop over will be shown in the middle of it’s super view.
@property (nonatomic, strong) UIView * _Nullable popOverSourceView;
/// To set enable/Disable of switch Button.
/// <ul>
///   <li>
///     If enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header. And enableSwitchControl will enable/Disable the Switch Button. The Defult Value will be <code>true</code> for  this.
///   </li>
/// </ul>
@property (nonatomic) BOOL enableSwitchControl;
/// To set state of switch Button.
/// <ul>
///   <li>
///     If enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header. And switchState will set the state of Switch Button i.e. ON/OFF.
///   </li>
/// </ul>
@property (nonatomic) BOOL switchState;
/// To set tint color to switch Button.
/// <ul>
///   <li>
///     If enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header. And switchTintColor will set the tint color to the Switch.
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable switchTintColor;
/// To set text to Switch Label.
/// <ul>
///   <li>
///     If enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header. And switchLabelText will set the text to the Switch Label.
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable switchLabelText;
/// To set font to Switch Label.
/// <ul>
///   <li>
///     If enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header. And switchLabelFont will set the font to the Switch Label.
///   </li>
/// </ul>
@property (nonatomic, strong) UIFont * _Nullable switchLabelFont;
/// To enable the default Media PopOver controller with Customise UI. When user set enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header.
/// The Default value of enableDefaultCustomisedController is false .
@property (nonatomic) BOOL enableDefaultCustomisedController;
/// To enable the custom Media PopOver controller. When user set enableCustomController value to true a customised Media PopOver controller will be shown to user.
/// The Default value of enableCustomController is false .
@property (nonatomic) BOOL enableCustomController;
/// To change the arrow direction to right of custom Media PopOver controller. When user set enableCustomControllerRightArrow value to true then the pop over arrow direction will be right.
/// The Default value of enableCustomControllerRightArrow is false .
@property (nonatomic) BOOL enableCustomControllerRightArrow;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HDKitabooSleepTimerControllerDelegate;
enum SleepAction : NSInteger;

/// An object that manages the UI for Sleep Timer View
/// A HDKitabooSleepTimerController object manages the UI and provides call backs for multiple actions performed.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK29HDKitabooSleepTimerController")
@interface HDKitabooSleepTimerController : UIViewController
/// The object that acts as the delegate of the HDKitabooSleepTimerController.
/// The delegate must adopt the HDKitabooSleepTimerControllerDelegate protocol.
@property (nonatomic, weak) id <HDKitabooSleepTimerControllerDelegate> _Nullable delegate;
/// To set the theme color to various UI components of the HDKitabooSleepTimerController
/// This method should be called to set the color to various UI components of the HDKitabooSleepTimerController. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To set the source view to the HDKitabooSleepTimerController
/// This method should be called to set the source view to present the HDKitabooSleepTimerController.
/// \param view view is the UIView object.
///
- (void)setSourceViewForSleepTimerViewController:(UIView * _Nonnull)view;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)updateSelectedSleepAction:(enum SleepAction)selectedSleepAction;
- (void)updateCustomSelectedTimeWithTime:(NSTimeInterval)time;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The delegate of a HDKitabooSleepTimerController object must adopt the HDKitabooSleepTimerControllerDelegate protocol.
/// HDKitabooSleepTimerControllerDelegate Protocol used to handle all the callbacks of HDKitabooSleepTimerController Class.The HDKitabooSleepTimerControllerDelegate protocol defines methods to provide callback when user perform any action on HDKitabooSleepTimerController.
/// When configuring the HDKitabooSleepTimerController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK37HDKitabooSleepTimerControllerDelegate_")
@protocol HDKitabooSleepTimerControllerDelegate
@optional
/// Delegate method called when Cancel alert action button is tapped.
/// This method will be called when user tap on the Cancel alert action button.
- (void)didRemoveSleepTimerView;
/// Delegate method called when action button with sleep time is tapped.
/// This method will be called when user tap on the action button with sleep time.
/// \param selectedSleepTime selectedSleepTime is the time shown on the action which is tapped.
///
/// \param selectedSleepAction selectedSleepAction is the SleepAction of the alert action button which is  tapped.
///
- (void)didSetAudioSleepTimerWithSelectedSleepTime:(NSTimeInterval)selectedSleepTime selectedSleepAction:(enum SleepAction)selectedSleepAction;
/// Delegate method called when Sleep Timer Off action button is tapped.
/// This method will be called when user tap on the Sleep Timer Off action button.
- (void)didSetAudioSleepTimerOff;
@end

@protocol HDMediaBookBookmarkControllerDelegate;

/// An object that manages the UI for Bookmark View.
/// A HDMediaBookBookmarkController object manages the UI and provides call backs when the bookmark is updated.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK29HDMediaBookBookmarkController")
@interface HDMediaBookBookmarkController : UIViewController
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// The object that acts as the delegate of the HDMediaBookBookmarkController.
/// The delegate must adopt the HDMediaBookBookmarkControllerDelegate protocol.
@property (nonatomic, weak) id <HDMediaBookBookmarkControllerDelegate> _Nullable delegate;
/// Initializes the HDMediaBookBookmarkController object.
/// This method should be called to initialize the HDMediaBookBookmarkController object to add the new bookmark.
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel instance.
///
/// \param chapterTitle chapterTitle is Book Chapter Title.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
/// Initializes the HDMediaBookBookmarkController object
/// This method should be called to initialize the HDMediaBookBookmarkController object to delete the existing bookmark.
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel instance.
///
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.
///
/// \param chapterTitle chapterTitle is Book Chapter Title.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel bookmarkVO:(SDKBookmarkVO * _Nonnull)bookmarkVO OBJC_DESIGNATED_INITIALIZER;
/// To set the theme color to various UI components of the HDMediaBookBookmarkController
/// This method should be called to set the color to various UI components of the HDMediaBookBookmarkController. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// The delegate of a HDMediaBookBookmarkController object must adopt the HDMediaBookBookmarkControllerDelegate protocol.
/// HDMediaBookBookmarkControllerDelegate Protocol used to handle all the callbacks of HDMediaBookBookmarkController Class.The HDMediaBookBookmarkControllerDelegate protocol defines methods to provide callback when user perform any action on HDMediaBookBookmarkController.
/// When configuring the HDMediaBookBookmarkController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK37HDMediaBookBookmarkControllerDelegate_")
@protocol HDMediaBookBookmarkControllerDelegate
@optional
/// Delegate method when tapped on add bookmark button
/// This method will be called when user tap on the add bookmark button
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.It is used to add/update the bookmark in database
///
- (void)didTapOnAddBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// Delegate method when tapped on delete bookmark button
/// This method will be called when user tap on the delete bookmark button
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.It is used to delete the bookmark in database
///
- (void)didTapOnDeleteBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// Delegate method when tapped on cancel bookmark button
/// This method will be called when user tap on the cancel bookmark button
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.
///
- (void)didTapOnCancelBookmark:(SDKBookmarkVO * _Nullable)bookmarkVO;
@end


/// An Object that will contain all the information about a chapter of Media book.
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20HDMediaBookChapterVO")
@interface HDMediaBookChapterVO : NSObject
/// To get Media Book chapter Title.
@property (nonatomic, copy) NSString * _Nullable chapterTitle;
/// To get Media Book chapter Description.
@property (nonatomic, copy) NSString * _Nullable chapterDescription;
/// To get Media Book chapter Seek Time.
@property (nonatomic) NSInteger chapterSeekTime;
/// To get Media Book chapter Thumbnail URL.
@property (nonatomic, copy) NSString * _Nullable chapterThumbnailURL;
/// To get Media Book chapter Thumbnail Path.
@property (nonatomic, copy) NSString * _Nullable chapterThumbnailPath;
/// To get Media Book chapter URL.
@property (nonatomic, copy) NSString * _Nullable url;
/// To get Media Book chapter URL last Path Component.
@property (nonatomic, copy) NSString * _Nullable urlLastPathComponent;
/// Name of the current asset.
@property (nonatomic, copy) NSString * _Nullable assetM3U8Name;
/// To get Media Book chapter subchapter Thumbnail Path.
@property (nonatomic, copy) NSArray<HDMediaBookChapterVO *> * _Nullable children;
/// To get Media Book Chapter Start Time.
@property (nonatomic) NSInteger chapterStartTimeForBook;
/// To get Media Book Chapter Total Time.
@property (nonatomic) NSInteger chapterTotalTime;
@property (nonatomic) NSInteger avAssetTotalTime;
@property (nonatomic, copy) NSData * _Nullable hlsChpaterKeyData;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HDMediaBookTranscriptVO;
@class HDMediaBookTimeIndexVO;

/// An Object that will contain additional infromation of a Media Book.
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16HDMediaBookModel")
@interface HDMediaBookModel : NSObject
/// To get Media Book Id.
@property (nonatomic, copy) NSString * _Nullable mediaBookId;
/// To get Media Book Path.
@property (nonatomic, copy) NSString * _Nullable mediaBookPath;
/// To get Media Book Title.
@property (nonatomic, copy) NSString * _Nullable mediaBookTitle;
/// To get media Narration Speed Rate.
@property (nonatomic) float mediaNarrationSpeedRate;
/// To get Media Book thumbnail URL.
@property (nonatomic, copy) NSString * _Nullable thumbnailURL;
/// To get Media Book thumbnail Path.
@property (nonatomic, copy) NSString * _Nullable thumbnailPath;
/// To get media book current state.
@property (nonatomic) enum CurrentState mediaCurrentState;
/// To get media book total duration time.
@property (nonatomic) NSInteger totalTime;
/// To get media book current time.
@property (nonatomic) NSInteger currentTime;
/// The current playing chapter of Book.
@property (nonatomic, strong) HDMediaBookChapterVO * _Nullable currentChapter;
/// An Array of HDMediaBookChapterVO, which is used to get the total chapters in media book.
@property (nonatomic, copy) NSArray<HDMediaBookChapterVO *> * _Nullable chapters;
/// An Array of HDMediaBookTranscriptVO, which is used to get the total transcripts in media book.
@property (nonatomic, copy) NSArray<HDMediaBookTranscriptVO *> * _Nullable transcripts;
/// An Array of HDMediaBookTimeIndexVO, which is used to get the total timeIndex in media book.
@property (nonatomic, copy) NSArray<HDMediaBookTimeIndexVO *> * _Nullable timeIndexVOArray;
/// To get media Book Encryption Type.
@property (nonatomic, copy) NSString * _Nullable mediaBookEncryptionType;
/// To get media Book ISBN.
@property (nonatomic, copy) NSString * _Nullable mediaBookISBN;
/// To get all the supported audio languages for media Book.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable mediaSupportedAudios;
/// To get all the supported subtitle languages for media Book.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable mediaSupportedSubtitles;
/// To get all the supported subtitle languages for media Book.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable mediaSupportedResolutions;
/// To get additionalInfo for media Book.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable mediaBookAdditonalInfo;
/// To get Media Book Author.
@property (nonatomic, copy) NSString * _Nullable author;
/// To get Media Book Readby.
@property (nonatomic, copy) NSString * _Nullable readBy;
/// To get Media Book Publisher.
@property (nonatomic, copy) NSString * _Nullable publisher;
/// To get Media Book In Language.
@property (nonatomic, copy) NSString * _Nullable inLanguage;
/// To get Media Book Accessibility Summary.
@property (nonatomic, copy) NSString * _Nullable accessibilitySummary;
/// To Check Multi Audio Package.
@property (nonatomic) BOOL multiAudioPackage;
/// To Check Multi Level Chapter.
@property (nonatomic) BOOL multiLevelChapter;
/// To get Package Duration.
@property (nonatomic) NSInteger mediaDuration;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable cookies;
@property (nonatomic, copy) NSArray<HDMediaBookChapterVO *> * _Nonnull mediaBookAllChaptersArray;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HDMediaBookNarrationSpeedControllerDelegate;

/// An object that manages the UI for Narration Speed View.
/// A HDMediaBookNarrationSpeedController object manages the UI and provides call backs when the narration speed is updated.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK35HDMediaBookNarrationSpeedController")
@interface HDMediaBookNarrationSpeedController : UIViewController
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// The object that acts as the delegate of the HDMediaBookNarrationSpeedController.
/// The delegate must adopt the HDMediaBookNarrationSpeedControllerDelegate protocol.
@property (nonatomic, weak) id <HDMediaBookNarrationSpeedControllerDelegate> _Nullable delegate;
/// Initializes an allocated HDMediaBookNarrationSpeedController object.
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// To set the theme color to various UI components of the HDMediaBookBookmarkController
/// This method should be called to set the color to various UI components of the HDMediaBookBookmarkController. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To set the speed options of the HDMediaBookBookmarkController
/// This method should be called to set the  speed options of the HDMediaBookBookmarkController. The options will used for setting narratio speed options. If this method is not called, then the default optios will be used.
/// \param array array is the NSArray instance.If this object is not set, then the default optios will be used
///
- (void)setSpeedOptions:(NSArray * _Nonnull)array;
/// To set the source view to the NarrationSpeedController
/// This method should be called to set the source view to present the NarrationSpeedController.If this method is not called then by default the NarrationSpeedController will be displayed in the center of the view.
/// \param view view is the UIView object.
///
- (void)setSourceViewForNarrationSpeedController:(UIView * _Nonnull)view;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// The delegate of a HDMediaBookNarrationSpeedController object must adopt the HDMediaBookNarrationSpeedControllerDelegate protocol.
/// HDMediaBookNarrationSpeedControllerDelegate Protocol used to handle all the callbacks of HDMediaBookNarrationSpeedController Class.The HDMediaBookNarrationSpeedControllerDelegate protocol defines methods to provide callback when user perform any action on HDMediaBookNarrationSpeedController.
/// When configuring the HDMediaBookNarrationSpeedController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK43HDMediaBookNarrationSpeedControllerDelegate_")
@protocol HDMediaBookNarrationSpeedControllerDelegate
@optional
/// Delegate method to update change in reading speed of the audio
/// This method will be called when narration speed of the audio is being updated/changed.
/// \param mediaBookModel mediaBookModel is the instance of HDMediaBookModel.We can get the updated narration speed from audioNarrationSpeedRate from HDMediaBookModel object.
///
- (void)didNarrationSpeedValueChanges:(HDMediaBookModel * _Nullable)mediaBookModel;
/// Delegate method to update when cancel button is tapped
/// This method will be called when user tap on the cancel button
- (void)didTapOnCancel;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17HDMediaBookParser")
@interface HDMediaBookParser : NSObject
@property (nonatomic, copy) void (^ _Nullable bookParsingCompleted)(HDMediaBookModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable bookParsingFailed)(NSError * _Nonnull);
- (void)parseTOCTimeIndexJsonForAudio:(HDMediaBookModel * _Nonnull)mediaBookModel tocjsonPath:(NSString * _Nullable)tocjsonPath timeIndexPath:(NSString * _Nullable)timeIndexPath;
- (void)parseTOCTimeIndexJsonForVideo:(HDMediaBookModel * _Nonnull)mediaBookModel tocjsonPath:(NSString * _Nullable)tocjsonPath timeIndexPath:(NSString * _Nullable)timeIndexPath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HDMediaBookPlayerDelegate;
@class AVAssetResourceLoader;
@class AVAssetResourceLoadingRequest;

/// An object that manages the rendering of the media Book.
/// A HDMediaBookPlayer object enable to perform multiple actions on a media i,e play, pause and many more.
/// <ul>
///   <li>
///     SuperClass : UIView
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17HDMediaBookPlayer")
@interface HDMediaBookPlayer : UIView <AVAssetResourceLoaderDelegate>
/// The object that acts as the delegate of the HDMediaBookPlayer.
/// The delegate must adopt the HDMediaBookPlayerDelegate protocol.
@property (nonatomic, weak) id <HDMediaBookPlayerDelegate> _Nullable delegate;
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// To get the current selected subtitle/CC value for Media.
@property (nonatomic, readonly, copy) NSString * _Nullable currentSelectedSubtitle;
/// To get the current selected Audio value for Media.
@property (nonatomic, readonly, copy) NSString * _Nullable currentSelectedAudio;
/// To get the current selected Video quality value for Media.
@property (nonatomic, readonly, copy) NSString * _Nullable currentSelectedQuality SWIFT_AVAILABILITY(ios,introduced=11.0);
/// Initializes the HDMediaBookPlayer object
/// This method should be called to initialize the HDMediaBookPlayer object
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nonnull)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// To get the AVPlayerView which is necessary to display the Video
/// This method should be called to get the AVPlayerView which is necessary to display the Video
- (UIView * _Nonnull)getPlayerLayerView SWIFT_WARN_UNUSED_RESULT;
/// To resume the audio
/// This method should be called to resume the audio play
- (void)playWithChapter:(HDMediaBookChapterVO * _Nullable)chapterModel;
/// To resume the audio from specific time
/// This method should be called to resume the audio play from specific time period
/// \param value value is the Int value.It should be time period in seconds
///
- (void)playToSeekTime:(NSInteger)value;
/// To stop the audio
/// This method should be called to stop the audio play
- (void)stop;
/// To pause the audio
/// This method should be called to pause the audio play
- (void)pause;
/// To set the reading of the audio
/// This method should be called to set the reading/narration speed of the audio.
/// \param isAudioMute isAudioMute is a boolean which enables to mute/unmute the audio.If the boolean is true, then audio will be muted and vice versa.
///
- (void)mute:(BOOL)isAudioMute;
/// To set the reading speed of the audio
/// This method should be called set the reading speed of the audio play
/// \param mediaBookModel mediaBookModel is the instance of HDMediaBookModel.
///
- (void)setReadingSpeed:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// To forward the audio
/// This method should be called to forward the audio play
/// \param time time is the Int value which represents the number of seconds to be forwarded.
///
- (void)playForwardWithTime:(float)time;
/// To rewind the audio
/// This method should be called to rewind the audio play
/// \param time time is the Int value which represents the number of seconds to be rewinded
///
- (void)playBackwardWithTime:(float)time;
/// To play the audio from specific chapter
/// This method should be called to navigate between chapter i.e to play the audio from the specific chapter
- (void)navigateToChapter:(HDMediaBookChapterVO * _Nonnull)chapterVO withSeekTime:(NSInteger)seekTime;
/// To play the audio from specific time
/// This method should be called to navigate between bookmark time  i.e to play the audio from the specific bookmark time
- (void)navigateToBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To get the current playing time of the audio
/// This method should be called to get the current playing time of the audio
- (NSInteger)getSeekTime SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end





@interface HDMediaBookPlayer (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
/// To change the media audio Language.
/// This method should be called if the user wants  to change media audio Language.
/// \param audioType audioType, Name of Audio Language.
///
- (void)changeMediaLanguage:(NSString * _Nonnull)audioType;
/// To change the media Subtitle Language.
/// This method should be called if the user wants  to change media Subtitle Language.
/// \param subtitle subtitle, Name of subtitle type.
///
- (void)changeMediaSubtitle:(NSString * _Nullable)subtitle;
/// To change the Video Quality.
/// This method should be called if the user wants to change Video Quality.
/// \param option option, Video Quality value.
///
- (void)changeVideoQuality:(NSString * _Nonnull)option;
@end


/// The delegate of a HDMediaBookPlayer object must adopt the HDMediaBookPlayerDelegate protocol.
/// HDMediaBookPlayerDelegate Protocol used to handle all the callbacks of HDMediaBookPlayer Class.The HDMediaBookPlayerDelegate protocol defines methods to provide callback when user perform any action on HDMediaBookPlayer.
/// When configuring the HDMediaBookPlayer object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK25HDMediaBookPlayerDelegate_")
@protocol HDMediaBookPlayerDelegate
@optional
/// Delegate method to update the audio playing time
/// This method will be called to when audio is in playing mode with continuous update of the current time out of total time
/// \param currentTime currentTime is the Int value.It returns the actual playing time in seconds
///
/// \param totalTime totalTime is the Int value.It returns the total time in seconds
///
- (void)playerPlayingWithCurrentTime:(NSInteger)currentTime totalTime:(NSInteger)totalTime;
/// Delegate method to update completion of audio play
/// This method will be called when the audio has finished the playing
- (void)playerDidFinishPlaying;
/// Delegate method to update the error occured to play
/// This method will be called when the audio has failed to play
/// \param error error is the Error instance.It returns the cause to fail the audio to be played
///
- (void)playerFailedToPlayWithError:(NSError * _Nonnull)error;
/// Delegate method to update the current state of the audio
/// This method will be called  when audio has changed the current state from one form to other form
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.We can get the current state of the audio from mediaCurrentState variable from mediaBookModel instance
///
- (void)playerDidChangeStateWithMediaBookModel:(HDMediaBookModel * _Nonnull)mediaBookModel;
@end

@protocol HDMediaBookTOCControllerDelegate;
enum MediaBookTOCFilter : NSInteger;

/// An object that manages the UI of TOC for Media Book
/// A HDMediaBookTOCController object manages the UI and provides call backs for multiple actions performed on TOC for Chapter/Transcript/Bookmark segment/view
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK24HDMediaBookTOCController")
@interface HDMediaBookTOCController : UIViewController <UITableViewDataSource, UITableViewDelegate>
/// The object that acts as the delegate of the HDMediaBookTOCController.
/// The delegate must adopt the HDMediaBookTOCControllerDelegate protocol.
@property (nonatomic, weak) id <HDMediaBookTOCControllerDelegate> _Nullable delegate;
/// An Object to get TOC controller section mode type whether it is CHAPTER, TRANSCRIPT or BOOKMARK.
@property (nonatomic) enum MediaBookTOCFilter selectedMode;
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// Initializes the HDAudioBookTOCViewController object
/// This method should be called to initialize the HDAudioBookTOCViewController object
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nonnull)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// To set the data to specific selected segment/view i.e, Chapter/Transcript/Bookmark
/// This method should be called every time when user receive the callback for selected segment/view i.e, Chapter/Transcript/Bookmark to set the relative data of the selected segment/view.
/// \param data data is the NSArray instance.When user select Chapter segment/view then it should be an array of HDMediaBookChapterVO.When user select Transcript segment/view then it should be an array of HDMediaBookTranscriptVO.When user select Bookmark segment/view then it should be an array of SDKBookmarkVO.
///
- (void)setData:(NSArray * _Nullable)data;
/// To set the theme color to various UI components of the HDMediaBookTOCController
/// This method should be called to set the color to various UI components of the HDMediaBookTOCController. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To hide/unhide the Transcript segment in TOC.
/// This method should be called to hide/unhide the Transcript segment from TOC.If this method is not called then by default the Transcript segment will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the transcript segment in TOC will be hidden and vice versa.
///
- (void)hideTranscript:(BOOL)hide;
/// To hide/unhide the Bookmark segment in TOC.
/// This method should be called to hide/unhide the Bookmark segment from TOC.If this method is not called then by default the Bookmark segment will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the Bookmark segment in TOC will be hidden and vice versa.
///
- (void)hideBookmark:(BOOL)hide;
/// To update the table view cell for the current playing chapter of the AudioBook
/// This method should be called to update the UI the table view cell for the current playing chapter of the AudioBook i.e, to change the background color of the tableViewCell and play/pause icon.
/// \param enable chapterVO is the HDMediaBookChapterVO instance.This is instance of the current playing chapter.
///
- (void)updateTOCForCurrentChapter:(HDMediaBookChapterVO * _Nullable)chapterVO;
/// To update the play/pause button title according to the current state of the AudioBook
/// This method should be called to update the play/pause button title according to the current state of the AudioBook.
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel object
///
- (void)setPlayPauseState:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// To reload the data of the selected segment
/// This method should be called to reload the data of the selected segment
- (void)refresh;
/// To reload the data of the bookmark segment.
/// This method should be called to reload the data of the bookmark segment.
- (void)reloadBookmarkSection;
- (void)actionForButtonWithSender:(UIButton * _Nonnull)sender;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)viewDidDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end




/// The delegate of a HDMediaBookTOCController object must adopt the HDMediaBookTOCControllerDelegate protocol.
/// HDMediaBookTOCControllerDelegate Protocol used to handle all the callbacks of HDMediaBookTOCController Class.The HDMediaBookTOCControllerDelegate protocol defines methods to provide callback when user perform any action on HDMediaBookTOCController.
/// When configuring the HDMediaBookTOCController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK32HDMediaBookTOCControllerDelegate_")
@protocol HDMediaBookTOCControllerDelegate
@optional
/// Delegate method when user tap on chapter segment/view of the TOC
/// This method will be called when the user taps on the chapter segment/view.It allows the user to set the data related to the chapters of the AudioBook.
- (void)didTapOnChapterSegment;
/// Delegate method when user tap on Transcript segment/view of the TOC
/// This method will be called when the user taps on the Transcript segment.It allows the user to set the data related to the Transcript of the AudioBook.
- (void)didTapOnTranscriptSegment;
/// Delegate method when user tap on Bookmark segment/view of the TOC
/// This method will be called when the user taps on the Bookmark segment.It allows the user to set the data related to the Bookmark of the AudioBook.
- (void)didTapOnBookmarkSegment;
/// Delegate method when user tap on specific table view cell in the chapter segment/view
/// This method will be called when user tap on specific table view cell in the chapter segment/view
/// \param chapterVO chapterVO is the HDMediaBookChapterVO instance.This instance contains the details related to the selected chapter
///
- (void)didTapOnChapter:(HDMediaBookChapterVO * _Nonnull)chapterVO;
/// Delegate method when user tap on specific table view cell in the transcript segment/view
/// This method will be called when user tap on specific table view cell in the transcript segment/view
/// \param transcriptVO transcriptVO is the HDMediaBookTranscriptVO instance.This instance contains the details related to the selected transcript
///
- (void)didTapOnTranscript:(HDMediaBookTranscriptVO * _Nonnull)transcriptVO;
/// Delegate method when user tap on specific table view cell in the bookmark segment/view
/// This method will be called when user tap on specific table view cell in the bookmark segment/view
/// \param audioBookParser bookmarkVO is the SDKBookmarkVO instance.This instance contains the details related to the selected bookmark
///
- (void)didTapOnBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// Delegate method when tapped on play/pause button on any specific tableViewCell of the chapter segment/view
/// This method will be called when user tap on play/pause button on any specific tableViewCell of the chapter segment/view
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (void)didTapOnChapterPlayPause:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// Delegate method when tapped on delete button on any specific table view cell of the Bookmark segment/view
/// This method will be called when user tap on delete button on any specific table view cell of the Bookmark segment
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.
///
- (void)didTapOnBookmarkDelete:(SDKBookmarkVO * _Nonnull)bookmarkVO;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK27HDMediaBookTOCTableViewCell")
@interface HDMediaBookTOCTableViewCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)layoutSubviews;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22HDMediaBookTimeIndexVO")
@interface HDMediaBookTimeIndexVO : NSObject
@property (nonatomic) NSInteger startTime;
@property (nonatomic) NSInteger endTime;
@property (nonatomic, copy) NSString * _Nullable folio;
@property (nonatomic, copy) NSString * _Nullable fileName;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable chapterTitle;
@property (nonatomic) NSInteger chapterTotalTime;
@property (nonatomic) NSInteger chapterContentIndex;
@property (nonatomic, strong) HDMediaBookTimeIndexVO * _Nullable parent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK23HDMediaBookTranscriptVO")
@interface HDMediaBookTranscriptVO : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21HDMultiLevelDataModel")
@interface HDMultiLevelDataModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("HDPDFCreator")
@interface HDPDFCreator : NSObject
- (nonnull instancetype)initWithHighlights:(NSArray * _Nonnull)highlights OBJC_DESIGNATED_INITIALIZER;
- (void)createPDFWithCompletion:(void (^ _Nonnull)(NSData * _Nonnull))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An Object that manage a view For Reflowable Layout Settings.
/// <ul>
///   <li>
///     The HDReflowableLayoutSettingController class defines a Layout for Reflowable Books where user can change the Background color, Theme color,Font Size, Reader Mode, Text Alignment,Brightness for the particular book.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK35HDReflowableLayoutSettingController")
@interface HDReflowableLayoutSettingController : UIViewController <UIGestureRecognizerDelegate, UIPickerViewDataSource, UIPickerViewDelegate>
/// <ul>
///   <li>
///     resetReaderSettingis a block that would be called when a user taps “Reset” button on reflowable setting view controller, Provide action that needs to be performed on tap of “Reset” button.
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable resetReaderSetting)(void);
/// fontFamilyDidChange is a block that would be called when a user taps on any font family from given drop down box on reflowable setting view controller, Provide action that needs to be performed on tap of that font family.
/// Returns The Selected Font of type String.
@property (nonatomic, copy) void (^ _Nullable fontFamilyDidChange)(NSString * _Nonnull);
/// <ul>
///   <li>
///     fontSizeDidChangeis a block that would be called when a user selects any option on slider on reflowable setting view controller, Provide action that needs to be performed on selecting option on slider.
///   </li>
/// </ul>
/// Returns The font size of type CGFloat.
@property (nonatomic, copy) void (^ _Nullable fontSizeDidChange)(CGFloat);
/// <ul>
///   <li>
///     didEnablePaginationis a block that would be called when a user taps on “Scroll Mode ON/OFF” switch on reflowable setting view controller, Provide action that needs to be performed on tap of “Scroll Mode ON/OFF” switch.
///   </li>
/// </ul>
/// Returns A BOOL value.
@property (nonatomic, copy) void (^ _Nullable didEnablePagination)(BOOL);
/// <ul>
///   <li>
///     didChangeReaderMode is a block that would be called when a user taps any mode on reflowable setting view controller, Provide action that needs to be performed on tap of that mode.
///   </li>
/// </ul>
/// Returns The mode type of Type Int.
@property (nonatomic, copy) void (^ _Nullable didChangeReaderMode)(NSInteger);
/// <ul>
///   <li>
///     didChangeTextAliginmentis a block that would be called when a user taps any text alignment on reflowable setting view controller, Provide action that needs to be performed on tap of that text alignment.
///   </li>
/// </ul>
/// Returns The text alignment of Type Int.
@property (nonatomic, copy) void (^ _Nullable didChangeTextAliginment)(NSInteger);
/// <ul>
///   <li>
///     didChangeLineSpacing is a block that would be called when a user taps any line spacing on a reflowable setting view controller, Provide action that needs to be performed on tap of that line spacing.
///   </li>
/// </ul>
/// Returns The line spacing of Type Int.
@property (nonatomic, copy) void (^ _Nullable didChangeLineSpacing)(NSInteger);
/// <ul>
///   <li>
///     didChangeMargin is a block that would be called when the user taps any margin on the reflowable setting view controller, Provide action that needs to be performed on tap of that margin.
///   </li>
/// </ul>
/// Returns The line spacing of Type Int.
@property (nonatomic, copy) void (^ _Nullable didChangeMargin)(NSInteger);
/// <ul>
///   <li>
///     willDismissController is a block that would be called when a user taps on outside of a reflowable setting to remove the view controller.
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable willDismissController)(void);
/// List of font families to apply on page text.
@property (nonatomic, strong) NSArray * _Nonnull fontFamilyArray;
@property (nonatomic, strong) UIColor * _Nonnull backgroundThemeColor;
@property (nonatomic, strong) UIColor * _Nullable borderColor;
@property (nonatomic, strong) UIColor * _Nullable themeColor;
@property (nonatomic, strong) UIColor * _Nonnull textColor;
@property (nonatomic, strong) UIColor * _Nullable titleTextColor;
@property (nonatomic, strong) UIColor * _Nullable buttonTitleColor;
@property (nonatomic, strong) UIColor * _Nullable buttonBorderColor;
@property (nonatomic, strong) UIColor * _Nullable selectedButtonTitleColor;
@property (nonatomic, strong) UIColor * _Nullable selectedButtonBorderColor;
@property (nonatomic, strong) UIColor * _Nullable resetButtonTitleColor;
@property (nonatomic, strong) UIColor * _Nullable sliderThumbColor;
@property (nonatomic, strong) UIColor * _Nullable sliderTrackTintColor;
@property (nonatomic, strong) UIColor * _Nullable scrollSwitchTintColor;
@property (nonatomic, strong) UIColor * _Nullable fontFamilyThemeColor;
@property (nonatomic, strong) UIColor * _Nullable separationLineColor;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// To enable font family view.
/// \param isEnable Bool value
///
- (void)enableFontFamilyView:(BOOL)isEnable;
/// To enable font size view.
/// \param isEnable Bool value
///
- (void)enableFontSizeView:(BOOL)isEnable;
/// To enable alignment view.
/// \param isEnable Bool value
///
- (void)enableAlignmentView:(BOOL)isEnable;
/// To enable line spacing view.
/// \param isEnable Bool value
///
- (void)enableLineSpacingView:(BOOL)isEnable;
/// To enable margin view.
/// \param isEnable Bool value
///
- (void)enableMarginView:(BOOL)isEnable;
/// To enable reader mode view.
/// \param isEnable Bool value
///
- (void)enableReaderModeView:(BOOL)isEnable;
/// To enable scroll mode view.
/// \param isEnable Bool value
///
- (void)enableScrollModeView:(BOOL)isEnable;
/// This method is used to set font to text available in layout.
/// \param fontName “fontName” is the value to create font for layout.
///
- (void)setCustomFontNameForLayoutWithFontName:(NSString * _Nonnull)fontName;
/// This method is used to  set background color to HDReflowableFontSettingViewController view.
/// \param color Color of type UIColor to set the background color.
///
- (void)setBackgroundColorForView:(UIColor * _Nonnull)color;
/// This method is used to  set Theme color to HDReflowableFontSettingViewController controls.
/// \param color Color of type UIColor to set the Theme color.
///
- (void)setThemeColorToView:(UIColor * _Nonnull)color;
/// This method is used to  set the list of available options for text alignment.
/// \param options Array of type NSArray to set the alignment options[LEFT_ALIGNMENT,CENTER_ALIGNMENT,RIGHT_ALIGNMENT,JUSTIFY_ALIGNMENT & DEFAULT_ALIGNMENT].
///
- (void)setTextAlignmentOptions:(NSArray * _Nonnull)options;
/// This method is used to  set the list of options for text linespacing.
/// \param options Array of type NSArray to set the text linespacing options[DEFAULT_LINESPACING,SMALL_LINESPACING,MEDIUM_LINESPACING & LARGE_LINESPACING].
///
- (void)setLineSpacingOptions:(NSArray * _Nonnull)options;
/// This method is used to  set the list of options for reader margin.
/// \param options Array of type NSArray to set the reader margin option[DEFAULT_MARGIN,SMALL_MARGIN,MEDIUM_MARGIN & LARGE_MARGIN]s.
///
- (void)setReaderMarginOptions:(NSArray * _Nonnull)options;
/// This method is used to  set the list of options for reader mode.
/// \param options Array of type NSArray to set the reader mode options[DAY_MODE,SEPIA_MODE,NIGHT_MODE & DEFAULT_MODE].
///
- (void)setReaderModeOptions:(NSArray * _Nonnull)options;
/// This method is used to set font size to text for whole Page of reflowable epub books.
/// \param currentFontSize currentFontSize is the value of changed font.
///
- (void)setFontSize:(NSInteger)currentFontSize;
/// This method used to enable/disable the pagination configuration for reflowable epub books.
/// @discussion Pagination, is the process of dividing a document into discrete pages, where page navigation direction is either from left to right or vertical scrolling.
/// <ul>
///   <li>
///     If enabled value is YES, page navigation direction will be left to right or in case of NO it will be vertical scrolling.
///   </li>
/// </ul>
/// \param enabled enabled is the boolean value which represents the pagination configuration.
///
- (void)setPaginationEnable:(BOOL)enabled;
/// This method used to set current Reader mode configuration for reflowable epub books.
/// @discussion  With the help of Reader mode Enable Feature user can change an appearance of Page to Day mode, Sepia mode or to night mode.
/// <ul>
///   <li>
///     Day Mode Uses a colour scheme that displays dark text on a light background.
///   </li>
///   <li>
///     Sepia Mode Is a reddish brown monochrome tint. When applied to a Page, it gives the Page a warm, antique feeling.
///   </li>
///   <li>
///     Night Mode Uses a colour scheme that displays light text on a dark background.
///   </li>
///   <li>
///     Default Mode uses a colour scheme that displays text & background as per book package details.
///   </li>
/// </ul>
/// \param modeType modeType is the ReaderModeType raw value which represents mode configuration
///
- (void)setReaderModeEnable:(NSInteger)modeType;
/// This method used to set text alignment configuration for reflowable epub books.
/// @discussion With the help of Text alignment Feature user can change alignment of text on a page using different text positioning.
/// <ul>
///   <li>
///     Left Alignment starts each new line of the document on the left-most margin.
///   </li>
///   <li>
///     Center Alignment positions and starts each new line/text block in the center/middle margin on the page.
///   </li>
///   <li>
///     Right Alignment starts each new line of the document on the right-most margin of the page.
///   </li>
///   <li>
///     Justify Alignment aligns text with right and left margins and tries to fill as much empty space as possible. It enables a straight margin on both of the page’s horizontal edges.
///   </li>
///   <li>
///     Default Alignment aligns text as per book package details.
///   </li>
/// </ul>
/// \param alignmentType alignmentType represents the current text alignment configuration.
///
- (void)setCurrentTextAlignment:(NSInteger)alignmentType;
/// This method used to set current font family configuration for reflowable epub books.
/// \param fontName fontName represents current font family configuration
///
- (void)setCurrentFontFamily:(NSString * _Nonnull)fontName;
/// This method used to set Line Spacing configuration for reflowable epub books.
/// <ul>
///   <li>
///     With the help of Line Spacing Feature user can change The Spacing between lines on a page.
///   </li>
///   <li>
///     Options- Default Line spacing, Small Line spacing,Medium Line spacing & Large Line spacing .
///   </li>
/// </ul>
/// \param lineSpacing lineSpacing represents the current line spacing configuration.
///
- (void)setCurrentLineSpacing:(NSInteger)lineSpacing;
/// This method used to set Margin configuration for reflowable epub books.
/// <ul>
///   <li>
///     With the help of margin Feature user can change the margin between text and border.
///   </li>
///   <li>
///     Options- Default Margin, Small Margin, Medium Margin & Large Margin.
///   </li>
/// </ul>
/// \param margin margin represents the current margin configuration.
///
- (void)setCurrentMargin:(NSInteger)margin;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIPickerView;

@interface HDReflowableLayoutSettingController (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
- (UIView * _Nonnull)pickerView:(UIPickerView * _Nonnull)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView * _Nullable)view SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("HDReflowablePageCountView")
@interface HDReflowablePageCountView : UIView
@property (nonatomic, readonly, strong) UILabel * _Nonnull chapterLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull dotLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull pageLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull readingTimeLeftLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setPageData:(NSString * _Nonnull)pageNumber;
- (void)setTimeLeftData:(NSString * _Nonnull)text;
- (void)setCustomFontFamily:(NSString * _Nonnull)fontName;
- (void)setViewColors:(UIColor * _Nonnull)textColor backgroundColor:(UIColor * _Nonnull)backgroundColor;
- (void)enableDotLabel:(BOOL)enable;
@end


SWIFT_CLASS_NAMED("HDReflowableSliderPopUpView")
@interface HDReflowableSliderPopUpView : UIView
@property (nonatomic, readonly, strong) UILabel * _Nonnull chapterLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull chapterNameLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull readingTimeLeftLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class ReflowableCustomSlider;
@class NSLayoutConstraint;
@class UIImage;

SWIFT_CLASS_NAMED("HDSliderBarView")
@interface HDSliderBarView : UIView
@property (nonatomic, strong) ReflowableCustomSlider * _Nonnull pageSlider;
@property (nonatomic, strong) NSLayoutConstraint * _Nullable sliderContainerVewHeight;
@property (nonatomic, readonly, strong) UIView * _Nonnull sliderContainerVew;
@property (nonatomic, readonly, strong) UILabel * _Nonnull percentageLabel;
@property (nonatomic, copy) void (^ _Nullable sliderValueChanged)(float);
@property (nonatomic, copy) void (^ _Nullable sliderMoves)(float);
- (nonnull instancetype)initWithVerticalSliderValue:(BOOL)enable OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)enableVerticalSlider:(BOOL)enable;
- (void)layoutSubviews;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)updatePercentage;
- (void)enableSliderThumbImage:(BOOL)enable;
- (void)setSliderThumbColour:(UIColor * _Nonnull)thumbColor maxTintColor:(UIColor * _Nonnull)maxColor minTintColor:(UIColor * _Nonnull)minTint;
- (void)setImageForSlider:(UIImage * _Nonnull)image withColour:(UIColor * _Nonnull)color;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class HDUserResizableTextView;

SWIFT_PROTOCOL_NAMED("HDUserResizableTextDelegate")
@protocol HDUserResizableTextDelegate <NSObject>
- (void)userResizableViewDidBeginEditing:(HDUserResizableTextView * _Nonnull)userResizableView;
- (void)userResizableViewDidEndEditing:(HDUserResizableTextView * _Nonnull)userResizableView;
- (void)userResizableViewDidValueChanged:(HDUserResizableTextView * _Nonnull)userResizableView;
- (BOOL)userResizableViewShouldBeginEditing:(HDUserResizableTextView * _Nonnull)userResizableView SWIFT_WARN_UNUSED_RESULT;
@end

@class UITextView;
@class UIEvent;

SWIFT_CLASS_NAMED("HDUserResizableTextView")
@interface HDUserResizableTextView : UIView <UITextViewDelegate>
@property (nonatomic, copy) NSString * _Nullable localID;
@property (nonatomic, readonly, strong) UIView * _Nullable border;
@property (nonatomic, strong) UIView * _Nullable contentView;
@property (nonatomic, weak) id <HDUserResizableTextDelegate> _Nullable delegate;
- (void)adjustFontSizeForTextViewWithTextView:(UITextView * _Nonnull)textView;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame withInset:(CGFloat)withInset OBJC_DESIGNATED_INITIALIZER;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)showEditingHandles;
- (void)hideEditingHandles;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)enterEditingMode;
@end

@protocol HDVideoBookPlayerViewControllerDelegate;
enum VideoPlayerViewStateUpdate : NSInteger;

/// An object that manages the UI of Video Player View
/// A HDVideoBookPlayerViewController object manages the UI and provides call backs for multiple actions performed
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK31HDVideoBookPlayerViewController")
@interface HDVideoBookPlayerViewController : UIViewController
/// The object that acts as the delegate of the HDVideoBookPlayerViewController.
/// The delegate must adopt the HDVideoBookPlayerViewControllerDelegate protocol.
@property (nonatomic, weak) id <HDVideoBookPlayerViewControllerDelegate> _Nullable delegate;
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// Initializes the HDVideoBookPlayerViewController object
/// This method should be called to initialize the HDVideoBookPlayerViewController object
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
/// \param videoPlayer UIView object where the video will be played/displayed.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel withVideoPlayer:(UIView * _Nonnull)videoPlayer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)bookmarkButtonTapped:(UIButton * _Nonnull)sender;
/// To set the video player view to full screen for Iphone.
- (void)setViewFullScreenForIphone;
/// To update the player view according to the state received
/// This method should be called to update the player view according to the state received.Set the state to kAudioBookUpdatePlayPauseState to update the play/pause button title according to the current state of the AudioBook.Set the state to kAudioBookUpdateReadingSpeed to update the text of the narration speed label.Set the state to kAudioBookUpdateCurrentTime to update the slider progress and time label text.
/// \param state state is an enum of  AudioBookStateUpdate
///
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel object
///
- (void)updatePlayerView:(enum VideoPlayerViewStateUpdate)state mediaBookModel:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// To update the chapter name and number for the current playing chapter of the AudioBook
/// This method should be called to update the chapter name and number for the current playing chapter of the AudioBook
/// \param enable chapterVO is the HDMediaBookChapterVO instance.This is instance of the current playing chapter.
///
- (void)setCurrentChapter:(HDMediaBookChapterVO * _Nullable)chapterVO;
/// To set the text color for the button title and selected narrated speed value
/// This method should be called to set the text color for apply button title and selected narrated speed value
/// \param color color is the UIColor instance.This is used to update the components apply button title and selected narrated speed value
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To hide/unhide the Bookmark
/// This method should be called to hide/unhide the Bookmark button.If this method is not called then by default the Bookmark button will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the Bookmark button will be hidden and vice versa.
///
- (void)hideBookmark:(BOOL)hide;
/// To disable the next chapter button.
/// This method should be called to disable the next chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disableNextChapter:(BOOL)disable;
/// To disable the previous chapter button.
/// This method should be called to disable the previous chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disablePreviousChapter:(BOOL)disable;
/// To disable the Bookmark  button.
/// This method should be called to disable the previous bookmark button.If this method is not called then by default the button will be in enabled state.
/// \param disable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disableBookmark:(BOOL)disable;
/// To enable/disable the Subtitle view.
/// This method should be called to enable/disable the previous Subtitle view. If this method is not called then by default the view will be in enabled state.
/// \param disable disable is a boolean. If the boolean is set to true then the view will be in disabled state and vice-versa.
///
- (void)setSubtitleViewState:(BOOL)disable;
/// To enable/disable the mute button.
/// This method should be called to enable/disable the mute button.
/// \param enable enable is a boolean.
///
- (void)enableDisbleMuteButton:(BOOL)enable;
/// To set color to  the Subtitle view.
/// This method should be called to set the color to Subtitle view. If this method is not called then by default the view color will be transparent.
/// \param color color is the color for view.
///
- (void)setSubtitleViewColor:(UIColor * _Nonnull)color;
/// To delete all the bookmarks on the view of the seek bar of the video player.
- (void)deleteAllBookmarks:(NSArray<SDKBookmarkVO *> * _Nonnull)bookmarksVO;
/// To add the bookmark view on the seek bar of the audio player
/// This method should be called to add the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)addBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To delete the bookmark view on the seek bar of the audio player
/// This method should be called to delete the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)deleteBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To update the user that whether the video is ready to play or not
/// This method should be called to update the user that whether the video is ready to play or not
/// \param isLoaded isLoaded is a boolean value. If the value is true then video is loaded and ready to play and vice versa
///
- (void)isVideoReadyToPlay:(BOOL)isLoaded;
/// This method should be called when view layout needed or device orientation changes.
- (void)updateViewOnOrientationChange;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end




/// The delegate of a HDVideoBookPlayerViewController object must adopt the HDVideoBookPlayerViewControllerDelegate protocol.
/// HDVideoBookPlayerViewControllerDelegate Protocol used to handle all the callbacks of HDVideoBookPlayerViewController Class.The HDVideoBookPlayerViewControllerDelegate protocol defines methods to provide callback when user perform any action on HDVideoBookPlayerViewController.
/// When configuring the HDVideoBookPlayerViewController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK39HDVideoBookPlayerViewControllerDelegate_")
@protocol HDVideoBookPlayerViewControllerDelegate
@optional
/// Delegate method when user tap on bookmark button
/// This method will be called when user tap on the bookmark button
- (void)didTapOnVideoBookmark;
/// Delegate method when tapped on play/pause button
/// This method will be called when user tap on the play/pause button
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (void)didTapOnVideoPlayPause:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// Delegate method when tapped on Narration Speed button
/// This method will be called when user tap on the Narration Speed button
- (void)didTapOnVideoNarrationSpeed:(UIButton * _Nonnull)button;
/// Delegate method when tapped on forward button
/// This method will be called when user tap on the forward button
- (void)didTapOnVideoForward;
/// Delegate method when tapped on backward button
/// This method will be called when user tap on the backward button
- (void)didTapOnVideoRewind;
/// Delegate method when tapped on next chapter button
/// This method will be called when user tap on the next chapter  button
- (void)didTapOnVideoNextChapter;
/// Delegate method when tapped on previous chapter button
/// This method will be called when user tap on the previous chapter  button
- (void)didTapOnVideoPreviousChapter;
/// Delegate method when update the UISlider position
/// This method will be called when user update the UISlider position
- (void)didVideoSeekBarValueChanged;
/// Delegate method when tapped on video mute button
/// This method will be called when user tap on the video mute  button
- (void)didTapOnVideoMute:(BOOL)isMute;
/// Delegate method when user tap on back button
/// This method will be called when user tap on the back button
- (void)didTapOnVideoBack;
/// Delegate method when user tap on full screen button
/// This method will be called when user tap on the full screen button
- (void)didTapOnVideoFullScreen:(BOOL)isFullScreen;
/// Delegate method when user taps on subtitle button.
/// This method will be called when user taps on subtitle button.
- (void)didTapOnSubtitleView:(BOOL)enabled;
/// Delegate method when user taps on the video more options button.
/// This method will be called when the user taps on the video more options button.
- (void)didTapOnVideoMoreOptions:(UIView * _Nonnull)view;
/// Delegate method when user taps on the video view.
/// This method will be called when the user taps on the video view.
- (void)didTapOnVideoView:(BOOL)enableControls;
@end


/// An object that manages the content of Audio/Video data, This class is only responsible for Audio & Video format file with TOC feature
/// @discussion The HDVideoTOCVO class is responsible for management of a json data such as, videoSeekTime, videoTitle,videoThumbnailURL and videoDescription data .
/// @superclass SuperClass : NSObject
SWIFT_CLASS_NAMED("HDVideoTOCVO")
@interface HDVideoTOCVO : NSObject
@property (nonatomic, copy) NSString * _Nullable videoSeekTime;
@property (nonatomic, copy) NSString * _Nullable videoTitle;
@property (nonatomic, copy) NSString * _Nullable videoThumbnailURL;
@property (nonatomic, copy) NSString * _Nullable videoDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HSModalPopupControllerDelegate;

/// An Object that manage a view For Modal Popup.
/// <ul>
///   <li>
///     The HSModalPopupController class defines a Layout where user can show any view with caption.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22HSModalPopupController")
@interface HSModalPopupController : UIViewController
- (void)viewDidLoad;
@property (nonatomic, weak) id <HSModalPopupControllerDelegate> _Nullable delegate;
/// To set Content View.
/// User can send any view and the view will added to current view with required size.
/// \param view view type Any.
///
- (void)setContentViewWithView:(id _Nonnull)view;
/// To set caption text for element.
/// \param text text type String.
///
- (void)setCaptionTextWithText:(NSString * _Nonnull)text;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("HSModalPopupControllerDelegate")
@protocol HSModalPopupControllerDelegate
- (void)didCloseModalPopupController;
@end

@class NSURLSession;
@protocol ImageDownloadTaskDelegate;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17ImageDownloadTask")
@interface ImageDownloadTask : NSObject
@property (nonatomic, strong) UIImage * _Nullable image;
- (nonnull instancetype)initWithPosition:(NSInteger)position urlString:(NSString * _Nonnull)urlString session:(NSURLSession * _Nonnull)session delegate:(id <ImageDownloadTaskDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (void)resume;
- (void)pause;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK25ImageDownloadTaskDelegate_")
@protocol ImageDownloadTaskDelegate
- (void)imageDownloadedWithPosition:(NSInteger)position;
- (void)imageDownloadingFailedWithError:(NSError * _Nonnull)error;
@end


SWIFT_CLASS_NAMED("InfomationPopOverContentViewController")
@interface InfomationPopOverContentViewController : UIViewController
/// To set Instruction Text View Top constraint.
@property (nonatomic, strong) NSLayoutConstraint * _Nullable instructionTextViewTopConstraint;
- (void)viewDidLoad;
/// The current text that is displayed by the Instruction.
/// <ul>
///   <li>
///     This property is nil by default. Assigning Instruction Description to instruction content view.
///   </li>
/// </ul>
/// \param instruction Text value that will set to Instruction content view.
///
- (void)setInstructionText:(NSString * _Nonnull)instruction;
/// To set Instruction Text Font
/// Assigning Font to Instruction Description.
/// \param font Font That will set to Instruction Text
///
- (void)setInstructionTextFont:(UIFont * _Nonnull)font;
/// The color  which will be set as background color for Instruction text
/// <ul>
///   <li>
///     This property is white by default. Assigning background color  to instruction text view.
///   </li>
/// </ul>
/// \param color Text background color
///
- (void)setInstructionTextBackgroundColor:(UIColor * _Nonnull)color;
- (CGSize)getInstructionTextSize SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)getInstructionTextLineHeight SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface InfomationPopOverContentViewController (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
/// This is used to save linkvo related to information popup
/// \param link KFLinkVO object related to information popup
///
- (void)setLinkVo:(KFLinkVO * _Nonnull)link;
/// This is used to get linkvo related to information popup
- (KFLinkVO * _Nullable)getLinkVo SWIFT_WARN_UNUSED_RESULT;
@end

@protocol Kitaboo3dPlayerViewControllerDelegate;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK29Kitaboo3dPlayerViewController")
@interface Kitaboo3dPlayerViewController : UIViewController <UIGestureRecognizerDelegate, UIScrollViewDelegate, WKNavigationDelegate>
@property (nonatomic, weak) id <Kitaboo3dPlayerViewControllerDelegate> _Nullable delegate;
- (void)initDataWithVideoPath:(NSString * _Nullable)videoPath with:(KFBookVO * _Nullable)bookVO with:(KFLinkVO * _Nullable)linkVO SWIFT_METHOD_FAMILY(none);
- (void)viewDidLoad;
- (void)play;
- (UIView * _Nonnull)getInlineVideoPlayer SWIFT_WARN_UNUSED_RESULT;
- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK37Kitaboo3dPlayerViewControllerDelegate_")
@protocol Kitaboo3dPlayerViewControllerDelegate <NSObject>
@optional
- (void)kitaboo3dPlayerDidClosed;
- (void)kitaboo3dPlayerFullscreenButtonTappedWithIsFullScreen:(BOOL)isFullScreen linkVo:(KFLinkVO * _Nonnull)linkVo;
@end

enum KitabooLogType : int32_t;

SWIFT_PROTOCOL_NAMED("KitabooLogProtocol")
@protocol KitabooLogProtocol
+ (void)logWithType:(enum KitabooLogType)type className:(Class _Nonnull)className message:(NSString * _Nonnull)message verboseMesage:(NSString * _Nonnull)verboseMesage;
@end


SWIFT_CLASS_NAMED("KitabooDebugLog")
@interface KitabooDebugLog : NSObject <KitabooLogProtocol>
+ (void)logWithType:(enum KitabooLogType)type className:(Class _Nonnull)className message:(NSString * _Nonnull)message verboseMesage:(NSString * _Nonnull)verboseMesage;
+ (void)enableLogsWithIsenabled:(BOOL)isenabled;
+ (void)enableVerboseWithIsenabled:(BOOL)isenabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM_NAMED(int32_t, KitabooLogType, "KitabooLogType", open) {
  KitabooLogTypeError = 0,
  KitabooLogTypeInformation = 1,
  KitabooLogTypeWarning = 2,
};


@class NetworkDataTaskOperation;
@class NSHTTPURLResponse;

SWIFT_CLASS_NAMED("KitabooServiceInterface")
@interface KitabooServiceInterface : NSObject
/// To initialize class.
/// <h3>Usage Example:</h3>
/// \code
/// [[KitabooServiceInterface alloc] initWithBaseURLString:@BASE_URL_STRING clientID:@API_CLIENT_ID];
///
/// \endcode\param baseURLString base url of sevice
///
/// \param clientID client id
///
- (nonnull instancetype)initWithBaseURLString:(NSString * _Nonnull)baseURLString clientID:(NSString * _Nonnull)clientID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBaseURLString:(NSString * _Nonnull)baseURLString clientID:(NSString * _Nonnull)clientID isMultisessionEnabled:(BOOL)isMultisessionEnabled OBJC_DESIGNATED_INITIALIZER;
/// For authenticating user credential , use for login purpose.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface authenticateWithUserName:signInUserNameTextField.text password:signInPasswordTextField.text successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userName username to authenticate.
///
/// \param password password to authenticate.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)authenticateWithUserName:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// For authenticating user credential , use for login purpose.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface authenticateGoogleClassRoomUserWithTokenSchema:tokenSchema successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param tokenSchema googleClassRoomTokenSchema to authenticate.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)authenticateGoogleClassRoomUserWithTokenSchema:(NSDictionary<NSString *, id> * _Nonnull)tokenSchema successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// When user token gets expired then to renew/refresh it use this service.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface refreshUserTokenWithToken:_user.userToken successHandler:^(NSDictionary<NSString *,id> * dict)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken userToken to refresh.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)refreshUserTokenWithToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To send user pushnotification token to server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface registerDeviceToken:_user.userToken,apnsToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param apnsToken current users device Token
///
/// \param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)registerDeviceToken:(NSString * _Nonnull)userToken apnsToken:(NSString * _Nonnull)apnsToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To deregister user from pushnotification  to server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface deRegisterDeviceToken:_user.userToken,apnsToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param apnsToken current users device Token
///
/// \param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)deRegisterDeviceToken:(NSString * _Nonnull)userToken apnsToken:(NSString * _Nonnull)apnsToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To get  push notification list for a user from server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiveInterface getNotificationListWithUserToken:_user.userToken userId:_user.userId successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError *error) {
///
/// }
///
/// \endcode\param userId current users id
///
/// \param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)getNotificationListWithUserToken:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To delete all  push notifications for a user from server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiveInterface deleteNotificationListWithUserToken:_user.userToken userId:_user.userId successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userId current users id
///
/// \param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)deleteNotificationListWithUserToken:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To mark notifications as read  from server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiveInterface markReadNotificationListWithUserToken:@"" userId:@"" messageIds:@[@""] markAll:false successHandler:^(NSDictionary *dic)
/// {
/// NSLog(@"%@",dic);
/// } failureHandler:^(NSError *error)
/// {
/// NSLog(@"error %@",error);
///
/// }];
///
/// \endcode\param userId current users id
///
/// \param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)markReadNotificationListWithUserToken:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId messageIds:(NSArray<NSString *> * _Nonnull)messageIds markAll:(BOOL)markAll successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)getUserInfo:(NSString * _Nonnull)userToken currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// This service is used, when user token gets expired and user wants to get NetworkDataTaskOperation to renew the expired token.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface renewUserTokenWithToken:_user.userToken successHandler:^(NSDictionary<NSString *,id> * dict)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken userToken to refresh.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)renewUserTokenWithToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To Fetch UGC for a book from given timestamp.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchUGCOperation:userToken bookId:[NSString stringWithFormat:@"%ld",[bookID integerValue]] timestamp:[dbManager getLastSyncedDateForBookID:bookID ForUserID:userID] successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookId Id of book for which UGC has to fetch
///
/// \param timestamp to fetch ugc from given time
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchUGCOperation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timestamp:(NSString * _Nonnull)timestamp bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Fetch UGC for a book from given timestamp.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchUGC:userToken bookId:[NSString stringWithFormat:@"%ld",[bookID integerValue]] timestamp:[dbManager getLastSyncedDateForBookID:bookID ForUserID:userID] successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookId Id of book for which UGC has to fetch
///
/// \param timestamp to fetch ugc from given time
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchUGC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timestamp:(NSString * _Nonnull)timestamp bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Save UGC for a book.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveUGCData:userToken bookId:@"" ugcData:data successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookId Id of book for which UGC has to save
///
/// \param ugcData ugcData which has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveUGCData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId ugcData:(NSData * _Nonnull)ugcData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To get kaltura video url for playing kaltura video use this service.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface getKalturaSessionURL:_user.userToken entryID:linkVo.url type:TYPE_KALTURA successHandler:^(NSDictionary *dict)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param entryID url of link
///
/// \param type as of now we are passing 1
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)getKalturaSessionURL:(NSString * _Nonnull)userToken entryID:(NSString * _Nonnull)entryID type:(NSInteger)type successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Save UGC for a book.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveUGCData:userToken bookId:@"" ugcData:data successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookId Id of book for which UGC has to save
///
/// \param ugcData ugcData which has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveUGCDataOperation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId ugcData:(NSData * _Nonnull)ugcData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Save UGC for a book with Meta Data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveUGCDataOperation:userToken bookId:@"" ugcData:data metaDataObject:metaData successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookId Id of book for which UGC has to save
///
/// \param ugcData ugcData which has to save
///
/// \param metaData Meta Data
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveUGCDataOperation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId ugcData:(NSData * _Nonnull)ugcData metaDataObject:(KitabooServiceMetaData * _Nullable)metaData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save shared data with meta Data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveColllabData:userToken collabData:unsynedCollabUGCdata bookId:[bookID stringValue] metaDataObject:metaData successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param collabData shared data which has to save
///
/// \param bookId Id of book for which data has to save
///
/// \param metaData Meta Data
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveColllabData:(NSString * _Nonnull)userToken collabData:(NSData * _Nonnull)collabData bookId:(NSString * _Nonnull)bookId metaDataObject:(KitabooServiceMetaData * _Nullable)metaData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save shared data with meta Data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveColllabDataForPagination:userToken collabData:unsynedCollabUGCdata bookId:[bookID stringValue] metaDataObject:metaData successHandler:^(NSDictionary<NSString *,id> * json, NSData *successedcollabData) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param collabData shared data which has to save
///
/// \param bookId Id of book for which data has to save
///
/// \param metaData Meta Data
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveColllabDataForPagination:(NSString * _Nonnull)userToken collabData:(NSData * _Nonnull)collabData bookId:(NSString * _Nonnull)bookId metaDataObject:(KitabooServiceMetaData * _Nullable)metaData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSData * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Validate access code.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface validateAccessCode:@"1234" successHandler:^(NSDictionary *json){
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param accessCode access code to validate.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)validateAccessCodeWith_userToken:(NSString * _Nonnull)_userToken withAccessCode:(NSString * _Nonnull)accessCode successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To Change password of user.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface changePasswordForUserWith:userToken username:@"abc@gmail.com" password:@"abc" toNewPassword:@"def" newPassword:@"def" successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param username username of user for which password has to change
///
/// \param password password of user which has to change
///
/// \param toNewPassword toNewPassword which has to set
///
/// \param newPassword newPassword which has to set
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)changePasswordForUserWith:(NSString * _Nonnull)userToken username:(NSString * _Nonnull)username password:(NSString * _Nonnull)password toNewPassword:(NSString * _Nonnull)newPassword successHandler:(void (^ _Nonnull)(void))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To reset password of user.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface resetPasswordWithUsername:@"abc@gmail.com" successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param username username of user for which password has to reset
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)resetPasswordWithUsername:(NSString * _Nonnull)username successHandler:(void (^ _Nonnull)(void))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nullable))failureHandler;
/// To fetch book class information(for example how many teachers or students assigned for class).
/// <h3>Usage Example:</h3>
/// \code
/// [[kitabooServiceInterface fetchBookClassInfo:userToken bookIds:(@[[NSString stringWithFormat:@"%@",bookID]]) successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookIds id of book for which class information has to fetch
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchBookClassInfo:(NSString * _Nonnull)userToken bookIds:(NSArray<NSString *> * _Nonnull)bookIds successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To download all books.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param state state offline/online
///
/// \param bookList List of books of which download url is needed
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)downloadAllBooks:(NSString * _Nonnull)userToken withState:(NSString * _Nonnull)state withBookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To delete all books.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param bookList List of books of which download url is needed
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)deleteAllBooks:(NSString * _Nonnull)userToken withBookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To save Session history.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param SessionHistory List of books id and time stamp
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveSessionHistory:(NSString * _Nonnull)userToken withSessionHistory:(NSDictionary<NSString *, NSArray<NSDictionary<NSString *, id> *> *> * _Nonnull)SessionHistory successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSDictionary<NSString *, NSArray<NSDictionary<NSString *, id> *> *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To get updated list of books being assigned to the user, if user do not send time stamp then currnet time is taken by default.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param bookIdAndTypeDict Dictionary of bookIds and type(UPDATE,NEW,DELETE). If not sent then all three will be return
///
/// \param timeStamp time from which user needs to fetch books that has been added
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)refreshBookList:(NSString * _Nonnull)userToken withBookIdAndType:(NSDictionary<NSString *, id> * _Nonnull)bookIdAndTypeDict withTimeStamp:(NSString * _Nullable)timeStamp successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To mark book as favourite.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param book bookid which needs to be marked as favourite
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)markFavourite:(NSString * _Nonnull)userToken withFavouriteBook:(NSDictionary<NSString *, id> * _Nonnull)book successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To unmark book as favourite.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param book bookid which needs to be unmarked as favourite
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)unmarkFavourite:(NSString * _Nonnull)userToken withFavouriteBook:(NSString * _Nonnull)book successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch favourite books.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchFavourite:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch booklist for user.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchBookList:_user.userToken successHandler:^(NSDictionary *jsonDic)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchBookList:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch book list for category .
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchBookListForCategory:_user.userToken withCategoryName:@"abc" withStartIndex:nil withEndIndex:nil successHandler:^(NSDictionary * jsonDic) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param categoryName category name for which book list has to fetch
///
/// \param startIndex Index from which booklist has to start(optional)
///
/// \param endIndex Index on which booklist has to end(optional)
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchBookListForCategory:(NSString * _Nonnull)userToken withCategoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId withStartIndex:(NSNumber * _Nullable)startIndex withEndIndex:(NSNumber * _Nullable)endIndex successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch category list.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchCategoryList:_user.userToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchCategoryList:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch books of collection present in category.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchBooksForCollection:_user.userToken withCategoryName:@"abc" withCollectionName:@"ab" withStartIndex:nil withEndIndex:nil successHandler:^(NSDictionary * jsonDic) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param categoryName category name which has collection of books
///
/// \param collectionName collection name for which book list has to fetch
///
/// \param startIndex Index from which booklist has to start(optional)
///
/// \param endIndex Index on which booklist has to end(optional)
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchBooksForCollection:(NSString * _Nonnull)userToken withCategoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId withCollectionName:(NSString * _Nonnull)collectionName withStartIndex:(NSNumber * _Nullable)startIndex withEndIndex:(NSNumber * _Nullable)endIndex successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch recently viewed books.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchRecentlyViewedBooks:_user.userToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the responsere
///
- (NetworkDataTaskOperation * _Nonnull)fetchRecentlyViewedBooks:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch user settings.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchUserSettings:[json objectForKey:@"userToken"] successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)fetchUserSettings:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To fetch shared data and list of users with whom data has been shared.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchCollabShare:userToken bookId:[NSString stringWithFormat:@"%@",bookID] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which data has to fetch
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchCollabShare:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch shared data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchCollabUGC:userToken bookId:[NSString stringWithFormat:@"%@",bookID] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which data has to fetch
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchCollabUGC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch shared data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchCollabUGC:userToken bookId:[NSString stringWithFormat:@"%@",bookID] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which data has to fetch
///
/// \param timestamp to fetch ugc from given time
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchCollabUGC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timestamp:(NSString * _Nonnull)timestamp bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch teacher annotations.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchTeacherAnnotations:_user.userToken bookId:@"101" successHandler:^(NSDictionary * jsonDic) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which teacher annotation has to fetch
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchTeacherAnnotations:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch student annotations.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchStudentAnnotations:_user.userToken bookId:@"101" learnerId:@"111" successHandler:^(NSDictionary * jsonDic) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which student annotation has to fetch
///
/// \param learnerId learner id of student
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchStudentAnnotations:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId learnerId:(NSString * _Nonnull)learnerId bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To save shared data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveColllabData:userToken collabData:unsynedCollabUGCdata bookId:[bookID stringValue] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param collabData shared data which has to save
///
/// \param bookId Id of book for which data has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveColllabData:(NSString * _Nonnull)userToken collabData:(NSData * _Nonnull)collabData bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save highlights .
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveHighlightData:userToken highlightData:data bookId:[bookID stringValue] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param highlightData highlight data which has to save
///
/// \param bookId Id of book for which data has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)saveHighlightData:(NSString * _Nonnull)userToken highlightData:(NSData * _Nonnull)highlightData bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// The data which is needed to be tracked (for a instance opening note , deleting note etc.), should be tracked with this service.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveTrackingData:userToken bookId:[bookID stringValue] analyticsData:data successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which data has to save
///
/// \param analyticsData analytics data which has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveTrackingData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId analyticsData:(NSData * _Nonnull)analyticsData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To fetch Analytics Data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface getAnalyticsData:userToken bookId:[bookID stringValue] classId:classId] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which data has to be fetched
///
/// \param classId Id of class for which data has to be fetched
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)getAnalyticsData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId classId:(NSNumber * _Nonnull)classId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch search response for word.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface elasticSearch:userToken searchData:jsonBodyData successHandler:^(NSDictionary *dict) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param searchData the data on which search action needs to be performed
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)elasticSearch:(NSString * _Nonnull)userToken searchData:(NSData * _Nonnull)searchData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To chnage user information such as name,profile photo,cover photo use this service.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface updateUserDetailsWith:_user.userToken profilePhotoData:profileData coverPhotoData:coverData firstName:@"abc" lastName:@"def" successHandler:^{
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param profilePhotoData profile photo data to update
///
/// \param coverPhotoData cover photo data to update
///
/// \param firstName first name to update
///
/// \param lastName last name to update
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)updateUserDetailsWith:(NSString * _Nonnull)userToken profilePhotoData:(NSData * _Nonnull)profilePhotoData coverPhotoData:(NSData * _Nonnull)coverPhotoData firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName successHandler:(void (^ _Nonnull)(void))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save accepted or rejected shared data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface acceptRejectCollab:userToken collabData:data successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param collabData shared data which has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)acceptRejectCollab:(NSString * _Nonnull)userToken collabData:(NSData * _Nonnull)collabData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To download book url.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface downloadBookURLWith:userToken bookId:bookID formatType:bookInfo.formatName successHandler:^(NSDictionary *dic){
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book which is to download
///
/// \param formatType As of now for all books we pass ‘IPAD’
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)downloadBookURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)downloadMediaBookURLWith:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSHTTPURLResponse * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)downloadBookOnlineURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType timeStamp:(int64_t)timeStamp successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)authenticateHLSPackageWith:(int64_t)packageId baseURL:(NSString * _Nonnull)baseURL userToken:(NSString * _Nonnull)userToken timeStamp:(int64_t)timeStamp successHandler:(void (^ _Nonnull)(NSHTTPURLResponse * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To delete book url, when book is deleted from local storage then to mark it as deleted we use this.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface releaseBookURLWith:userToken bookId:cell.bookID formatType:bookInfo.formatName successHandler:^(NSDictionary *dic){
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book which is to download
///
/// \param formatType As of now for all books we pass ‘IPAD’
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)releaseBookURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// When book is downloaded then to mark it as consumed use this.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiveInterface consumeBookURLWith:userToken bookId:[[path lastPathComponent] integerValue] formatType:bookInfo.formatName successHandler:^(NSDictionary *dic){
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book which is to download
///
/// \param formatType As of now for all books we pass ‘IPAD’
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)consumeBookURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save teacher annotations for a student.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveTeacherAnnotation:userToken annotation:data bookId:[NSString stringWithFormat:@"%d",bookId.intValue] learnerId:learnerId successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param annotation annotation which has to save
///
/// \param bookId Id of book for which annotation has to save
///
/// \param learnerId learner id of student
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveTeacherAnnotation:(NSString * _Nonnull)userToken annotation:(NSData * _Nonnull)annotation bookId:(NSString * _Nonnull)bookId learnerId:(NSString * _Nonnull)learnerId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save student annotations(such as pentool,FIB).
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface submitAnotation:userToken bookId:[NSString stringWithFormat:@"%ld",[bookID integerValue]] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which annotation has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)submitAnotation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save SCORM data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveSCORMData:userToken bookId:[NSString stringWithFormat:@"%@",bookID] scormData:data  successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which SCORM data has to save
///
/// \param scormData scormData which has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveSCORMData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId scormData:(NSData * _Nonnull)scormData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To fetch SCORM data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchScromData:userToken classID:classId bookId:[NSString stringWithFormat:@"%@",bookID] successHandler:^(NSDictionary *json)  {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param classID Id of class
///
/// \param bookId Id of book for which SCORM data has to fetch
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchScromData:(NSString * _Nonnull)userToken classID:(NSString * _Nonnull)classID bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)getBookDetails:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)getBookDetailsWithID:(NSString * _Nonnull)bookId userToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)forceUpdate:(NSString * _Nonnull)appVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)packageURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)fetchReadingSpeedInformation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)fetchLastPageAccessed:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)saveLastPageAccessed:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId lastPageData:(NSString * _Nonnull)lastPageData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)fetchFurthestPage:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)saveFurthestPageData:(NSString * _Nonnull)userToken furthestPageData:(NSData * _Nonnull)furthestPageData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)fetchBookListForCategorySecured:(NSString * _Nonnull)userToken withCategoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId withStartIndex:(NSNumber * _Nullable)startIndex withEndIndex:(NSNumber * _Nullable)endIndex currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)fetchBooksForCollectionSecured:(NSString * _Nonnull)userToken withCategoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId withCollectionName:(NSString * _Nonnull)collectionName withStartIndex:(NSNumber * _Nullable)startIndex withEndIndex:(NSNumber * _Nullable)endIndex currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)getBookDetailsSecured:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)fetchRecentlyViewedBooksSecured:(NSString * _Nonnull)userToken currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch favourite books.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchFavouriteSecured:(NSString * _Nonnull)userToken currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To get updated list of books being assigned to the user, if user do not send time stamp then currnet time is taken by default.
/// <h3>Usage Example:</h3>
/// \code
///
/// \endcode\param userToken current users userToken
///
/// \param bookIdAndTypeDict Dictionary of bookIds and type(UPDATE,NEW,DELETE). If not sent then all three will be return
///
/// \param timeStamp time from which user needs to fetch books that has been added
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)refreshBookListSecured:(NSString * _Nonnull)userToken withBookIdAndType:(NSDictionary<NSString *, id> * _Nonnull)bookIdAndTypeDict withTimeStamp:(NSString * _Nullable)timeStamp currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)refreshCategoryListSecured:(NSString * _Nonnull)userToken categoryIdList:(NSDictionary<NSString *, id> * _Nonnull)categoryIdList currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To download all books.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param state state offline/online
///
/// \param bookList List of books of which download url is needed
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)downloadAllBooksSecured:(NSString * _Nonnull)userToken withState:(NSString * _Nonnull)state withBookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch book list for category .
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchBookListForCategoryV1:_user.userToken withCategoryName:@"abc" successHandler:^(NSDictionary * jsonDic) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param categoryName category name for which book list has to fetch
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchBookListForCategoryV1:(NSString * _Nonnull)userToken withCategoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId withStartIndex:(NSNumber * _Nullable)startIndex withEndIndex:(NSNumber * _Nullable)endIndex successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch category list.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchCategoryListV1:_user.userToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchCategoryListV1:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (void)fetchPrefferedLanguage:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)savePrefferedLanguage:(NSString * _Nonnull)userToken languauge:(NSString * _Nonnull)languauge successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)fetchBookTOC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)fetchStudentMarkupReport:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId classId:(NSString * _Nonnull)classId chapters:(NSString * _Nonnull)chapters emailID:(NSString * _Nonnull)emailID userIds:(NSString * _Nonnull)userIds successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To get screenshot count from server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface getScreenshotCount:_user.userToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)getScreenshotCountWithUserToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To update screenshot count from server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface updateScreenshotCount:_user.userToken,screenshotCount successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param screenshotCount screenshot count to update on server
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)updateScreenshotCountWithUserToken:(NSString * _Nonnull)userToken screenshotCount:(NSInteger)screenshotCount successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To   get list of all active sessions..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchAllDeviceSession:_user.userToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)fetchAllDeviceSessionWithUserToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To   get delete session..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface deleteSession:_user.userToken, uuId:uuid, successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param uuId uuId of the session to be deleted
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)deleteSessionWithUserToken:(NSString * _Nonnull)userToken uuId:(NSString * _Nonnull)uuId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To   get delete all sessions.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface deleteAllSession:_user.userToken, successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)deleteAllSessionWithUserToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)refreshUserTokenWithDate:(NSString * _Nonnull)userToken currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To fetch user partner details.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchUserPartnerDetailsWithUserToken: userToken startIndex: startIndex endIndex: endIndex successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current user userToken
///
/// \param startIndex Index from which booklist has to start
///
/// \param endIndex Index on which booklist has to end
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)fetchUserPartnerDetailsWithUserToken:(NSString * _Nonnull)userToken startIndex:(NSString * _Nonnull)startIndex endIndex:(NSString * _Nonnull)endIndex successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To switch partner.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface switchPartner: userToken partnerReferenceId: partnerReferenceId successHandler: ^(NSDictionary *json)
/// {
///
/// } failureHandler: ^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current user userToken
///
/// \param partnerReferenceId partner reference Id for which the books has to be fetched
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)switchPartnerWithUserToken:(NSString * _Nonnull)userToken partnerReferenceId:(NSString * _Nonnull)partnerReferenceId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To switch partner.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface getImmersiveReaderToken: userToken successHandler: ^(NSDictionary *json)
/// {
///
/// } failureHandler: ^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current user userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)getImmersiveReaderTokenWithUserToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An Object that will be contains additional infromation to hit a service e.g. initialisedValue or actionType.
SWIFT_CLASS_NAMED("KitabooServiceMetaData")
@interface KitabooServiceMetaData : NSObject
/// A Value from where service is being Initialised.E.g.Reader or Bookshelf etc.
/// <h3>Usage Example:</h3>
/// \code
/// kitabooServiceMetaData.initialisedValue = "A";
///
/// \endcode
@property (nonatomic, copy) NSString * _Nonnull initialisedValue;
/// A Value which will represent the service action type. E.g. Send or Resend.
/// <h3>Usage Example:</h3>
/// \code
/// kitabooServiceMetaData.actionType = "S";
///
/// \endcode
@property (nonatomic, copy) NSString * _Nonnull actionType;
/// To initialize KitabooServiceMetaData class.
/// <h3>Usage Example:</h3>
/// \code
/// let kitabooServiceMetaData = KitabooServiceMetaData();
///
/// \endcode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// KitabooUser is responsible for storing user information.
/// <ul>
///   <li>
///     KitabooUser defines all the parameters/atrributes which are required to store user information(Ex- emailID, name, id, profile pic etc..).
///   </li>
///   <li>
///     SuperClass : NSObject
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("KitabooUser")
@interface KitabooUser : NSObject
@property (nonatomic, copy) NSString * _Nullable clientID;
@property (nonatomic, copy) NSString * _Nullable coverPhotoURL;
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable level;
@property (nonatomic, copy) NSString * _Nullable profilePicURL;
@property (nonatomic, copy) NSArray * _Nullable roles;
@property (nonatomic, copy) NSString * _Nullable userID;
@property (nonatomic, copy) NSString * _Nullable userToken;
@property (nonatomic, copy) NSString * _Nullable role;
@property (nonatomic, copy) NSString * _Nullable userName;
@property (nonatomic, copy) NSString * _Nullable userLoggedInTime;
@property (nonatomic, copy) NSString * _Nullable serverUserID;
@property (nonatomic, copy) NSString * _Nullable partnerReferenceId;
/// Initiate KitabooUser with userInfo, userToken and role.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooUser initWithUserInfo :[json objectForKey:@"user"] userToken:[json objectForKey:@"userToken"] role:[json objectForKey:@"role"]];
///
/// \endcode\param userInfo Is the dictionary value which contains user information.
///
/// \param userToken Is string value which is received from server.
///
/// \param role Is string value which specify role of user (teacher/student).
///
- (nonnull instancetype)initWithUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo userToken:(NSString * _Nonnull)userToken role:(NSString * _Nonnull)role OBJC_DESIGNATED_INITIALIZER;
/// Initiate KitabooUser with userInfo and userToken.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooUser initWithUserInfo :[json objectForKey:@"user"] userToken:[json objectForKey:@"userToken"]];
///
/// \endcode\param userInfo Is the dictionary value which contains user information.
///
/// \param userToken Is string value which is received from server.
///
- (nonnull instancetype)initWithUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo userToken:(NSString * _Nonnull)userToken OBJC_DESIGNATED_INITIALIZER;
/// Initiate KitabooUser with userInfo and userToken.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooUser initWithUserInfo :[json objectForKey:@"user"] userToken:[json objectForKey:@"userToken"] userLoggedInTime:[json objectForKey:@"timestamp"]];
///
/// \endcode\param userInfo Is the dictionary value which contains user information.
///
/// \param userToken Is string value which is received from server.
///
/// \param loggedInTime Is string value which is user login time received from server.
///
- (nonnull instancetype)initWithUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo userToken:(NSString * _Nonnull)userToken userLoggedInTime:(NSString * _Nullable)loggedInTime OBJC_DESIGNATED_INITIALIZER;
/// Initiate KitabooUser with userInfo, userToken and userID.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooUser initWithuUerId:@"123456" UserInfo :[json objectForKey:@"user"] userToken:[json objectForKey:@"userToken"]];
///
/// \endcode\param userId User id of the user
///
/// \param userInfo Is the dictionary value which contains user information.
///
/// \param userToken Is string value which is received from server.
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo userToken:(NSString * _Nonnull)userToken OBJC_DESIGNATED_INITIALIZER;
/// Initiate KitabooUser with userInfo, userToken and userID.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooUser initWithuUerId:@"123456" UserInfo :[json objectForKey:@"user"] userToken:[json objectForKey:@"userToken"] userLoggedInTime:[json objectForKey:@"timestamp"]];
///
/// \endcode\param userId User id of the user
///
/// \param userInfo Is the dictionary value which contains user information.
///
/// \param userToken Is string value which is received from server.
///
/// \param loggedInTime Is string value of user login time which is received from server.
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo userToken:(NSString * _Nonnull)userToken userLoggedInTime:(NSString * _Nullable)loggedInTime OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUserToken:(NSString * _Nonnull)userToken userID:(NSString * _Nonnull)userID firstName:(NSString * _Nonnull)firstName lastName:(NSString * _Nonnull)lastName email:(NSString * _Nonnull)email OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol LinkDropDownViewControllerDelegate;

/// An object that manages the content for links in Dropdown.
/// A LinkDropDownViewController object manages the content of the link in the dropdown list and allows the selection of items from the dropdown list.
SWIFT_CLASS_NAMED("LinkDropDownViewController")
@interface LinkDropDownViewController : UIViewController <UIGestureRecognizerDelegate>
/// The object that acts as the delegate of the LinkDropDownViewController.
/// The delegate must adopt the LinkDropDownViewControllerDelegate protocol. The delegate is not retained.
@property (nonatomic, strong) id <LinkDropDownViewControllerDelegate> _Nullable delegate;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// Initializes an allocated LinkDropDownViewController object with DropDown Items and a DropDown.
/// \param dropDownItemsArray DropDown Items
///
/// \param dropDown Selected DropDown
///
- (nonnull instancetype)initWithDropDownData:(NSArray<NSString *> * _Nonnull)dropDownItemsArray withDropDown:(UIButton * _Nonnull)dropDown OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface LinkDropDownViewController (SWIFT_EXTENSION(Kitaboo_Reader_SDK)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// Methods for managing selection, close actions in a DropDown.
SWIFT_PROTOCOL_NAMED("LinkDropDownViewControllerDelegate")
@protocol LinkDropDownViewControllerDelegate
/// Tells the delegate that the specified DropDown item is now selected.
/// The delegate handles selections in this method. One of the things it can do is save the selected DropDown Text.  This method will be called when the DropDown Item is Select..
/// \param selectedText Selected DropDown Item Text.
///
/// \param dropDown Selected DropDown
///
- (void)didSelectDropDownItemWithText:(NSString * _Nonnull)selectedText forDropDown:(UIButton * _Nonnull)dropDown;
/// Tells the delegate that the specified DropDown needs to be closed.
/// Use this method to detect when a DropDown is need to removed.
- (void)didSelectActionToCloseDropDown;
@end


SWIFT_CLASS_NAMED("LocalizationHelper")
@interface LocalizationHelper : NSObject
/// Used to set the bundle for string localization.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nullable readerLanguageBundle;)
+ (NSBundle * _Nullable)readerLanguageBundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setReaderLanguageBundle:(NSBundle * _Nullable)value;
/// This method should be called to localize the string
/// <h3>Usage Example:</h3>
/// \code
/// [LocalizationHelper localizedStringWithKey:@"A"];
///
///
/// \endcode\param key The key value of the localized string.
///
+ (NSString * _Nonnull)localizedStringWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)localizedStringWithKey:(NSString * _Nonnull)key tableName:(NSString * _Nonnull)tableName bundle:(NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// An Object to get TOC controller section type whether it is CHAPTER, TRANSCRIPT or BOOKMARK.
typedef SWIFT_ENUM(NSInteger, MediaBookTOCFilter, open) {
  MediaBookTOCFilterCHAPTER = 0,
  MediaBookTOCFilterTRANSCRIPT = 1,
  MediaBookTOCFilterBOOKMARK = 2,
};





SWIFT_CLASS_NAMED("Operation")
@interface Operation : NSOperation
@property (nonatomic, getter=isExecuting) BOOL executing;
@property (nonatomic, getter=isFinished) BOOL finished;
- (void)start;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("NetworkDataTaskOperation")
@interface NetworkDataTaskOperation : Operation <NSURLSessionDataDelegate>
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NetworkDataTaskOperation (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
+ (NetworkDataTaskOperation * _Nonnull)requestOperation:(NSURLRequest * _Nonnull)request withSession:(NSURLSession * _Nonnull)session andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface NetworkDataTaskOperation (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
+ (NetworkDataTaskOperation * _Nonnull)sendRequest:(NSURLRequest * _Nonnull)request withSession:(NSURLSession * _Nonnull)session andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)sendRequest:(NSURLRequest * _Nonnull)request withCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)sendRequestWithURL:(NSURL * _Nonnull)url withSession:(NSURLSession * _Nonnull)session andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)sendRequestWithURL:(NSURL * _Nonnull)url andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface NetworkDataTaskOperation (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
+ (NetworkDataTaskOperation * _Nonnull)operationWithRequest:(NSURLRequest * _Nonnull)request withSession:(NSURLSession * _Nonnull)session andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)operationWithRequest:(NSURLRequest * _Nonnull)request andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)operationWithURL:(NSURL * _Nonnull)url withSession:(NSURLSession * _Nonnull)session andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)operationWithURL:(NSURL * _Nonnull)url andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface NetworkDataTaskOperation (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)responseData:(void (^ _Nonnull)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler;
- (void)responseJSON:(NSJSONReadingOptions)options completionHandler:(void (^ _Nonnull)(NetworkDataTaskOperation * _Nullable, NSHTTPURLResponse * _Nullable, id _Nullable, NSError * _Nullable))completionHandler;
- (void)responseJSONWithResponseString:(NSJSONReadingOptions)options completionHandler:(void (^ _Nonnull)(NetworkDataTaskOperation * _Nullable, NSHTTPURLResponse * _Nullable, id _Nullable, NSError * _Nullable, NSString * _Nullable))completionHandler;
@end


SWIFT_CLASS_NAMED("NetworkDownloadTaskOperation")
@interface NetworkDownloadTaskOperation : NetworkDataTaskOperation <NSURLSessionDownloadDelegate>
- (void)cancel;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes;
@end



SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK25NumberLocalizationHandler")
@interface NumberLocalizationHandler : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull languageCode;)
+ (NSString * _Nonnull)languageCode SWIFT_WARN_UNUSED_RESULT;
+ (void)setLanguageCode:(NSString * _Nonnull)value;
+ (void)setLanguageCodeForNumberLocalizationWithCodeWithCode:(NSString * _Nonnull)code;
/// To localize number in system language
/// <h3>Usage Example:</h3>
/// \code
/// [NumberLocalizationHandler localizeNumber:"10"];
///
/// \endcode\param number number to be localized
///
+ (NSString * _Nonnull)localizeNumberWithNumber:(id _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
/// To localize number in system language
/// <h3>Usage Example:</h3>
/// \code
/// [NumberLocalizationHandler localizeNumber:"10"];
///
/// \endcode\param number number to be localized
///
/// \param fractionalPoints how many digits needed after decimal point. default is 2
///
+ (NSString * _Nonnull)localizeNumberWithNumber:(id _Nonnull)number fractionalPoints:(NSInteger)fractionalPoints SWIFT_WARN_UNUSED_RESULT;
/// To localize time in system language
/// <h3>Usage Example:</h3>
/// \code
/// [NumberLocalizationHandler localizeTime:"10:10"];
///
/// \endcode\param time time/date to be localized
///
+ (NSString * _Nonnull)localizeTimeWithTime:(NSString * _Nonnull)time SWIFT_WARN_UNUSED_RESULT;
/// To localize time in system language
/// <h3>Usage Example:</h3>
/// \code
/// [NumberLocalizationHandler localizeTime:"10:10"];
///
/// \endcode\param time time/date to be localized
///
/// \param format In which format passed time is hh:mm:ss. If you don’t pass default format is mm:ss
///
+ (NSString * _Nonnull)localizeTimeWithTime:(NSString * _Nonnull)time format:(NSString * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
/// To localize number in system language
/// <h3>Usage Example:</h3>
/// \code
/// [NumberLocalizationHandler localizeNumber:"10"];
///
/// \endcode\param number number to be localized
///
+ (NSString * _Nonnull)localizeNumberWithoutFormatWithNumber:(id _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol PrintPageViewDelegate;

/// A control that executes Print page controller code in response to user interactions.
SWIFT_CLASS_NAMED("PrintPageButton")
@interface PrintPageButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// The object that acts as the delegate of the PrintPageButton.
/// The delegate must adopt the PrintPageViewDelegate protocol. The delegate is not retained.
@property (nonatomic, strong) id <PrintPageViewDelegate> _Nullable delegate;
/// An unique page Identifier.
@property (nonatomic, strong) NSNumber * _Nullable pageNumber;
@end

@protocol PrintPageViewControllerDelegate;
@class UIViewPrintFormatter;
@class UIPrintInteractionController;
@class UIPrintPaper;

/// An object that manages printing user interface.
/// The shared instance of it represents a print job, printing page status.
/// Responding to user interactions with Print Controller.
SWIFT_CLASS_NAMED("PrintPageViewController")
@interface PrintPageViewController : UIViewController <UIPrintInteractionControllerDelegate>
/// The object that acts as the delegate of the PrintPageViewController.
/// The delegate must adopt the PrintPageViewControllerDelegate protocol.
@property (nonatomic, strong) id <PrintPageViewControllerDelegate> _Nullable delegate;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
/// Initializes an allocated PrintPageViewController object with Print Image.
/// \param printImage printImage of Type UIImage for print.
///
- (nonnull instancetype)initWithPrintImage:(UIImage * _Nonnull)printImage;
- (nonnull instancetype)initWithPrintFormatter:(UIViewPrintFormatter * _Nonnull)printFormatter;
- (nonnull instancetype)initWithPrintPage:(id _Nonnull)printPageData;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)printInteractionControllerDidDismissPrinterOptions:(UIPrintInteractionController * _Nonnull)printInteractionController;
- (void)printInteractionControllerDidFinishJob:(UIPrintInteractionController * _Nonnull)printInteractionController;
- (void)printInteractionControllerWillStartJob:(UIPrintInteractionController * _Nonnull)printInteractionController;
- (UIPrintPaper * _Nonnull)printInteractionController:(UIPrintInteractionController * _Nonnull)printInteractionController choosePaper:(NSArray<UIPrintPaper *> * _Nonnull)paperList SWIFT_WARN_UNUSED_RESULT;
@end


/// The delegate of a PrintPageViewController object must adopt the PrintPageViewControllerDelegate protocol.
/// PrintPageViewControllerDelegate Protocol used to handle all the callbacks of PrintPageViewController Class.The PrintPageViewControllerDelegate protocol defines a method that allow user to manage print task.
/// When configuring the PrintPageViewController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL_NAMED("PrintPageViewControllerDelegate")
@protocol PrintPageViewControllerDelegate
/// Tells the delegate that the PrintPageViewController is being dismissed.
/// This callback will be initialised when the user taps Print on the printing-options view or when the user dismisses the view by tapping outside it.
- (void)printPageViewControllerDidDismiss;
/// Tells the delegate that the PrintPageViewController has finished its Task .
- (void)PrintPageViewControllerDidFinishJob;
/// Tells the delegate that the device does not support printing.
- (void)deviceNotSupportsPagePrinting;
/// Tells the delegate that the Page Printed Successfully.
- (void)didPagePrintedSuccessFully;
/// Tells the delegate that the Page Printing Task failed with error.
/// \param error Instance of Error.
///
- (void)didPagePrintingFailedWithError:(NSError * _Nullable)error;
@end


/// The delegate of a PrintPageButton object must adopt the PrintPageViewDelegate protocol.
/// PrintPageViewDelegate Protocol used to handle all the callbacks of PrintPageButton Class.The PrintPageViewDelegate protocol defines a method that allows the user to manage interactions.
/// When configuring the PrintPageButton object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL_NAMED("PrintPageViewDelegate")
@protocol PrintPageViewDelegate
/// Tells the delegate that the specified Print Button is now Tapped.
/// \param pageNumber Selected Print Button Page Number.
///
- (void)didTapOnPrintPageWithPageNumber:(NSNumber * _Nullable)pageNumber;
@end


/// A control that use to handle Protractor selection.
/// When User selects any  button that has focus, the button performs any actions attached to it.
SWIFT_CLASS_NAMED("ProtractorSelectionButton")
@interface ProtractorSelectionButton : UIButton
/// An universally unique value that can be used to identify a selected Protractor.
@property (nonatomic, copy) NSString * _Nullable penToolUUID;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK37RTLorLTRFlowLayoutForUICollectionView")
@interface RTLorLTRFlowLayoutForUICollectionView : UICollectionViewFlowLayout
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL flipsHorizontallyInOppositeLayoutDirection;
@end


SWIFT_CLASS_NAMED("ReflowableCustomSlider")
@interface ReflowableCustomSlider : UISlider
- (CGRect)trackRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(int32_t, SDKError, "SDKError", open) {
  SDKErrorKSDKErrorImageLoadingFailed = 0,
  SDKErrorKSDKErrorBookLoadingFailed = 1,
  SDKErrorKSDKErrorFontFileLoadingFailed = 2,
};

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18SDKHLSDownloadInfo")
@interface SDKHLSDownloadInfo : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface SDKHLSDownloadInfo (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
@property (nonatomic, copy) NSData * _Nullable assetDownloadedData;
@property (nonatomic, strong) NSNumber * _Nullable assetDownloadingBitrate;
@property (nonatomic, copy) NSData * _Nullable assetEncKeyData;
@property (nonatomic, copy) NSString * _Nullable assetM3U8Name;
@property (nonatomic, copy) NSString * _Nullable assetM3U8Path;
@property (nonatomic, copy) NSString * _Nullable bookId;
@property (nonatomic, strong) NSObject * _Nullable cookies;
@property (nonatomic, strong) NSNumber * _Nullable isDownloaded;
@property (nonatomic, strong) NSNumber * _Nullable totalAssets;
@end


SWIFT_CLASS_NAMED("SDKUtility")
@interface SDKUtility : NSObject
+ (NSString * _Nonnull)getSDKDomain SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, SleepAction, open) {
  SleepActionKSleepActionNone = 0,
  SleepActionKSleepAction15Min = 1,
  SleepActionKSleepAction30Min = 2,
  SleepActionKSleepAction45Min = 3,
  SleepActionKSleepActionCustom = 4,
};

typedef SWIFT_ENUM_NAMED(NSInteger, TaskStatus, "TaskStatus", open) {
  TaskStatusUnknown = 0,
  TaskStatusGettingInfo = 1,
  TaskStatusStarted = 2,
  TaskStatusDownloading = 3,
  TaskStatusPaused = 4,
  TaskStatusCancelled = 5,
  TaskStatusFinished = 6,
  TaskStatusFailed = 7,
};

@class NSMutableArray;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20TeacherReviewFibView")
@interface TeacherReviewFibView : UIView
@property (nonatomic, strong) SDKFIBVO * _Nullable fibVO;
@property (nonatomic, strong) NSMutableArray * _Nonnull fibVOArray;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






@interface UIView (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)setAccessibilityForElementID:(NSString * _Nonnull)elementID WithFile:(NSString * _Nonnull)file argument:(NSString * _Nonnull)text;
- (void)setAccessibilityForElementID:(NSString * _Nonnull)elementID WithFile:(NSString * _Nonnull)file;
- (void)setAccessibilityWithElementID:(NSString * _Nonnull)elementID WithFile:(NSString * _Nonnull)file withArgument:(NSString * _Nonnull)text;
- (void)disableAccessibilityOnView:(UIView * _Nonnull)view;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK7Utility")
@interface Utility : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// An Object of VideoPlayerViewStateUpdate.
typedef SWIFT_ENUM(NSInteger, VideoPlayerViewStateUpdate, open) {
  VideoPlayerViewStateUpdateKVideoUpdatePlayPauseState = 0,
  VideoPlayerViewStateUpdateKVideoUpdateReadingSpeed = 1,
  VideoPlayerViewStateUpdateKVideoUpdateCurrentTime = 2,
};

enum WatermarkPosition : NSInteger;

/// An object that manages the content for the watermark on the screen.
/// A WatermarkHolderView object adds content within its bounds rectangle and handles any interactions with that content. Use WatermarkHolderView to add watermark, it can be a label,  image etc.
/// <ul>
///   <li>
///     SuperClass : UIView
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19WatermarkHolderView")
@interface WatermarkHolderView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// To display WatermarkHolderView.
/// Used this method to show hidden watermark .
- (void)showWatermark;
/// To hide WatermarkHolderView.
/// A hidden view disappears from its window. It remains in its superview’s list of subviews.
- (void)hideWatermark;
/// To set WaterMark Position.
/// Use this method to set <em>waterMark Position</em>. Default Position of waterMark is bottomLeft.
/// \param position WaterMarkPosition.
///
- (void)setWatermarkHolderViewPosition:(enum WatermarkPosition)position;
/// To get WaterMark Position.
/// Use this method to get <em>waterMark Position</em>.
///
/// returns:
/// WatermarkPosition .
- (enum WatermarkPosition)getWatermarkHolderViewPosition SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

/// WatermarkPosition is used to set position to WatermarkHolderView.
typedef SWIFT_ENUM(NSInteger, WatermarkPosition, open) {
/// Top Left Position of Page
  WatermarkPositionTopLeft = 0,
/// Top center Position of Page
  WatermarkPositionTopCenter = 1,
/// Top Right Position of Page
  WatermarkPositionTopRight = 2,
/// Bottom Left Position of Page
  WatermarkPositionBottomLeft = 3,
/// Bottom Center Position of Page
  WatermarkPositionBottomCenter = 4,
/// Bottom Right Position of Page
  WatermarkPositionBottomRight = 5,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef KITABOO_READER_SDK_SWIFT_H
#define KITABOO_READER_SDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFAudio;
@import AVFoundation;
@import AVKit;
@import CoreData;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Kitaboo_Reader_SDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UILabel;
@class NSURL;
@class NSString;
@class NSMutableDictionary;
@class NSDictionary;

@interface AVPlayerViewController (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
@property (nonatomic, strong) UILabel * _Nullable subtitleLabel;
- (void)addSubtitles;
- (BOOL)openWithFileFromLocal:(NSURL * _Nonnull)filePath error:(NSError * _Nullable * _Nullable)error;
- (void)showWithSubtitles:(NSString * _Nonnull)string;
- (void)showByDictionaryWithDictionaryContent:(NSMutableDictionary * _Nonnull)dictionaryContent;
- (void)addPeriodicNotificationWithParsedPayload:(NSDictionary * _Nonnull)parsedPayload;
@end

@class NSBundle;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19AccessibilityHelper")
@interface AccessibilityHelper : NSObject
/// Used to set the bundle for reader accessibility files.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nullable readerAccessibilityBundle;)
+ (NSBundle * _Nullable)readerAccessibilityBundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setReaderAccessibilityBundle:(NSBundle * _Nullable)value;
/// Used to set the bundle for app accessibility files.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nullable appAccessibilityBundle;)
+ (NSBundle * _Nullable)appAccessibilityBundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setAppAccessibilityBundle:(NSBundle * _Nullable)value;
/// Used to set the language for accessibility files.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable language;)
+ (NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
+ (void)setLanguage:(NSString * _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, AudioBookPlayerViewStateUpdate, open) {
  AudioBookPlayerViewStateUpdateKAudioBookUpdatePlayPauseState = 0,
  AudioBookPlayerViewStateUpdateKAudioBookUpdateReadingSpeed = 1,
  AudioBookPlayerViewStateUpdateKAudioBookUpdateCurrentTime = 2,
};

@class NSNumber;

SWIFT_CLASS_NAMED("BookClassSharingConfiguration")
@interface BookClassSharingConfiguration : NSObject
- (nonnull instancetype)initWithSharingList:(NSDictionary<NSString *, NSString *> * _Nonnull)sharingList type:(NSString * _Nonnull)type role:(NSInteger)role OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isSharingEnable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isTeacherSharingEnable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isStudentSharingEnable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isStudent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURLRequest;
@class NSData;
@class KitabooServiceMetaData;

SWIFT_CLASS_NAMED("KitabooRequest")
@interface KitabooRequest : NSObject
- (NSURLRequest * _Nonnull)registerUser:(NSString * _Nonnull)firstName lastName:(NSString * _Nonnull)lastName email:(NSString * _Nonnull)email userName:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password accessCode:(NSString * _Nonnull)accessCode SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)validateAccessCodeWithUserToken:(NSString * _Nonnull)userToken withAccessCode:(NSString * _Nonnull)accessCode SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)authenticateUserWith:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)authenticateUserWith:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password addUUID:(BOOL)addUUID SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)authenticateGoogleClassRoomUserWith:(NSDictionary<NSString *, id> * _Nonnull)tokenSchema SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)changePasswordWith:(NSString * _Nonnull)userToken existingPassword:(NSString * _Nonnull)password password:(NSString * _Nonnull)newPassword andUserName:(NSString * _Nonnull)userName SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)resetPasswordWithUserName:(NSString * _Nonnull)userName SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)bookClassInfo:(NSString * _Nonnull)userToken bookIds:(NSArray<NSString *> * _Nonnull)bookIds SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)forceUpdate:(NSString * _Nonnull)appVersion SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)dowloadBookURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)dowloadBookOnlineURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType timeStamp:(int64_t)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)downloadMediaBookURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)authenticateHLSPackageWithBaseURL:(NSString * _Nonnull)baseURL userToken:(NSString * _Nonnull)userToken packageId:(int64_t)packageId timeStamp:(int64_t)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)consumeBookWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)releaseBookWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBookListWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBookListForCategoryWithUserToken:(NSString * _Nonnull)userToken startIndex:(NSString * _Nullable)startIndex endIndex:(NSString * _Nullable)endIndex categoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBookListForCategoryV1WithUserToken:(NSString * _Nonnull)userToken startIndex:(NSString * _Nullable)startIndex endIndex:(NSString * _Nullable)endIndex categoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchCategoryListWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchCategoryListV1WithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBooksForCollectionWithUserToken:(NSString * _Nonnull)userToken categoryName:(NSString * _Nonnull)categoryName collectionName:(NSString * _Nonnull)collectionName startIndex:(NSString * _Nullable)startIndex endIndex:(NSString * _Nullable)endIndex categoryId:(NSString * _Nullable)categoryId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchRecentlyViewedBooksWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)downloadAllBooksUrlWithUserToken:(NSString * _Nonnull)userToken state:(NSString * _Nonnull)state bookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)deleteAllBooksWithUserToken:(NSString * _Nonnull)userToken bookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveSessionHistoryWithUserToken:(NSString * _Nonnull)userToken sessionHistory:(NSDictionary<NSString *, NSArray<NSDictionary<NSString *, id> *> *> * _Nonnull)sessionHistory SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)refreshBookListWithUserToken:(NSString * _Nonnull)userToken bookIdAndTypeDict:(NSDictionary<NSString *, id> * _Nonnull)bookIdAndTypeDict timeStamp:(NSString * _Nullable)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchUserSettingsWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)markFavouriteWithUserToken:(NSString * _Nonnull)userToken favoriteBook:(NSDictionary<NSString *, id> * _Nonnull)favoriteBook SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchFavouriteWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)unmarkFavouriteWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchCollabUGC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp bookVersion:(NSString * _Nonnull)bookVersion SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchCollabShare:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchUGC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp bookVersion:(NSString * _Nonnull)bookVersion SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchTeacherAnnotations:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp bookVersion:(NSString * _Nonnull)bookVersion SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchStudentAnnotations:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId learnerId:(NSString * _Nonnull)learnerId timeStamp:(NSString * _Nonnull)timeStamp bookVersion:(NSString * _Nonnull)bookVersion SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchKalturaURL:(NSString * _Nonnull)userToken entryID:(NSString * _Nonnull)entryID type:(NSInteger)type SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)registerDevice:(NSString * _Nonnull)userToken body:(NSData * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)deRegisterDevice:(NSString * _Nonnull)userToken body:(NSData * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getNotifications:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)deleteNotification:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)markReadNotifications:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId body:(NSData * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveUGCData:(NSString * _Nonnull)userToken ugcData:(NSData * _Nonnull)ugcData bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveUGCData:(NSString * _Nonnull)userToken ugcData:(NSData * _Nonnull)ugcData bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp metaDataObject:(KitabooServiceMetaData * _Nonnull)metaData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveColllabData:(NSString * _Nonnull)userToken collab:(NSData * _Nonnull)collab bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveColllabData:(NSString * _Nonnull)userToken collab:(NSData * _Nonnull)collab bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp metaDataObject:(KitabooServiceMetaData * _Nonnull)metaData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveHighlightData:(NSString * _Nonnull)userToken highlight:(NSData * _Nonnull)highlight bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveTrackingData:(NSString * _Nonnull)userToken analytics:(NSData * _Nonnull)analytics bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getAnalyticsData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId classId:(NSNumber * _Nonnull)classId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)elasticSearchData:(NSString * _Nonnull)userToken searchData:(NSData * _Nonnull)searchData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)updateUserDetails:(NSString * _Nonnull)userToken profileData:(NSData * _Nonnull)profileData coverData:(NSData * _Nonnull)coverData firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)acceptRejectCollab:(NSString * _Nonnull)userToken collabData:(NSData * _Nonnull)collabData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveTeacherAnnotations:(NSString * _Nonnull)userToken annotations:(NSData * _Nonnull)annotations bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp learnerId:(NSString * _Nonnull)learnerId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)submitAnotation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchReadingSpeedInformationWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchLastPageAccessedWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchFurthestPageWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveLastPageAccessedWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId lastPageData:(NSString * _Nonnull)lastPageData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveFurthestPageDataWithUserToken:(NSString * _Nonnull)userToken furthestPageData:(NSData * _Nonnull)furthestPageData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveSCORMData:(NSString * _Nonnull)userToken scormData:(NSData * _Nonnull)scormData bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchSCORMData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId classId:(NSString * _Nonnull)classId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getBookDetails:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getBookDetailsWithID:(NSString * _Nonnull)bookId userToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)packageURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getBookDetailsSecured:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchRecentlyViewedBooksSecuredWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBooksForCollectionSecuredWithUserToken:(NSString * _Nonnull)userToken categoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId collectionName:(NSString * _Nonnull)collectionName startIndex:(NSString * _Nullable)startIndex endIndex:(NSString * _Nullable)endIndex SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBookListForCategorySecuredWithUserToken:(NSString * _Nonnull)userToken startIndex:(NSString * _Nullable)startIndex endIndex:(NSString * _Nullable)endIndex categoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchFavouriteSecuredWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)downloadAllBooksUrlSecuredWithUserToken:(NSString * _Nonnull)userToken state:(NSString * _Nonnull)state bookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)refreshBookListSecuredWithUserToken:(NSString * _Nonnull)userToken bookIdAndTypeDict:(NSDictionary<NSString *, id> * _Nonnull)bookIdAndTypeDict timeStamp:(NSString * _Nullable)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)refreshCategoryListSecured:(NSString * _Nonnull)userToken categoryIdList:(NSDictionary<NSString *, id> * _Nonnull)categoryIdList SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchPreferredLocaleWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)savePreferredLocaleWithUserToken:(NSString * _Nonnull)userToken languageData:(NSData * _Nonnull)languageData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBookTOC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchStudentMarkupReport:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId classID:(NSString * _Nonnull)classID chapterNumbers:(NSString * _Nonnull)chapterNumbers email:(NSString * _Nonnull)email userIDs:(NSString * _Nonnull)userIDs SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getScreenshotCountWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)updateScreenshotCountWithUserToken:(NSString * _Nonnull)userToken screenshotCount:(NSInteger)screenshotCount SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getFetchsessionWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)deleteSessionWithUserToken:(NSString * _Nonnull)userToken uuId:(NSString * _Nonnull)uuId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)deleteAllSessionWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getImmersiveReaderTokenWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ClientRequest")
@interface ClientRequest : KitabooRequest
@end

/// To get current state of Media Book.
typedef SWIFT_ENUM(NSInteger, CurrentState, open) {
  CurrentStatePLAYING = 0,
  CurrentStatePAUSE = 1,
  CurrentStateCANCELLED = 2,
  CurrentStateLOADED = 3,
  CurrentStateUNKNOWN = 4,
  CurrentStateLOADING = 5,
};

@class NSCoder;
@class UIScrollView;

/// An Object that create custom view as per requirement.
/// <ul>
///   <li>
///     The CustomizeView class defines a view where user can create any customized view as per requirement.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK13CustomizeView")
@interface CustomizeView : UIView <UIScrollViewDelegate>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWith:(NSURL * _Nonnull)localUrl OBJC_DESIGNATED_INITIALIZER;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class WKUserContentController;
@class WKScriptMessage;
@protocol EquationEditorKeyboardViewControllerDelegate;
@class KFLinkVO;
@class SDKFIBVO;
@class WKWebView;
@class WKNavigationAction;
@class WKNavigation;

SWIFT_CLASS_NAMED("EquationEditorKeyboardViewController")
@interface EquationEditorKeyboardViewController : UIViewController <UIScrollViewDelegate, WKNavigationDelegate, WKScriptMessageHandler, WKUIDelegate>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
/// The object that acts as the delegate of the EquationEditorKeyboardViewController.
/// The delegate must adopt the EquationEditorKeyboardViewControllerDelegate protocol.
@property (nonatomic, strong) id <EquationEditorKeyboardViewControllerDelegate> _Nullable delegate;
/// link refers to data of the KFLinkVO
@property (nonatomic, strong) KFLinkVO * _Nonnull link;
/// fibVO is responsible for FIB and refers to SDKFIBVO.
@property (nonatomic, strong) SDKFIBVO * _Null_unspecified fibVO;
/// latex is Text of Equation view.
@property (nonatomic, copy) NSString * _Nonnull latex;
/// To set Y position of TextView for Equation Editor.
@property (nonatomic, copy) NSString * _Nonnull posY;
- (nonnull instancetype)initWithEqfibVO:(SDKFIBVO * _Nonnull)eqfibVO OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL_NAMED("EquationEditorKeyboardViewControllerDelegate")
@protocol EquationEditorKeyboardViewControllerDelegate
/// This method will be called to dismiss Equation Keyboard and show Default keyboard.
/// \param link Object of type KFLinkVO.
///
/// \param FIBVO Object of type SDKFIBVO.
///
/// \param text entered Text in Equation Textview.
///
- (void)changeEquationKeyboardToNormalForLink:(KFLinkVO * _Nonnull)link FIBVO:(SDKFIBVO * _Nullable)FIBVO withEnterText:(NSString * _Nonnull)text;
/// This method will be called to save Equation Editor.
/// \param link Object of type KFLinkVO.
///
/// \param FIBVO Object of type SDKFIBVO.
///
/// \param text entered Text in Equation Textview to save.
///
- (void)saveEquationEditorForLink:(KFLinkVO * _Nonnull)link FIBVO:(SDKFIBVO * _Nullable)FIBVO :(NSString * _Nonnull)text;
/// This method will be called to close the Equation Editor.
- (void)closeEquationEditor;
@end

@protocol FIBMathEquationViewDelegate;
@class UIColor;

SWIFT_CLASS_NAMED("FIBMathEquationView")
@interface FIBMathEquationView : UIView
/// The object that acts as the delegate of the FIBMathEquationView.
/// The delegate must adopt the FIBMathEquationViewDelegate protocol.
@property (nonatomic, strong) id <FIBMathEquationViewDelegate> _Nullable delegate;
/// fibVO is responsible for FIB.
@property (nonatomic, strong) SDKFIBVO * _Nullable fibVO;
@property (nonatomic) BOOL isTeacher;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Initializes an allocated FIBMathEquationView object with KFLinkVO ,equationTxt,isSubmited and frame.
/// \param link KFLinkVO
///
/// \param equationTxt Text of EquationView
///
/// \param isSubmited Boolean value to indicate  whether Equation view is Submitted.
///
/// \param frame Equation View Frame.
///
- (nonnull instancetype)initWithLink:(KFLinkVO * _Nonnull)link equationTxt:(NSString * _Nonnull)equationTxt isSubmited:(BOOL)isSubmited frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLink:(KFLinkVO * _Nonnull)link fibVO:(SDKFIBVO * _Nonnull)fibVO frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLink:(KFLinkVO * _Nonnull)link fibVO:(SDKFIBVO * _Nonnull)fibVO frame:(CGRect)frame useDefaultIcon:(BOOL)useDefaultIcon OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// To RootLabel view’s background color and mathEquationLabel text color
- (void)setThemeColor:(UIColor * _Nonnull)color;
- (void)focusToTextField;
@end


SWIFT_PROTOCOL_NAMED("FIBMathEquationViewDelegate")
@protocol FIBMathEquationViewDelegate
/// This method will be called when user Tap Math Equation View.
/// \param link Object of type KFLinkVO.
///
/// \param fibVO Object of type SDKFIBVO.
///
- (void)showEquationEditorKeyboardForLink:(KFLinkVO * _Nonnull)link withFIBVO:(SDKFIBVO * _Nullable)fibVO;
- (void)didSelectSubmittedEquation:(SDKFIBVO * _Nullable)fibVO withKFLinkVO:(KFLinkVO * _Nonnull)link withSourceView:(FIBMathEquationView * _Nonnull)sourceView;
@end

@class NSIndexPath;

SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK42GenerateReportChapterTableViewCellDelegate_")
@protocol GenerateReportChapterTableViewCellDelegate
- (void)didTapOnNodeButton:(NSIndexPath * _Nullable)indexPath;
@end

typedef SWIFT_ENUM(NSInteger, GenerateReportFilter, open) {
  GenerateReportFilterCHAPTER = 0,
  GenerateReportFilterSTUDENT = 1,
};

@protocol GenerateReportMailViewControllerDelegate;
@protocol UIViewControllerTransitionCoordinator;

/// An object that manages the UI
/// A GenerateReportMailViewController object manages the UI and provides call backs
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK32GenerateReportMailViewController")
@interface GenerateReportMailViewController : UIViewController <UITextFieldDelegate>
@property (nonatomic, weak) id <GenerateReportMailViewControllerDelegate> _Nullable delegate;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// Initializes the GenerateReportMailViewController object
/// This method should be called to initialize the GenerateReportMailViewController object to send the report to specific email ID
/// \param emailID emailID is the String instance.This is the current email ID of the active user.
/// =
///
- (nonnull instancetype)init:(NSString * _Nonnull)emailID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK40GenerateReportMailViewControllerDelegate_")
@protocol GenerateReportMailViewControllerDelegate
/// Delegate method when tapped on done button on the UIAlertController
/// This method will be called when user tap on the done button on the UIAlertController
/// \param alternateEmail alternateEmail is the String instance.This is the alternail email ID in UIAlertController text field.
///
- (void)didTapOnDoneForGenerateReportMail:(NSString * _Nonnull)alternateEmail;
/// Delegate method when tapped on cancel button on the UIAlertController
/// This method will be called when user tap on the cancel button on the UIAlertController
- (void)didTapOnCancelForGenerateReportMail;
@end

@class KFBookVO;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20GenerateReportParser")
@interface GenerateReportParser : NSObject
- (NSArray * _Nonnull)parseGenerateReportTOC:(NSDictionary<NSString *, id> * _Nonnull)tocDict :(KFBookVO * _Nonnull)bookVO SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19GenerateReportTOCVO")
@interface GenerateReportTOCVO : NSObject
@property (nonatomic, copy) NSString * _Nullable chapterTitle;
@property (nonatomic, copy) NSString * _Nullable chapterID;
@property (nonatomic, copy) NSString * _Nullable nodeID;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isExpanded;
@property (nonatomic) BOOL isSubNode;
@property (nonatomic) NSInteger subnodeLevel;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable folioNumberArray;
@property (nonatomic, copy) NSArray<GenerateReportTOCVO *> * _Nullable subnodes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol GenerateReportViewControllerDelegate;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK28GenerateReportViewController")
@interface GenerateReportViewController : UIViewController
@property (nonatomic, weak) id <GenerateReportViewControllerDelegate> _Nullable delegate;
@property (nonatomic) enum GenerateReportFilter selectedMode;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// Initializes the GenerateReportViewController object
/// This method should be called to initialize the GenerateReportViewController object
/// \param themeColor mediaBookModel is the UIColor instance.This instance to set the theme color to components of GenerateReportViewController
///
- (nonnull instancetype)initWithThemeColor:(UIColor * _Nullable)themeColor OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// To set the data to specific selected view i.e, Chapter/Student
/// This method should be called everytime when user receive the callback for selected view i.e,Chapter/Student to set the relative data of the selected view.
/// \param data data is the NSArray instance.When user select Chapter view then it should be an array of GenerateReportTOCVO.When user select Student view then it should be an array of student details.
///
- (void)setData:(NSArray * _Nonnull)data;
- (void)setStatusData:(NSDictionary * _Nonnull)statusData;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK36GenerateReportViewControllerDelegate_")
@protocol GenerateReportViewControllerDelegate
/// Delegate method when tapped on cancel button
/// This method will be called when user tap on the cancel button
- (void)didTapOnCancelForGenerateReport;
/// Delegate method when tapped on back button
/// This method will be called when user tap on the back button.This is only application for iPhone devices as back button is not present in iPad devices
- (void)didTapOnBackForGenerateReport;
/// Delegate method when tapped on next button
/// This method will be called when user tap on the next button.
/// \param reportData reportData is the Dictionary instance.It consists both chapter and student data with chapterID and studentID keys respetively
///
- (void)didTapOnNextToSendMailWithReportData:(NSDictionary<NSString *, id> * _Nonnull)reportData;
/// Delegate method when tapped on Select Chapter view
/// This method will be called when user tap on Select Chapter view of Generate Report View
- (void)didSelectChapterSegmentForGenerateReport;
/// Delegate method when tapped on Select Student view
/// This method will be called when user tap on Select Student view of Generate Report View
- (void)didSelectStudentSegmentForGenerateReport;
@end

/// This enum represent the currently selected glossary item.
typedef SWIFT_ENUM_NAMED(NSInteger, GlossaryResourceType, "GlossaryResourceType", open) {
  GlossaryResourceTypeKGlossaryResourceTypeAudio = 0,
  GlossaryResourceTypeKGlossaryResourceTypeVideo = 1,
  GlossaryResourceTypeKGlossaryResourceTypeImage = 2,
  GlossaryResourceTypeKGlossaryResourceTypeURL = 3,
};

@protocol GlossaryViewControllerDelegate;
@class KFGlossaryVO;

/// GlossaryViewController is a class which will be responsible for loading/displaying content related to the selected glossary and gives callback when any item is selected, so one can perform respective actions.
SWIFT_CLASS_NAMED("GlossaryViewController")
@interface GlossaryViewController : UIViewController
/// The object that acts as the delegate of the GlossaryViewController.
/// The delegate must adopt the GlossaryViewControllerDelegate protocol.
@property (nonatomic, strong) id <GlossaryViewControllerDelegate> _Nullable delegate;
/// object of type KFGlossaryVO which have all information related to selected glossary.
@property (nonatomic, strong) KFGlossaryVO * _Nullable glossaryItem;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
/// To set colors for items which are present in glossary view.
/// <h3>Usage Example:</h3>
/// \code
/// [glossaryViewController setColorsForGlossaryViewWithIconColor:hdThemeVO.glossary_icon_color iconBorderColor:hdThemeVO.glossary_icon_border_color alphabetTextColor:hdThemeVO.glossary_alphabet_label_color keyWordTextColor:hdThemeVO.glossary_keyword_label_color descriptionTextColor:hdThemeVO.glossary_description_color];
///
/// \endcode\param iconColor color for icons which are present in glossary controller
///
/// \param iconBorderColor boreder color for icons
///
/// \param alphabetTextColor text color for alphabet text
///
/// \param keyWordTextColor text color for keyword text
///
/// \param descriptionTextColor text color for description text
///
- (void)setColorsForGlossaryViewWithIconColor:(UIColor * _Nonnull)iconColor iconBorderColor:(UIColor * _Nonnull)iconBorderColor alphabetTextColor:(UIColor * _Nonnull)alphabetTextColor keyWordTextColor:(UIColor * _Nonnull)keyWordTextColor descriptionTextColor:(UIColor * _Nonnull)descriptionTextColor;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The delegate of a GlossaryViewController object must adopt the GlossaryViewControllerDelegate protocol.
/// <ul>
///   <li>
///     GlossaryViewControllerDelegate Protocol used to handle all the callbacks of GlossaryViewController Class.The GlossaryViewControllerDelegate protocol defines methods that allow user to manage all the actions/events when any Glossary Item is selected.
///   </li>
///   <li>
///     When configuring the GlossaryViewController object, assign your delegate object to its delegate property.
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("GlossaryViewControllerDelegate")
@protocol GlossaryViewControllerDelegate
/// Tells the delegate that the glossary item  is now selected.
/// The delegate handles selections in this method.  This method will called when the glossary Item is Select.
/// \param selectedType Selected GlossaryResourceType.
///
/// \param resorcePath Path of resource for selected glossary item
///
- (void)didSelectGlossaryItemWithType:(enum GlossaryResourceType)selectedType withPath:(NSString * _Nonnull)resorcePath;
@end

@class NSURLSessionDownloadTask;
@class NSDate;

SWIFT_CLASS_NAMED("HDBookDownloadDetails")
@interface HDBookDownloadDetails : NSObject
/// UniqueID of the book that needs to be downloaded
@property (nonatomic, copy) NSString * _Null_unspecified bookUniqueID;
/// Book URL of the book that needs to be downloaded
@property (nonatomic, copy) NSString * _Null_unspecified bookDownloadURL;
/// Download state of the book that needs to be downloaded.The status of the book will be in four states i.e,GettingInfo,Downloading,Paused,Failed,Unknown
@property (nonatomic, copy) NSString * _Nonnull bookDownloadState;
/// Download size of the book that needs to be downloaded
@property (nonatomic) float bookDownloadSize;
/// Download size of the book that needs to be downloaded only in bytes
@property (nonatomic) float bookDownloadSizeBytes;
/// Download units of the book that needs to be downloaded
@property (nonatomic, copy) NSString * _Null_unspecified bookDownloadUnit;
/// Downloaded size of the book out of the total book download size
@property (nonatomic) float downloadedBookSize;
/// Downloaded size of the book out of the total book download size in bytes
@property (nonatomic) float downloadedBookSizeBytes;
/// Downloaded size unit of the book out of the total book download size
@property (nonatomic, copy) NSString * _Null_unspecified downloadedBookUnit;
/// Progress of the book that needs to be downloaded
@property (nonatomic) float progress;
/// Download Task of the current book
@property (nonatomic, strong) NSURLSessionDownloadTask * _Nullable task;
@property (nonatomic, copy) NSDate * _Nullable bookDownloadInitiatedTime;
@property (nonatomic, copy) NSString * _Nonnull bookDownloadDestinationPath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HDAVAssetTaskDetails;

/// An Object that contains all the information about downloading HLS Media Book.
SWIFT_CLASS_NAMED("HDAVAssetDownloadDetails") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface HDAVAssetDownloadDetails : HDBookDownloadDetails
/// All the details about all the downloading assets.
@property (nonatomic, copy) NSArray<HDAVAssetTaskDetails *> * _Nullable assetTaskDetails;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An object that manages the download handlings of a Media Book.
/// A HDAVAssetDownloaderManager object is responsible for all download actions for a media book, i.e. Download, Pause, Resume etc.
/// <ul>
///   <li>
///     SuperClass : NSObject
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("HDAVAssetDownloaderManager") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface HDAVAssetDownloaderManager : NSObject
+ (HDAVAssetDownloaderManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol HDAVAssetDownloaderManagerDelegate;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface HDAVAssetDownloaderManager (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
/// This method is called to download the HLS Media Book
/// - parameter bookId : Book needs to be downloaded
/// - parameter bookDownloadURLs : URLs which needs to be downloaded.
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)downloadAVAsset:(NSString * _Nonnull)bookId bookDownloadURLs:(NSArray<NSURL *> * _Nonnull)bookDownloadURLs delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to pause the downloading HLS book
/// - parameter bookId : Book needs to be paused
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)pauseAVAsset:(NSString * _Nonnull)bookId delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to resume the paused HLS book
/// - parameter bookId : Book needs to be resumed
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)resumeAVAsset:(NSString * _Nonnull)bookId delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
- (void)setDelegateForAVAssetWithDelegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate bookID:(NSString * _Nonnull)bookID;
/// This method is called to retry the download of  a HLS book
/// - parameter bookId : Book needs to be downloaded
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)retryAVAssetDownload:(NSString * _Nonnull)bookId delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to get the details of HLS book
/// - parameter bookId : BookID
- (HDAVAssetDownloadDetails * _Nullable)getAVAssetDetails:(NSString * _Nonnull)bookID SWIFT_WARN_UNUSED_RESULT;
/// This method is called to get the array of HLS books which are in downloading state
- (NSArray<HDAVAssetDownloadDetails *> * _Nullable)getAllAVAssetDetails SWIFT_WARN_UNUSED_RESULT;
/// This method is called to pause all the downloading HLS books
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)pauseAllAVAssetWithDelegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to get the count of downloading HLS books
- (NSInteger)inProgressAVAssetDownloadCount SWIFT_WARN_UNUSED_RESULT;
/// This method is called to cancel the downloading HLS book
/// - parameter bookId : Book needs to be cancelled
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)cancelAVAsset:(NSString * _Nonnull)bookId delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to delete the downloaded HLS book
/// - parameter bookId : Book needs to be deleted.
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)deleteAVAsset:(NSString * _Nonnull)bookId delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to get the status of provided AVAsset whether it is downloaded or not.
/// - parameter bookId : Book whose status needs to be checked.
- (BOOL)isAVAssetDownloaded:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
@end

@class NSError;

/// The delegate of a HDAVAssetDownloaderManager object must adopt the HDAVAssetDownloaderManagerDelegate protocol.
/// HDAVAssetDownloaderManagerDelegate Protocol used to handle all the callbacks of HDAVAssetDownloaderManager Class.The HDAVAssetDownloaderManagerDelegate protocol defines methods to provide callbacks when user perform any action on downloading Media Book..
/// When configuring the HDAVAssetDownloaderManager object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL_NAMED("HDAVAssetDownloaderManagerDelegate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@protocol HDAVAssetDownloaderManagerDelegate
@optional
/// A delegate method to pause all the downloading tasks
- (void)didPauseAllAVAssetDownloads;
/// A delegate method to pause all the downloading tasks
- (void)didDeleteDownloadedAVAssetWithBookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever a download task state is updated i.e Started, Downloading, Paused, Cancelled, Finished, Failed etc.
/// - parameter bookDownloadDetail : HDAVAssetDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is paused
- (void)didDownloadRequestStateUpdateForAVAsset:(HDAVAssetDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever any download task is failed due to any reason
/// - parameter bookDownloadDetail : HDAVAssetDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is failed
/// - parameter error : NSError for which the download has been failed
- (void)didDownloadRequestFailForAVAsset:(NSError * _Nonnull)error bookDownloadDetail:(HDAVAssetDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
@end

@class AVAggregateAssetDownloadTask;
@class AVURLAsset;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20HDAVAssetTaskDetails") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface HDAVAssetTaskDetails : NSObject
/// Name of the current asset.
@property (nonatomic, copy) NSString * _Nullable assetM3U8Name;
/// Download Task of the current book.
@property (nonatomic, strong) AVAggregateAssetDownloadTask * _Nullable aggregateTask;
/// Downloaded Asset url path of the current book.
@property (nonatomic, copy) NSURL * _Nullable assetDownloadedURLPath;
/// Downloading Asset url of the current book.
@property (nonatomic, copy) NSURL * _Nullable assetURL;
/// Downloading Asset url of the current book.
@property (nonatomic, strong) AVURLAsset * _Nullable avURLAsset;
/// Loaded duration of the asset that needs to be downloaded.
@property (nonatomic) float taskLoadedDuration;
/// Total duration of the asset that needs to be downloaded.
@property (nonatomic) float taskTotalDuration;
/// Progress of the asset that needs to be downloaded.
@property (nonatomic) float taskProgress;
@property (nonatomic, copy) NSString * _Nonnull taskDownloadState;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HDAudioBookPlayerViewControllerDelegate;
@class HDMediaBookModel;
@class HDMediaBookChapterVO;
@class HDKitabooMediaBookThemeVO;
@class SDKBookmarkVO;
@class UIButton;

/// An object that manages the UI for Audio Book.
/// A HDAudioBookPlayerViewController object manages the UI and provides call backs when multiple actions performed.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK31HDAudioBookPlayerViewController")
@interface HDAudioBookPlayerViewController : UIViewController
/// The object that acts as the delegate of the HDAudioBookPlayerViewController.
/// The delegate must adopt the HDAudioBookPlayerViewControllerDelegate protocol.
@property (nonatomic, weak) id <HDAudioBookPlayerViewControllerDelegate> _Nullable delegate;
/// A Time constant value for forward backward buttons.
@property (nonatomic) float forwardBackwardTimeConstant;
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// Initializes the HDAudioBookPlayerViewController object
/// This method should be called to initialize the HDAudioBookPlayerViewController object
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)updateChapterViewControlsFont;
- (void)updateConstraints;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)setPlayPauseButtonCornerRadius:(CGFloat)radius;
- (void)updateAudioThumbnail;
- (void)addSleepTimeView;
- (void)removeSleepTimeView;
- (void)setSleepTimeLabelText:(NSString * _Nonnull)text;
/// To update the player view according to the state received
/// This method should be called to update the player view according to the state received.Set the state to kAudioBookUpdatePlayPauseState to update the play/pause button title according to the current state of the AudioBook.Set the state to kAudioBookUpdateReadingSpeed to update the text of the narration speed label.Set the state to kAudioBookUpdateCurrentTime to update the slider progress and time label text.
/// \param state state is an enum of  AudioBookStateUpdate
///
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel object
///
- (void)updatePlayerView:(enum AudioBookPlayerViewStateUpdate)state mediaBookModel:(HDMediaBookModel * _Nonnull)mediaBookModel showLoader:(BOOL)showLoader;
/// To update the chapter name and number for the current playing chapter of the AudioBook
/// This method should be called to update the chapter name and number for the current playing chapter of the AudioBook
/// \param enable chapterVO is the HDMediaBookChapterVO instance.This is an instance of the current playing chapter.
///
- (void)setCurrentChapter:(HDMediaBookChapterVO * _Nullable)chapterVO;
/// To set the theme color to various UI components of the HDAudioBookPlayerViewController
/// This method should be called to set the color to various UI components of the HDAudioBookPlayerViewController. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To hide/unhide the Bookmark
/// This method should be called to hide/unhide the Bookmark button.If this method is not called then by default the Bookmark button will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the Bookmark button will be hidden and vice versa.
///
- (void)hideBookmark:(BOOL)hide;
/// To disable the next chapter button.
/// This method should be called to disable the next chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa
///
- (void)disableNextChapter:(BOOL)disable;
/// To disable the previous chapter button.
/// This method should be called to disable the previous chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa
///
- (void)disablePreviousChapter:(BOOL)disable;
/// To disable the Bookmark  button.
/// This method should be called to disable the bookmark button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disableBookmark:(BOOL)disable;
/// To delete all the bookmarks on the view of the seek bar of the audio player.
- (void)deleteAllBookmarks:(NSArray<SDKBookmarkVO *> * _Nonnull)bookmarksVO;
/// To add the bookmark view on the seek bar of the audio player
/// This method should be called to add the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)addBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To delete the bookmark view on the seek bar of the audio player
/// This method should be called to delete the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)deleteBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To get Thumbnail Container View.
- (UIView * _Nullable)getThumbnailContainerView SWIFT_WARN_UNUSED_RESULT;
- (void)updateTimeinHours:(double)currentTime :(double)totalTime;
- (void)bookmarkButtonTapped:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@class UIImageView;

/// The delegate of a HDAudioBookPlayerViewController object must adopt the HDAudioBookPlayerViewControllerDelegate protocol.
/// HDAudioBookPlayerViewControllerDelegate Protocol used to handle all the callbacks of HDAudioBookPlayerViewController Class.The HDAudioBookPlayerViewControllerDelegate protocol defines methods to provide callback when user perform any action on HDAudioBookPlayerViewController.
/// When configuring the HDAudioBookPlayerViewController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK39HDAudioBookPlayerViewControllerDelegate_")
@protocol HDAudioBookPlayerViewControllerDelegate
@optional
/// Delegate method when user tap on bookmark button
/// This method will be called when user tap on the bookmark button
- (void)didTapOnBookmark;
/// Delegate method when tapped on play/pause button
/// This method will be called when user tap on the play/pause button
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (void)didTapOnPlayPause:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// Delegate method when tapped on Narration Speed button
/// This method will be called when user tap on the Narration Speed button
- (void)didTapOnNarrationSpeed:(UIButton * _Nonnull)button;
/// Delegate method when tapped on forward button
/// This method will be called when user tap on the forward button
- (void)didTapOnForward;
/// Delegate method when tapped on backward button
/// This method will be called when user tap on the backward button
- (void)didTapOnRewind;
/// Delegate method when tapped on next chapter button
/// This method will be called when user tap on the next chapter  button
- (void)didTapOnNextChapter;
/// Delegate method when tapped on previous chapter button
/// This method will be called when user tap on the previous chapter  button
- (void)didTapOnPreviousChapter;
/// Delegate method when update the UISlider position
/// This method will be called when user update the UISlider position
- (void)didSeekBarValueChanged;
/// Delegate method to update the thumbnail image
/// This method will be called to set the thumbnail image
/// \param thumbnailURL thumbnailURL is the String.thumbnailURL is the url of the image that needs to be displayed
///
- (UIImageView * _Nullable)imageViewForThumbnail:(NSString * _Nonnull)thumbnailURL SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS_NAMED("HDBookDownloaderManager")
@interface HDBookDownloaderManager : NSObject
+ (HDBookDownloaderManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HDBookDownloaderManagerDelegate;

@interface HDBookDownloaderManager (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
/// This method is called to download a book at specific path
/// - parameter bookId : Book needs to be downloaded
/// - parameter bookDownloadURL : URL from where the book needs to be downloaded
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)downloadBook:(NSString * _Nonnull)bookId bookDownloadURL:(NSString * _Nonnull)bookDownloadURL delegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate downloadPath:(NSString * _Nonnull)downloadPath;
/// This method is called to pause the downloading book
/// - parameter bookId : Book needs to be paused
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)pauseBookDownload:(NSString * _Nonnull)bookId delegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to resume the paused book
/// - parameter bookId : Book needs to be resumed
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)resumeBookDownload:(NSString * _Nonnull)bookId delegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate;
- (void)setDelegateForBookWithDelegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate bookID:(NSString * _Nonnull)bookID;
/// This method is called to retry the download of  a book
/// - parameter bookId : Book needs to be downloaded
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)retryBookDownload:(NSString * _Nonnull)bookId delegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to get the details of book
/// - parameter bookId : BookID
- (HDBookDownloadDetails * _Nullable)getDownloadDetails:(NSString * _Nonnull)bookID SWIFT_WARN_UNUSED_RESULT;
/// This method is called to get the array of books which are in downloading state
- (NSArray<HDBookDownloadDetails *> * _Nullable)getDownloadingBooks SWIFT_WARN_UNUSED_RESULT;
/// This method is called to pause all the downloading books
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)pauseAllDownlaodsWithDelegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to get the count of downloading books
- (NSInteger)inProgressDownloadCount SWIFT_WARN_UNUSED_RESULT;
/// This method is called to cancel the downloading book
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)cancelBookDownload:(NSString * _Nonnull)bookId delegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate;
@end



SWIFT_PROTOCOL_NAMED("HDBookDownloaderManagerDelegate")
@protocol HDBookDownloaderManagerDelegate
/// A delegate method called each time whenever any download task’s progress is updated
/// - parameter bookDownloadDetail :  HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is in progress
- (void)bookDownloadRequestDidUpdateProgress:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called when interrupted tasks are repopulated
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is interrupted
- (void)bookDownloadRequestDidPopulatedInterruptedTasks:(NSArray<HDBookDownloadDetails *> * _Nonnull)bookDownloadDetail;
@optional
/// A delegate method called each time whenever new download task is start downloading
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is started
- (void)bookDownloadRequestStarted:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever running download task is paused. If task is already paused the action will be ignored
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is paused
- (void)bookDownloadRequestDidPaused:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method to pause all the downloading tasks
- (void)didPauseAllDownloads;
/// A delegate method called each time whenever any download task is resumed. If task is already downloading the action will be ignored
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is resumed
- (void)bookDownloadRequestDidResumed:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever any download task is resumed. If task is already downloading the action will be ignored
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is retried
- (void)bookDownloadRequestDidRetry:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever any download task is cancelled by the user
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is cancelled
- (void)bookDownloadRequestCanceled:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever any download task is finished successfully
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is finished
- (void)bookDownloadRequestFinished:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever any download task is failed due to any reason
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is failed
/// - parameter error : NSError for which the download has been failed
- (void)bookDownloadRequestDidFailedWithError:(NSError * _Nonnull)error bookDownloadDetail:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever specified destination does not exists. It will be called on the session queue. It provides the opportunity to handle error appropriately
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which does not exist
/// - parameter location : URL where destination url does not exist
- (void)bookDownloadRequestDestinationDoestNotExists:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID location:(NSURL * _Nonnull)location;
@end

@protocol HDDropDownDelegate;

/// An object that manages the content of ShareSetting classes.
/// A HDDropDownController object manages content of classes in dropdown list and selection of class from dropdown list.
SWIFT_CLASS_NAMED("HDDropDownController")
@interface HDDropDownController : UIViewController
/// The object that acts as the delegate of the HDDropDownController.
/// The delegate must adopt the HDDropDownDelegate protocol.
@property (nonatomic, strong) id <HDDropDownDelegate> _Nullable delegate;
/// To initialize HDDropDowncontroller.
/// \param dataArray Array of type string which is used to display names in drop down list.
///
/// \param dropDownFrame CGRect used to set frame for drop down controller.
///
- (nonnull instancetype)initWithDataArray:(NSArray<NSString *> * _Nonnull)dataArray dropDownFrame:(CGRect)dropDownFrame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UITableView;
@class UITableViewCell;

@interface HDDropDownController (SWIFT_EXTENSION(Kitaboo_Reader_SDK)) <UITableViewDataSource, UITableViewDelegate>
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
@end


/// Methods for managing selection of items in Dropdown of ShareSettings.
SWIFT_PROTOCOL_NAMED("HDDropDownDelegate")
@protocol HDDropDownDelegate
/// *This method will be called when user selects any item from table/list and returns selected item’s name.
- (void)didSelectItemWithName:(NSString * _Nonnull)name;
@end


/// An Object that manage the content that needs to be sent in ElasticSearch service request
/// @superclass SuperClass : NSObject
SWIFT_CLASS_NAMED("HDElasticSearchRequest")
@interface HDElasticSearchRequest : NSObject
@property (nonatomic, copy) NSString * _Nullable elasticSearchText;
@property (nonatomic, copy) NSString * _Nullable elasticSearchOn;
@property (nonatomic, copy) NSString * _Nullable elasticSearchType;
@property (nonatomic, copy) NSArray * _Nullable totalBookIDs;
@property (nonatomic, copy) NSArray * _Nullable elasticSearchFields;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable elasticSearchAdvancedFilter;
@property (nonatomic, copy) NSString * _Nullable elasticSearchFrom;
@property (nonatomic, copy) NSString * _Nullable elasticSearchSize;
/// Initializes the HDElasticSearchRequest class
/// <h3>Usage Example:</h3>
/// \code
/// HDElasticSearchRequest *searchRequest = [[HDElasticSearchRequest alloc] initWithSearchText:@"multiple" searchOn:@"page_content" searchType:@"complete" bookIds:[NSArray arrayWithObjects:@"4131", @"8124", nil] searchField:nil advancedFilter:nil from:@"0" size:@"50"];
///
///
/// \endcode\param searchText Data/Text that user need to search, within the search area.
///
/// \param searchOn Considers type of search to performed.By default search will be across book content (full-text) and Metadata. But if the search has to happen on only one of these then you can mention where the search operation need to be performed. i.e. page_content or metadata. However, irrespective of where the search match is found the result will alway return its corresponding title list.
///
/// \param searchType To indicate some correctness (i.e. match parts of the term) or exact correctness within the search area.
///
/// \param bookIds Array of book ids that reader will pass to perform search operation.
///
/// \param searchField Field on which you want to search. If not given, will search on all fields.
///
/// \param advancedFilter Filter documents on Interest Level.
///
/// \param from Start Index from which results are to fetched.
///
/// \param size Number of documents to be fetched.
///
- (nonnull instancetype)initWithSearchText:(NSString * _Nonnull)searchText searchOn:(NSString * _Nonnull)searchOn searchType:(NSString * _Nonnull)searchType bookIds:(NSArray * _Nonnull)bookIds searchField:(NSArray * _Nullable)searchField advancedFilter:(NSDictionary<NSString *, id> * _Nullable)advancedFilter from:(NSString * _Nonnull)from size:(NSString * _Nonnull)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An Object that manage the content of response from ElasticSearch service.
/// @superclass SuperClass : NSObject
SWIFT_CLASS_NAMED("HDElasticSearchResult")
@interface HDElasticSearchResult : NSObject
@property (nonatomic, copy) NSString * _Nullable bookID;
@property (nonatomic, copy) NSString * _Nullable index;
@property (nonatomic, strong) NSNumber * _Nullable score;
@property (nonatomic, copy) NSString * _Nullable bookThumbnailURL;
@property (nonatomic, copy) NSString * _Nullable bookTitle;
@property (nonatomic, copy) NSString * _Nullable bookDescription;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable searchCount;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVAudioPlayer;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK34HDGoogleTextToSpeechServiceManager")
@interface HDGoogleTextToSpeechServiceManager : NSObject <AVAudioPlayerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HDGoogleTextToSpeechServiceManager * _Nonnull shared;)
+ (HDGoogleTextToSpeechServiceManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull voiceTypeIdentifer;
@property (nonatomic, copy) NSString * _Nonnull googleAPIKey;
@property (nonatomic, copy) NSString * _Nonnull languageCode;
@property (nonatomic) BOOL isMaleVoice;
@property (nonatomic) BOOL isCompletePlaying;
- (void)speakWithText:(NSString * _Nonnull)text textlanguageCode:(NSString * _Nullable)textlanguageCode completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)stopPlayer;
- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer * _Nonnull)player successfully:(BOOL)flag;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface HDGoogleTextToSpeechServiceManager (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)fetchSupportedVoicesWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK27HDGoogleTranslationLanguage")
@interface HDGoogleTranslationLanguage : NSObject
@property (nonatomic, copy) NSString * _Nullable code;
@property (nonatomic, copy) NSString * _Nullable name;
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code name:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK26HDGoogleTranslationManager")
@interface HDGoogleTranslationManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HDGoogleTranslationManager * _Nonnull shared;)
+ (HDGoogleTranslationManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull googleAPIKey;
@property (nonatomic, copy) NSArray<HDGoogleTranslationLanguage *> * _Nonnull supportedLanguages;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)detectLanguageForText:(NSString * _Nonnull)text completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)fetchSupportedLanguagesWithCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (void)translateWithTextToTranslate:(NSString * _Nonnull)textToTranslate sourceLanguageCode:(NSString * _Nonnull)sourceLanguageCode targetLanguageCode:(NSString * _Nonnull)targetLanguageCode completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20HDKitabooFontManager")
@interface HDKitabooFontManager : NSObject
+ (HDKitabooFontManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setFontNameWithFontName:(NSString * _Nonnull)fontName;
+ (NSString * _Nonnull)getFontName SWIFT_WARN_UNUSED_RESULT;
- (void)registerFontWithFileNameString:(NSString * _Nullable)fileNameString bundle:(NSBundle * _Nullable)bundle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK28HDKitabooHLSServiceInterface")
@interface HDKitabooHLSServiceInterface : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)baseURLString clientID:(NSString * _Nonnull)clientID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)microServicesBaseUrl clientID:(NSString * _Nonnull)clientID enableCDNCookies:(BOOL)enable OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)baseURLString microServicesBaseUrl:(NSString * _Nonnull)microServicesBaseUrl clientID:(NSString * _Nonnull)clientID enableCDNCookies:(BOOL)enable IsKitabooContentServer:(BOOL)kitabooContentServer OBJC_DESIGNATED_INITIALIZER;
/// This method is called to fetch HLS book download URL.
/// - parameter userToken : userToken Current user’s userToken.
/// - parameter bookId : bookId for which url will be fetched.
/// - parameter timeStamp : timestamp
/// - parameter isHLSAudio : A value which will indicate that downloaded url is an audio or video type.
/// - parameter onlineStreaming : A parameter which will decide that fetched url meta data should be downloaded on specific path or not. For online streaming no meta data will  be downloaded And for offline streaming all the metadata will be downloaded on provided path.
/// - parameter downloadablePath : A path where all the meta data of HLS streaming URL will be downloaded.
/// - parameter successHandler : Handler which gets executed when get success in the response.
/// - parameter failureHandler : Handler which gets executed when get failure in the response.
- (void)fetchHLSMediaBookDownloadURL:(NSString * _Nonnull)userToken bookId:(NSNumber * _Nonnull)bookId timeStamp:(NSNumber * _Nonnull)timeStamp isHLSOnlineStreaming:(BOOL)onlineStreaming successHandler:(void (^ _Nonnull)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nullable))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)fetchHLSM3U8URLs:(NSString * _Nonnull)hlsBaseURL isHLSAudio:(BOOL)isHLSAudio hlsMetaDataDownloadablePath:(NSString * _Nullable)downloadablePath withAudioThumbnailURL:(NSString * _Nullable)thumbnailURL successHandler:(void (^ _Nonnull)(NSArray<NSURL *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
@end








/// A class to handle the themes for Media Book all UI Components.
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK25HDKitabooMediaBookThemeVO")
@interface HDKitabooMediaBookThemeVO : NSObject
/// Theme parameters for Media Top Panel.
@property (nonatomic, strong) UIColor * _Nullable media_toppanel_background;
@property (nonatomic, strong) UIColor * _Nullable media_toppanel_icons_color;
@property (nonatomic, strong) UIColor * _Nullable media_toppanel_bookTitle_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_toppanel_bottom_line;
/// Theme parameters for Media Side Panel.
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_background;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_tab_background;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_tab_border;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_tab_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_tab_border;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_background;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_title_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_Chapter_Time_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_unselected_chapter_title_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_description_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_time_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_icons_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_delete_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_divider_color;
/// Theme parameters for Media Book Cover.
@property (nonatomic, strong) UIColor * _Nullable media_audioBookCover_background_color;
@property (nonatomic, strong) UIColor * _Nullable media_audioBookCover_shadow_color;
/// Theme parameters for Media Book Player View.
@property (nonatomic, strong) UIColor * _Nullable media_playerView_slider_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_chapter_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_slider_filled_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_default_timetext_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_current_timetext_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_chapter_title_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_chapter_count_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_navigation_arrow_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_disabled_navigation_arrow_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_selected_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_selected_icon_background;
/// Theme parameters for Media Book PopOver/Alerts/Action Sheets.
@property (nonatomic, strong) UIColor * _Nullable media_popup_background;
@property (nonatomic, strong) UIColor * _Nullable media_popup_title_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_hint_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_input_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_time_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_speed_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_selected_speed_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_action_button_main_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_action_button_cancel_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_action_button_delete_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_border;
@property (nonatomic, strong) UIColor * _Nullable media_popup_line_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_check_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_action_button_main_background_color;
@property (nonatomic, strong) UIColor * _Nullable media_action_button_cancel_border_color;
/// Theme parameters for Media Video book player.
@property (nonatomic, strong) UIColor * _Nullable video_player_background;
@property (nonatomic, strong) UIColor * _Nullable video_player_icon_color;
@property (nonatomic, strong) UIColor * _Nullable video_player_text_color;
@property (nonatomic, strong) UIColor * _Nullable video_player_Play_icon_color;
@property (nonatomic, strong) UIColor * _Nullable video_player_Play_icon_overlay_background;
/// Initializes the HDKitabooMediaBookThemeVO object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// To take the theme file from the provided theme json path.
/// <ul>
///   <li>
///     : themeJsonPath : The theme Json Path.
///   </li>
/// </ul>
- (void)updateThemeFromJsonPath:(NSString * _Nullable)themeJsonPath;
@end

@protocol HDKitabooMediaPopOverControllerDelegate;
@class HDKitabooMediaPopOverModel;

/// An object that manages the UI and handling for Media PopOver View.
/// A HDKitabooMediaPopOverController object manages the UI and provides call backs for multiple actions performed.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK31HDKitabooMediaPopOverController")
@interface HDKitabooMediaPopOverController : UIViewController
/// The object that acts as the delegate of the HDKitabooMediaPopOverController.
/// The delegate must adopt the HDKitabooMediaPopOverControllerDelegate protocol.
@property (nonatomic, strong) id <HDKitabooMediaPopOverControllerDelegate> _Nullable delegate;
/// Initializes an allocated HDKitabooMediaPopOverController object.
/// \param mediaPopOverModel mediaPopOverModel is the HDKitabooMediaPopOverModel instance.
///
- (nonnull instancetype)init:(HDKitabooMediaPopOverModel * _Nonnull)mediaPopOverModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface HDKitabooMediaPopOverController (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end

@class UIGestureRecognizer;
@class UITouch;

@interface HDKitabooMediaPopOverController (SWIFT_EXTENSION(Kitaboo_Reader_SDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end






/// The delegate of a HDKitabooMediaPopOverController object must adopt the HDKitabooMediaPopOverControllerDelegate protocol.
/// HDKitabooMediaPopOverControllerDelegate Protocol used to handle all the callbacks of HDKitabooMediaPopOverController Class.The HDKitabooMediaPopOverControllerDelegate protocol defines methods to provide callback when user perform any action on HDKitabooMediaPopOverController.
/// When configuring the HDKitabooMediaPopOverController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK39HDKitabooMediaPopOverControllerDelegate_")
@protocol HDKitabooMediaPopOverControllerDelegate
@optional
/// Tell the delegate that the HDKitabooMediaPopOverController any Item is tapped.
/// This callback will be initialised when the user taps on any item of HDKitabooMediaPopOverController. HDKitabooMediaPopOverController will be dismissed after this callback.
- (void)didTapOnItem:(NSString * _Nonnull)itemTitle;
/// Tell the delegate that the HDKitabooMediaPopOverController’s Switch control button state(ON/OFF) has been changed.
/// This callback will only be initialised when the user is using Default Customised Controller where Switch control button is available and user is changing it’s state.
- (void)didChangeSwitchState:(BOOL)isOn;
/// Tell the delegate that the HDKitabooMediaPopOverController is being dismissed.
/// This callback will be initialised when the user dismisses the view by tapping outside it.
- (void)didTapOnCancelItem;
@end

@class UIFont;

/// An Object that will contain additional information for HDKitabooMediaPopOverController.
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK26HDKitabooMediaPopOverModel")
@interface HDKitabooMediaPopOverModel : NSObject
/// HDKitabooMediaPopOverController header Title.
/// <ul>
///   <li>
///     If a user is not setting this value, By default no Header will be shown on Pop Over.
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable popOverTitle;
/// Total number of items in HDKitabooMediaPopOverController view.
@property (nonatomic, strong) NSNumber * _Nullable numberOfItems;
/// To set HDKitabooMediaPopOverController all items text.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable itemsTitles;
/// To set HDKitabooMediaPopOverController all items font.
@property (nonatomic, strong) UIFont * _Nullable itemFont;
/// To set  selected item Text.
@property (nonatomic, copy) NSString * _Nullable selectedItem;
/// To set color to selected item font.
@property (nonatomic, strong) UIColor * _Nullable selectedItemColor;
/// To set HDKitabooMediaPopOverController all custom items text.
/// <ul>
///   <li>
///     If enableCustomController value is true, along with default items, additional items will also be shown on pop over.  And customItemTitles will set text to these additional items.
///   </li>
/// </ul>
@property (nonatomic, copy) NSArray<NSString *> * _Nullable customItemTitles;
/// To set HDKitabooMediaPopOverController all custom items font.
/// <ul>
///   <li>
///     If enableCustomController value is true, along with default items, additional items will also be shown on pop over.  And customItemFonts will set font to these additional items.
///   </li>
/// </ul>
@property (nonatomic, strong) UIFont * _Nullable customItemFont;
/// To set HDKitabooMediaPopOverController source View. If source View is not being sat, in that case pop over will be shown in the middle of it’s super view.
@property (nonatomic, strong) UIView * _Nullable popOverSourceView;
/// To set enable/Disable of switch Button.
/// <ul>
///   <li>
///     If enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header. And enableSwitchControl will enable/Disable the Switch Button. The Defult Value will be <code>true</code> for  this.
///   </li>
/// </ul>
@property (nonatomic) BOOL enableSwitchControl;
/// To set state of switch Button.
/// <ul>
///   <li>
///     If enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header. And switchState will set the state of Switch Button i.e. ON/OFF.
///   </li>
/// </ul>
@property (nonatomic) BOOL switchState;
/// To set tint color to switch Button.
/// <ul>
///   <li>
///     If enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header. And switchTintColor will set the tint color to the Switch.
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable switchTintColor;
/// To set text to Switch Label.
/// <ul>
///   <li>
///     If enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header. And switchLabelText will set the text to the Switch Label.
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable switchLabelText;
/// To set font to Switch Label.
/// <ul>
///   <li>
///     If enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header. And switchLabelFont will set the font to the Switch Label.
///   </li>
/// </ul>
@property (nonatomic, strong) UIFont * _Nullable switchLabelFont;
/// To enable the default Media PopOver controller with Customise UI. When user set enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header.
/// The Default value of enableDefaultCustomisedController is false .
@property (nonatomic) BOOL enableDefaultCustomisedController;
/// To enable the custom Media PopOver controller. When user set enableCustomController value to true a customised Media PopOver controller will be shown to user.
/// The Default value of enableCustomController is false .
@property (nonatomic) BOOL enableCustomController;
/// To change the arrow direction to right of custom Media PopOver controller. When user set enableCustomControllerRightArrow value to true then the pop over arrow direction will be right.
/// The Default value of enableCustomControllerRightArrow is false .
@property (nonatomic) BOOL enableCustomControllerRightArrow;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HDKitabooSleepTimerControllerDelegate;
enum SleepAction : NSInteger;

/// An object that manages the UI for Sleep Timer View
/// A HDKitabooSleepTimerController object manages the UI and provides call backs for multiple actions performed.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK29HDKitabooSleepTimerController")
@interface HDKitabooSleepTimerController : UIViewController
/// The object that acts as the delegate of the HDKitabooSleepTimerController.
/// The delegate must adopt the HDKitabooSleepTimerControllerDelegate protocol.
@property (nonatomic, weak) id <HDKitabooSleepTimerControllerDelegate> _Nullable delegate;
/// To set the theme color to various UI components of the HDKitabooSleepTimerController
/// This method should be called to set the color to various UI components of the HDKitabooSleepTimerController. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To set the source view to the HDKitabooSleepTimerController
/// This method should be called to set the source view to present the HDKitabooSleepTimerController.
/// \param view view is the UIView object.
///
- (void)setSourceViewForSleepTimerViewController:(UIView * _Nonnull)view;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)updateSelectedSleepAction:(enum SleepAction)selectedSleepAction;
- (void)updateCustomSelectedTimeWithTime:(NSTimeInterval)time;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The delegate of a HDKitabooSleepTimerController object must adopt the HDKitabooSleepTimerControllerDelegate protocol.
/// HDKitabooSleepTimerControllerDelegate Protocol used to handle all the callbacks of HDKitabooSleepTimerController Class.The HDKitabooSleepTimerControllerDelegate protocol defines methods to provide callback when user perform any action on HDKitabooSleepTimerController.
/// When configuring the HDKitabooSleepTimerController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK37HDKitabooSleepTimerControllerDelegate_")
@protocol HDKitabooSleepTimerControllerDelegate
@optional
/// Delegate method called when Cancel alert action button is tapped.
/// This method will be called when user tap on the Cancel alert action button.
- (void)didRemoveSleepTimerView;
/// Delegate method called when action button with sleep time is tapped.
/// This method will be called when user tap on the action button with sleep time.
/// \param selectedSleepTime selectedSleepTime is the time shown on the action which is tapped.
///
/// \param selectedSleepAction selectedSleepAction is the SleepAction of the alert action button which is  tapped.
///
- (void)didSetAudioSleepTimerWithSelectedSleepTime:(NSTimeInterval)selectedSleepTime selectedSleepAction:(enum SleepAction)selectedSleepAction;
/// Delegate method called when Sleep Timer Off action button is tapped.
/// This method will be called when user tap on the Sleep Timer Off action button.
- (void)didSetAudioSleepTimerOff;
@end

@protocol HDMediaBookBookmarkControllerDelegate;

/// An object that manages the UI for Bookmark View.
/// A HDMediaBookBookmarkController object manages the UI and provides call backs when the bookmark is updated.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK29HDMediaBookBookmarkController")
@interface HDMediaBookBookmarkController : UIViewController
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// The object that acts as the delegate of the HDMediaBookBookmarkController.
/// The delegate must adopt the HDMediaBookBookmarkControllerDelegate protocol.
@property (nonatomic, weak) id <HDMediaBookBookmarkControllerDelegate> _Nullable delegate;
/// Initializes the HDMediaBookBookmarkController object.
/// This method should be called to initialize the HDMediaBookBookmarkController object to add the new bookmark.
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel instance.
///
/// \param chapterTitle chapterTitle is Book Chapter Title.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
/// Initializes the HDMediaBookBookmarkController object
/// This method should be called to initialize the HDMediaBookBookmarkController object to delete the existing bookmark.
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel instance.
///
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.
///
/// \param chapterTitle chapterTitle is Book Chapter Title.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel bookmarkVO:(SDKBookmarkVO * _Nonnull)bookmarkVO OBJC_DESIGNATED_INITIALIZER;
/// To set the theme color to various UI components of the HDMediaBookBookmarkController
/// This method should be called to set the color to various UI components of the HDMediaBookBookmarkController. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// The delegate of a HDMediaBookBookmarkController object must adopt the HDMediaBookBookmarkControllerDelegate protocol.
/// HDMediaBookBookmarkControllerDelegate Protocol used to handle all the callbacks of HDMediaBookBookmarkController Class.The HDMediaBookBookmarkControllerDelegate protocol defines methods to provide callback when user perform any action on HDMediaBookBookmarkController.
/// When configuring the HDMediaBookBookmarkController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK37HDMediaBookBookmarkControllerDelegate_")
@protocol HDMediaBookBookmarkControllerDelegate
@optional
/// Delegate method when tapped on add bookmark button
/// This method will be called when user tap on the add bookmark button
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.It is used to add/update the bookmark in database
///
- (void)didTapOnAddBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// Delegate method when tapped on delete bookmark button
/// This method will be called when user tap on the delete bookmark button
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.It is used to delete the bookmark in database
///
- (void)didTapOnDeleteBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// Delegate method when tapped on cancel bookmark button
/// This method will be called when user tap on the cancel bookmark button
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.
///
- (void)didTapOnCancelBookmark:(SDKBookmarkVO * _Nullable)bookmarkVO;
@end


/// An Object that will contain all the information about a chapter of Media book.
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20HDMediaBookChapterVO")
@interface HDMediaBookChapterVO : NSObject
/// To get Media Book chapter Title.
@property (nonatomic, copy) NSString * _Nullable chapterTitle;
/// To get Media Book chapter Description.
@property (nonatomic, copy) NSString * _Nullable chapterDescription;
/// To get Media Book chapter Seek Time.
@property (nonatomic) NSInteger chapterSeekTime;
/// To get Media Book chapter Thumbnail URL.
@property (nonatomic, copy) NSString * _Nullable chapterThumbnailURL;
/// To get Media Book chapter Thumbnail Path.
@property (nonatomic, copy) NSString * _Nullable chapterThumbnailPath;
/// To get Media Book chapter URL.
@property (nonatomic, copy) NSString * _Nullable url;
/// To get Media Book chapter URL last Path Component.
@property (nonatomic, copy) NSString * _Nullable urlLastPathComponent;
/// Name of the current asset.
@property (nonatomic, copy) NSString * _Nullable assetM3U8Name;
/// To get Media Book chapter subchapter Thumbnail Path.
@property (nonatomic, copy) NSArray<HDMediaBookChapterVO *> * _Nullable children;
/// To get Media Book Chapter Start Time.
@property (nonatomic) NSInteger chapterStartTimeForBook;
/// To get Media Book Chapter Total Time.
@property (nonatomic) NSInteger chapterTotalTime;
@property (nonatomic) NSInteger avAssetTotalTime;
@property (nonatomic, copy) NSData * _Nullable hlsChpaterKeyData;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HDMediaBookTranscriptVO;
@class HDMediaBookTimeIndexVO;

/// An Object that will contain additional infromation of a Media Book.
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16HDMediaBookModel")
@interface HDMediaBookModel : NSObject
/// To get Media Book Id.
@property (nonatomic, copy) NSString * _Nullable mediaBookId;
/// To get Media Book Path.
@property (nonatomic, copy) NSString * _Nullable mediaBookPath;
/// To get Media Book Title.
@property (nonatomic, copy) NSString * _Nullable mediaBookTitle;
/// To get media Narration Speed Rate.
@property (nonatomic) float mediaNarrationSpeedRate;
/// To get Media Book thumbnail URL.
@property (nonatomic, copy) NSString * _Nullable thumbnailURL;
/// To get Media Book thumbnail Path.
@property (nonatomic, copy) NSString * _Nullable thumbnailPath;
/// To get media book current state.
@property (nonatomic) enum CurrentState mediaCurrentState;
/// To get media book total duration time.
@property (nonatomic) NSInteger totalTime;
/// To get media book current time.
@property (nonatomic) NSInteger currentTime;
/// The current playing chapter of Book.
@property (nonatomic, strong) HDMediaBookChapterVO * _Nullable currentChapter;
/// An Array of HDMediaBookChapterVO, which is used to get the total chapters in media book.
@property (nonatomic, copy) NSArray<HDMediaBookChapterVO *> * _Nullable chapters;
/// An Array of HDMediaBookTranscriptVO, which is used to get the total transcripts in media book.
@property (nonatomic, copy) NSArray<HDMediaBookTranscriptVO *> * _Nullable transcripts;
/// An Array of HDMediaBookTimeIndexVO, which is used to get the total timeIndex in media book.
@property (nonatomic, copy) NSArray<HDMediaBookTimeIndexVO *> * _Nullable timeIndexVOArray;
/// To get media Book Encryption Type.
@property (nonatomic, copy) NSString * _Nullable mediaBookEncryptionType;
/// To get media Book ISBN.
@property (nonatomic, copy) NSString * _Nullable mediaBookISBN;
/// To get all the supported audio languages for media Book.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable mediaSupportedAudios;
/// To get all the supported subtitle languages for media Book.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable mediaSupportedSubtitles;
/// To get all the supported subtitle languages for media Book.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable mediaSupportedResolutions;
/// To get additionalInfo for media Book.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable mediaBookAdditonalInfo;
/// To get Media Book Author.
@property (nonatomic, copy) NSString * _Nullable author;
/// To get Media Book Readby.
@property (nonatomic, copy) NSString * _Nullable readBy;
/// To get Media Book Publisher.
@property (nonatomic, copy) NSString * _Nullable publisher;
/// To get Media Book In Language.
@property (nonatomic, copy) NSString * _Nullable inLanguage;
/// To get Media Book Accessibility Summary.
@property (nonatomic, copy) NSString * _Nullable accessibilitySummary;
/// To Check Multi Audio Package.
@property (nonatomic) BOOL multiAudioPackage;
/// To Check Multi Level Chapter.
@property (nonatomic) BOOL multiLevelChapter;
/// To get Package Duration.
@property (nonatomic) NSInteger mediaDuration;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable cookies;
@property (nonatomic, copy) NSArray<HDMediaBookChapterVO *> * _Nonnull mediaBookAllChaptersArray;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HDMediaBookNarrationSpeedControllerDelegate;

/// An object that manages the UI for Narration Speed View.
/// A HDMediaBookNarrationSpeedController object manages the UI and provides call backs when the narration speed is updated.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK35HDMediaBookNarrationSpeedController")
@interface HDMediaBookNarrationSpeedController : UIViewController
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// The object that acts as the delegate of the HDMediaBookNarrationSpeedController.
/// The delegate must adopt the HDMediaBookNarrationSpeedControllerDelegate protocol.
@property (nonatomic, weak) id <HDMediaBookNarrationSpeedControllerDelegate> _Nullable delegate;
/// Initializes an allocated HDMediaBookNarrationSpeedController object.
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// To set the theme color to various UI components of the HDMediaBookBookmarkController
/// This method should be called to set the color to various UI components of the HDMediaBookBookmarkController. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To set the speed options of the HDMediaBookBookmarkController
/// This method should be called to set the  speed options of the HDMediaBookBookmarkController. The options will used for setting narratio speed options. If this method is not called, then the default optios will be used.
/// \param array array is the NSArray instance.If this object is not set, then the default optios will be used
///
- (void)setSpeedOptions:(NSArray * _Nonnull)array;
/// To set the source view to the NarrationSpeedController
/// This method should be called to set the source view to present the NarrationSpeedController.If this method is not called then by default the NarrationSpeedController will be displayed in the center of the view.
/// \param view view is the UIView object.
///
- (void)setSourceViewForNarrationSpeedController:(UIView * _Nonnull)view;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// The delegate of a HDMediaBookNarrationSpeedController object must adopt the HDMediaBookNarrationSpeedControllerDelegate protocol.
/// HDMediaBookNarrationSpeedControllerDelegate Protocol used to handle all the callbacks of HDMediaBookNarrationSpeedController Class.The HDMediaBookNarrationSpeedControllerDelegate protocol defines methods to provide callback when user perform any action on HDMediaBookNarrationSpeedController.
/// When configuring the HDMediaBookNarrationSpeedController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK43HDMediaBookNarrationSpeedControllerDelegate_")
@protocol HDMediaBookNarrationSpeedControllerDelegate
@optional
/// Delegate method to update change in reading speed of the audio
/// This method will be called when narration speed of the audio is being updated/changed.
/// \param mediaBookModel mediaBookModel is the instance of HDMediaBookModel.We can get the updated narration speed from audioNarrationSpeedRate from HDMediaBookModel object.
///
- (void)didNarrationSpeedValueChanges:(HDMediaBookModel * _Nullable)mediaBookModel;
/// Delegate method to update when cancel button is tapped
/// This method will be called when user tap on the cancel button
- (void)didTapOnCancel;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17HDMediaBookParser")
@interface HDMediaBookParser : NSObject
@property (nonatomic, copy) void (^ _Nullable bookParsingCompleted)(HDMediaBookModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable bookParsingFailed)(NSError * _Nonnull);
- (void)parseTOCTimeIndexJsonForAudio:(HDMediaBookModel * _Nonnull)mediaBookModel tocjsonPath:(NSString * _Nullable)tocjsonPath timeIndexPath:(NSString * _Nullable)timeIndexPath;
- (void)parseTOCTimeIndexJsonForVideo:(HDMediaBookModel * _Nonnull)mediaBookModel tocjsonPath:(NSString * _Nullable)tocjsonPath timeIndexPath:(NSString * _Nullable)timeIndexPath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HDMediaBookPlayerDelegate;
@class AVAssetResourceLoader;
@class AVAssetResourceLoadingRequest;

/// An object that manages the rendering of the media Book.
/// A HDMediaBookPlayer object enable to perform multiple actions on a media i,e play, pause and many more.
/// <ul>
///   <li>
///     SuperClass : UIView
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17HDMediaBookPlayer")
@interface HDMediaBookPlayer : UIView <AVAssetResourceLoaderDelegate>
/// The object that acts as the delegate of the HDMediaBookPlayer.
/// The delegate must adopt the HDMediaBookPlayerDelegate protocol.
@property (nonatomic, weak) id <HDMediaBookPlayerDelegate> _Nullable delegate;
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// To get the current selected subtitle/CC value for Media.
@property (nonatomic, readonly, copy) NSString * _Nullable currentSelectedSubtitle;
/// To get the current selected Audio value for Media.
@property (nonatomic, readonly, copy) NSString * _Nullable currentSelectedAudio;
/// To get the current selected Video quality value for Media.
@property (nonatomic, readonly, copy) NSString * _Nullable currentSelectedQuality SWIFT_AVAILABILITY(ios,introduced=11.0);
/// Initializes the HDMediaBookPlayer object
/// This method should be called to initialize the HDMediaBookPlayer object
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nonnull)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// To get the AVPlayerView which is necessary to display the Video
/// This method should be called to get the AVPlayerView which is necessary to display the Video
- (UIView * _Nonnull)getPlayerLayerView SWIFT_WARN_UNUSED_RESULT;
/// To resume the audio
/// This method should be called to resume the audio play
- (void)playWithChapter:(HDMediaBookChapterVO * _Nullable)chapterModel;
/// To resume the audio from specific time
/// This method should be called to resume the audio play from specific time period
/// \param value value is the Int value.It should be time period in seconds
///
- (void)playToSeekTime:(NSInteger)value;
/// To stop the audio
/// This method should be called to stop the audio play
- (void)stop;
/// To pause the audio
/// This method should be called to pause the audio play
- (void)pause;
/// To set the reading of the audio
/// This method should be called to set the reading/narration speed of the audio.
/// \param isAudioMute isAudioMute is a boolean which enables to mute/unmute the audio.If the boolean is true, then audio will be muted and vice versa.
///
- (void)mute:(BOOL)isAudioMute;
/// To set the reading speed of the audio
/// This method should be called set the reading speed of the audio play
/// \param mediaBookModel mediaBookModel is the instance of HDMediaBookModel.
///
- (void)setReadingSpeed:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// To forward the audio
/// This method should be called to forward the audio play
/// \param time time is the Int value which represents the number of seconds to be forwarded.
///
- (void)playForwardWithTime:(float)time;
/// To rewind the audio
/// This method should be called to rewind the audio play
/// \param time time is the Int value which represents the number of seconds to be rewinded
///
- (void)playBackwardWithTime:(float)time;
/// To play the audio from specific chapter
/// This method should be called to navigate between chapter i.e to play the audio from the specific chapter
- (void)navigateToChapter:(HDMediaBookChapterVO * _Nonnull)chapterVO withSeekTime:(NSInteger)seekTime;
/// To play the audio from specific time
/// This method should be called to navigate between bookmark time  i.e to play the audio from the specific bookmark time
- (void)navigateToBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To get the current playing time of the audio
/// This method should be called to get the current playing time of the audio
- (NSInteger)getSeekTime SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end





@interface HDMediaBookPlayer (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
/// To change the media audio Language.
/// This method should be called if the user wants  to change media audio Language.
/// \param audioType audioType, Name of Audio Language.
///
- (void)changeMediaLanguage:(NSString * _Nonnull)audioType;
/// To change the media Subtitle Language.
/// This method should be called if the user wants  to change media Subtitle Language.
/// \param subtitle subtitle, Name of subtitle type.
///
- (void)changeMediaSubtitle:(NSString * _Nullable)subtitle;
/// To change the Video Quality.
/// This method should be called if the user wants to change Video Quality.
/// \param option option, Video Quality value.
///
- (void)changeVideoQuality:(NSString * _Nonnull)option;
@end


/// The delegate of a HDMediaBookPlayer object must adopt the HDMediaBookPlayerDelegate protocol.
/// HDMediaBookPlayerDelegate Protocol used to handle all the callbacks of HDMediaBookPlayer Class.The HDMediaBookPlayerDelegate protocol defines methods to provide callback when user perform any action on HDMediaBookPlayer.
/// When configuring the HDMediaBookPlayer object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK25HDMediaBookPlayerDelegate_")
@protocol HDMediaBookPlayerDelegate
@optional
/// Delegate method to update the audio playing time
/// This method will be called to when audio is in playing mode with continuous update of the current time out of total time
/// \param currentTime currentTime is the Int value.It returns the actual playing time in seconds
///
/// \param totalTime totalTime is the Int value.It returns the total time in seconds
///
- (void)playerPlayingWithCurrentTime:(NSInteger)currentTime totalTime:(NSInteger)totalTime;
/// Delegate method to update completion of audio play
/// This method will be called when the audio has finished the playing
- (void)playerDidFinishPlaying;
/// Delegate method to update the error occured to play
/// This method will be called when the audio has failed to play
/// \param error error is the Error instance.It returns the cause to fail the audio to be played
///
- (void)playerFailedToPlayWithError:(NSError * _Nonnull)error;
/// Delegate method to update the current state of the audio
/// This method will be called  when audio has changed the current state from one form to other form
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.We can get the current state of the audio from mediaCurrentState variable from mediaBookModel instance
///
- (void)playerDidChangeStateWithMediaBookModel:(HDMediaBookModel * _Nonnull)mediaBookModel;
@end

@protocol HDMediaBookTOCControllerDelegate;
enum MediaBookTOCFilter : NSInteger;

/// An object that manages the UI of TOC for Media Book
/// A HDMediaBookTOCController object manages the UI and provides call backs for multiple actions performed on TOC for Chapter/Transcript/Bookmark segment/view
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK24HDMediaBookTOCController")
@interface HDMediaBookTOCController : UIViewController <UITableViewDataSource, UITableViewDelegate>
/// The object that acts as the delegate of the HDMediaBookTOCController.
/// The delegate must adopt the HDMediaBookTOCControllerDelegate protocol.
@property (nonatomic, weak) id <HDMediaBookTOCControllerDelegate> _Nullable delegate;
/// An Object to get TOC controller section mode type whether it is CHAPTER, TRANSCRIPT or BOOKMARK.
@property (nonatomic) enum MediaBookTOCFilter selectedMode;
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// Initializes the HDAudioBookTOCViewController object
/// This method should be called to initialize the HDAudioBookTOCViewController object
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nonnull)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// To set the data to specific selected segment/view i.e, Chapter/Transcript/Bookmark
/// This method should be called every time when user receive the callback for selected segment/view i.e, Chapter/Transcript/Bookmark to set the relative data of the selected segment/view.
/// \param data data is the NSArray instance.When user select Chapter segment/view then it should be an array of HDMediaBookChapterVO.When user select Transcript segment/view then it should be an array of HDMediaBookTranscriptVO.When user select Bookmark segment/view then it should be an array of SDKBookmarkVO.
///
- (void)setData:(NSArray * _Nullable)data;
/// To set the theme color to various UI components of the HDMediaBookTOCController
/// This method should be called to set the color to various UI components of the HDMediaBookTOCController. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To hide/unhide the Transcript segment in TOC.
/// This method should be called to hide/unhide the Transcript segment from TOC.If this method is not called then by default the Transcript segment will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the transcript segment in TOC will be hidden and vice versa.
///
- (void)hideTranscript:(BOOL)hide;
/// To hide/unhide the Bookmark segment in TOC.
/// This method should be called to hide/unhide the Bookmark segment from TOC.If this method is not called then by default the Bookmark segment will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the Bookmark segment in TOC will be hidden and vice versa.
///
- (void)hideBookmark:(BOOL)hide;
/// To update the table view cell for the current playing chapter of the AudioBook
/// This method should be called to update the UI the table view cell for the current playing chapter of the AudioBook i.e, to change the background color of the tableViewCell and play/pause icon.
/// \param enable chapterVO is the HDMediaBookChapterVO instance.This is instance of the current playing chapter.
///
- (void)updateTOCForCurrentChapter:(HDMediaBookChapterVO * _Nullable)chapterVO;
/// To update the play/pause button title according to the current state of the AudioBook
/// This method should be called to update the play/pause button title according to the current state of the AudioBook.
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel object
///
- (void)setPlayPauseState:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// To reload the data of the selected segment
/// This method should be called to reload the data of the selected segment
- (void)refresh;
/// To reload the data of the bookmark segment.
/// This method should be called to reload the data of the bookmark segment.
- (void)reloadBookmarkSection;
- (void)actionForButtonWithSender:(UIButton * _Nonnull)sender;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)viewDidDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end




/// The delegate of a HDMediaBookTOCController object must adopt the HDMediaBookTOCControllerDelegate protocol.
/// HDMediaBookTOCControllerDelegate Protocol used to handle all the callbacks of HDMediaBookTOCController Class.The HDMediaBookTOCControllerDelegate protocol defines methods to provide callback when user perform any action on HDMediaBookTOCController.
/// When configuring the HDMediaBookTOCController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK32HDMediaBookTOCControllerDelegate_")
@protocol HDMediaBookTOCControllerDelegate
@optional
/// Delegate method when user tap on chapter segment/view of the TOC
/// This method will be called when the user taps on the chapter segment/view.It allows the user to set the data related to the chapters of the AudioBook.
- (void)didTapOnChapterSegment;
/// Delegate method when user tap on Transcript segment/view of the TOC
/// This method will be called when the user taps on the Transcript segment.It allows the user to set the data related to the Transcript of the AudioBook.
- (void)didTapOnTranscriptSegment;
/// Delegate method when user tap on Bookmark segment/view of the TOC
/// This method will be called when the user taps on the Bookmark segment.It allows the user to set the data related to the Bookmark of the AudioBook.
- (void)didTapOnBookmarkSegment;
/// Delegate method when user tap on specific table view cell in the chapter segment/view
/// This method will be called when user tap on specific table view cell in the chapter segment/view
/// \param chapterVO chapterVO is the HDMediaBookChapterVO instance.This instance contains the details related to the selected chapter
///
- (void)didTapOnChapter:(HDMediaBookChapterVO * _Nonnull)chapterVO;
/// Delegate method when user tap on specific table view cell in the transcript segment/view
/// This method will be called when user tap on specific table view cell in the transcript segment/view
/// \param transcriptVO transcriptVO is the HDMediaBookTranscriptVO instance.This instance contains the details related to the selected transcript
///
- (void)didTapOnTranscript:(HDMediaBookTranscriptVO * _Nonnull)transcriptVO;
/// Delegate method when user tap on specific table view cell in the bookmark segment/view
/// This method will be called when user tap on specific table view cell in the bookmark segment/view
/// \param audioBookParser bookmarkVO is the SDKBookmarkVO instance.This instance contains the details related to the selected bookmark
///
- (void)didTapOnBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// Delegate method when tapped on play/pause button on any specific tableViewCell of the chapter segment/view
/// This method will be called when user tap on play/pause button on any specific tableViewCell of the chapter segment/view
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (void)didTapOnChapterPlayPause:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// Delegate method when tapped on delete button on any specific table view cell of the Bookmark segment/view
/// This method will be called when user tap on delete button on any specific table view cell of the Bookmark segment
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.
///
- (void)didTapOnBookmarkDelete:(SDKBookmarkVO * _Nonnull)bookmarkVO;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK27HDMediaBookTOCTableViewCell")
@interface HDMediaBookTOCTableViewCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)layoutSubviews;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22HDMediaBookTimeIndexVO")
@interface HDMediaBookTimeIndexVO : NSObject
@property (nonatomic) NSInteger startTime;
@property (nonatomic) NSInteger endTime;
@property (nonatomic, copy) NSString * _Nullable folio;
@property (nonatomic, copy) NSString * _Nullable fileName;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable chapterTitle;
@property (nonatomic) NSInteger chapterTotalTime;
@property (nonatomic) NSInteger chapterContentIndex;
@property (nonatomic, strong) HDMediaBookTimeIndexVO * _Nullable parent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK23HDMediaBookTranscriptVO")
@interface HDMediaBookTranscriptVO : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21HDMultiLevelDataModel")
@interface HDMultiLevelDataModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("HDPDFCreator")
@interface HDPDFCreator : NSObject
- (nonnull instancetype)initWithHighlights:(NSArray * _Nonnull)highlights OBJC_DESIGNATED_INITIALIZER;
- (void)createPDFWithCompletion:(void (^ _Nonnull)(NSData * _Nonnull))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An Object that manage a view For Reflowable Layout Settings.
/// <ul>
///   <li>
///     The HDReflowableLayoutSettingController class defines a Layout for Reflowable Books where user can change the Background color, Theme color,Font Size, Reader Mode, Text Alignment,Brightness for the particular book.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK35HDReflowableLayoutSettingController")
@interface HDReflowableLayoutSettingController : UIViewController <UIGestureRecognizerDelegate, UIPickerViewDataSource, UIPickerViewDelegate>
/// <ul>
///   <li>
///     resetReaderSettingis a block that would be called when a user taps “Reset” button on reflowable setting view controller, Provide action that needs to be performed on tap of “Reset” button.
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable resetReaderSetting)(void);
/// fontFamilyDidChange is a block that would be called when a user taps on any font family from given drop down box on reflowable setting view controller, Provide action that needs to be performed on tap of that font family.
/// Returns The Selected Font of type String.
@property (nonatomic, copy) void (^ _Nullable fontFamilyDidChange)(NSString * _Nonnull);
/// <ul>
///   <li>
///     fontSizeDidChangeis a block that would be called when a user selects any option on slider on reflowable setting view controller, Provide action that needs to be performed on selecting option on slider.
///   </li>
/// </ul>
/// Returns The font size of type CGFloat.
@property (nonatomic, copy) void (^ _Nullable fontSizeDidChange)(CGFloat);
/// <ul>
///   <li>
///     didEnablePaginationis a block that would be called when a user taps on “Scroll Mode ON/OFF” switch on reflowable setting view controller, Provide action that needs to be performed on tap of “Scroll Mode ON/OFF” switch.
///   </li>
/// </ul>
/// Returns A BOOL value.
@property (nonatomic, copy) void (^ _Nullable didEnablePagination)(BOOL);
/// <ul>
///   <li>
///     didChangeReaderMode is a block that would be called when a user taps any mode on reflowable setting view controller, Provide action that needs to be performed on tap of that mode.
///   </li>
/// </ul>
/// Returns The mode type of Type Int.
@property (nonatomic, copy) void (^ _Nullable didChangeReaderMode)(NSInteger);
/// <ul>
///   <li>
///     didChangeTextAliginmentis a block that would be called when a user taps any text alignment on reflowable setting view controller, Provide action that needs to be performed on tap of that text alignment.
///   </li>
/// </ul>
/// Returns The text alignment of Type Int.
@property (nonatomic, copy) void (^ _Nullable didChangeTextAliginment)(NSInteger);
/// <ul>
///   <li>
///     didChangeLineSpacing is a block that would be called when a user taps any line spacing on a reflowable setting view controller, Provide action that needs to be performed on tap of that line spacing.
///   </li>
/// </ul>
/// Returns The line spacing of Type Int.
@property (nonatomic, copy) void (^ _Nullable didChangeLineSpacing)(NSInteger);
/// <ul>
///   <li>
///     didChangeMargin is a block that would be called when the user taps any margin on the reflowable setting view controller, Provide action that needs to be performed on tap of that margin.
///   </li>
/// </ul>
/// Returns The line spacing of Type Int.
@property (nonatomic, copy) void (^ _Nullable didChangeMargin)(NSInteger);
/// <ul>
///   <li>
///     willDismissController is a block that would be called when a user taps on outside of a reflowable setting to remove the view controller.
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable willDismissController)(void);
/// List of font families to apply on page text.
@property (nonatomic, strong) NSArray * _Nonnull fontFamilyArray;
@property (nonatomic, strong) UIColor * _Nonnull backgroundThemeColor;
@property (nonatomic, strong) UIColor * _Nullable borderColor;
@property (nonatomic, strong) UIColor * _Nullable themeColor;
@property (nonatomic, strong) UIColor * _Nonnull textColor;
@property (nonatomic, strong) UIColor * _Nullable titleTextColor;
@property (nonatomic, strong) UIColor * _Nullable buttonTitleColor;
@property (nonatomic, strong) UIColor * _Nullable buttonBorderColor;
@property (nonatomic, strong) UIColor * _Nullable selectedButtonTitleColor;
@property (nonatomic, strong) UIColor * _Nullable selectedButtonBorderColor;
@property (nonatomic, strong) UIColor * _Nullable resetButtonTitleColor;
@property (nonatomic, strong) UIColor * _Nullable sliderThumbColor;
@property (nonatomic, strong) UIColor * _Nullable sliderTrackTintColor;
@property (nonatomic, strong) UIColor * _Nullable scrollSwitchTintColor;
@property (nonatomic, strong) UIColor * _Nullable fontFamilyThemeColor;
@property (nonatomic, strong) UIColor * _Nullable separationLineColor;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// To enable font family view.
/// \param isEnable Bool value
///
- (void)enableFontFamilyView:(BOOL)isEnable;
/// To enable font size view.
/// \param isEnable Bool value
///
- (void)enableFontSizeView:(BOOL)isEnable;
/// To enable alignment view.
/// \param isEnable Bool value
///
- (void)enableAlignmentView:(BOOL)isEnable;
/// To enable line spacing view.
/// \param isEnable Bool value
///
- (void)enableLineSpacingView:(BOOL)isEnable;
/// To enable margin view.
/// \param isEnable Bool value
///
- (void)enableMarginView:(BOOL)isEnable;
/// To enable reader mode view.
/// \param isEnable Bool value
///
- (void)enableReaderModeView:(BOOL)isEnable;
/// To enable scroll mode view.
/// \param isEnable Bool value
///
- (void)enableScrollModeView:(BOOL)isEnable;
/// This method is used to set font to text available in layout.
/// \param fontName “fontName” is the value to create font for layout.
///
- (void)setCustomFontNameForLayoutWithFontName:(NSString * _Nonnull)fontName;
/// This method is used to  set background color to HDReflowableFontSettingViewController view.
/// \param color Color of type UIColor to set the background color.
///
- (void)setBackgroundColorForView:(UIColor * _Nonnull)color;
/// This method is used to  set Theme color to HDReflowableFontSettingViewController controls.
/// \param color Color of type UIColor to set the Theme color.
///
- (void)setThemeColorToView:(UIColor * _Nonnull)color;
/// This method is used to  set the list of available options for text alignment.
/// \param options Array of type NSArray to set the alignment options[LEFT_ALIGNMENT,CENTER_ALIGNMENT,RIGHT_ALIGNMENT,JUSTIFY_ALIGNMENT & DEFAULT_ALIGNMENT].
///
- (void)setTextAlignmentOptions:(NSArray * _Nonnull)options;
/// This method is used to  set the list of options for text linespacing.
/// \param options Array of type NSArray to set the text linespacing options[DEFAULT_LINESPACING,SMALL_LINESPACING,MEDIUM_LINESPACING & LARGE_LINESPACING].
///
- (void)setLineSpacingOptions:(NSArray * _Nonnull)options;
/// This method is used to  set the list of options for reader margin.
/// \param options Array of type NSArray to set the reader margin option[DEFAULT_MARGIN,SMALL_MARGIN,MEDIUM_MARGIN & LARGE_MARGIN]s.
///
- (void)setReaderMarginOptions:(NSArray * _Nonnull)options;
/// This method is used to  set the list of options for reader mode.
/// \param options Array of type NSArray to set the reader mode options[DAY_MODE,SEPIA_MODE,NIGHT_MODE & DEFAULT_MODE].
///
- (void)setReaderModeOptions:(NSArray * _Nonnull)options;
/// This method is used to set font size to text for whole Page of reflowable epub books.
/// \param currentFontSize currentFontSize is the value of changed font.
///
- (void)setFontSize:(NSInteger)currentFontSize;
/// This method used to enable/disable the pagination configuration for reflowable epub books.
/// @discussion Pagination, is the process of dividing a document into discrete pages, where page navigation direction is either from left to right or vertical scrolling.
/// <ul>
///   <li>
///     If enabled value is YES, page navigation direction will be left to right or in case of NO it will be vertical scrolling.
///   </li>
/// </ul>
/// \param enabled enabled is the boolean value which represents the pagination configuration.
///
- (void)setPaginationEnable:(BOOL)enabled;
/// This method used to set current Reader mode configuration for reflowable epub books.
/// @discussion  With the help of Reader mode Enable Feature user can change an appearance of Page to Day mode, Sepia mode or to night mode.
/// <ul>
///   <li>
///     Day Mode Uses a colour scheme that displays dark text on a light background.
///   </li>
///   <li>
///     Sepia Mode Is a reddish brown monochrome tint. When applied to a Page, it gives the Page a warm, antique feeling.
///   </li>
///   <li>
///     Night Mode Uses a colour scheme that displays light text on a dark background.
///   </li>
///   <li>
///     Default Mode uses a colour scheme that displays text & background as per book package details.
///   </li>
/// </ul>
/// \param modeType modeType is the ReaderModeType raw value which represents mode configuration
///
- (void)setReaderModeEnable:(NSInteger)modeType;
/// This method used to set text alignment configuration for reflowable epub books.
/// @discussion With the help of Text alignment Feature user can change alignment of text on a page using different text positioning.
/// <ul>
///   <li>
///     Left Alignment starts each new line of the document on the left-most margin.
///   </li>
///   <li>
///     Center Alignment positions and starts each new line/text block in the center/middle margin on the page.
///   </li>
///   <li>
///     Right Alignment starts each new line of the document on the right-most margin of the page.
///   </li>
///   <li>
///     Justify Alignment aligns text with right and left margins and tries to fill as much empty space as possible. It enables a straight margin on both of the page’s horizontal edges.
///   </li>
///   <li>
///     Default Alignment aligns text as per book package details.
///   </li>
/// </ul>
/// \param alignmentType alignmentType represents the current text alignment configuration.
///
- (void)setCurrentTextAlignment:(NSInteger)alignmentType;
/// This method used to set current font family configuration for reflowable epub books.
/// \param fontName fontName represents current font family configuration
///
- (void)setCurrentFontFamily:(NSString * _Nonnull)fontName;
/// This method used to set Line Spacing configuration for reflowable epub books.
/// <ul>
///   <li>
///     With the help of Line Spacing Feature user can change The Spacing between lines on a page.
///   </li>
///   <li>
///     Options- Default Line spacing, Small Line spacing,Medium Line spacing & Large Line spacing .
///   </li>
/// </ul>
/// \param lineSpacing lineSpacing represents the current line spacing configuration.
///
- (void)setCurrentLineSpacing:(NSInteger)lineSpacing;
/// This method used to set Margin configuration for reflowable epub books.
/// <ul>
///   <li>
///     With the help of margin Feature user can change the margin between text and border.
///   </li>
///   <li>
///     Options- Default Margin, Small Margin, Medium Margin & Large Margin.
///   </li>
/// </ul>
/// \param margin margin represents the current margin configuration.
///
- (void)setCurrentMargin:(NSInteger)margin;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIPickerView;

@interface HDReflowableLayoutSettingController (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
- (UIView * _Nonnull)pickerView:(UIPickerView * _Nonnull)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView * _Nullable)view SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("HDReflowablePageCountView")
@interface HDReflowablePageCountView : UIView
@property (nonatomic, readonly, strong) UILabel * _Nonnull chapterLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull dotLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull pageLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull readingTimeLeftLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setPageData:(NSString * _Nonnull)pageNumber;
- (void)setTimeLeftData:(NSString * _Nonnull)text;
- (void)setCustomFontFamily:(NSString * _Nonnull)fontName;
- (void)setViewColors:(UIColor * _Nonnull)textColor backgroundColor:(UIColor * _Nonnull)backgroundColor;
- (void)enableDotLabel:(BOOL)enable;
@end


SWIFT_CLASS_NAMED("HDReflowableSliderPopUpView")
@interface HDReflowableSliderPopUpView : UIView
@property (nonatomic, readonly, strong) UILabel * _Nonnull chapterLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull chapterNameLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull readingTimeLeftLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class ReflowableCustomSlider;
@class NSLayoutConstraint;
@class UIImage;

SWIFT_CLASS_NAMED("HDSliderBarView")
@interface HDSliderBarView : UIView
@property (nonatomic, strong) ReflowableCustomSlider * _Nonnull pageSlider;
@property (nonatomic, strong) NSLayoutConstraint * _Nullable sliderContainerVewHeight;
@property (nonatomic, readonly, strong) UIView * _Nonnull sliderContainerVew;
@property (nonatomic, readonly, strong) UILabel * _Nonnull percentageLabel;
@property (nonatomic, copy) void (^ _Nullable sliderValueChanged)(float);
@property (nonatomic, copy) void (^ _Nullable sliderMoves)(float);
- (nonnull instancetype)initWithVerticalSliderValue:(BOOL)enable OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)enableVerticalSlider:(BOOL)enable;
- (void)layoutSubviews;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)updatePercentage;
- (void)enableSliderThumbImage:(BOOL)enable;
- (void)setSliderThumbColour:(UIColor * _Nonnull)thumbColor maxTintColor:(UIColor * _Nonnull)maxColor minTintColor:(UIColor * _Nonnull)minTint;
- (void)setImageForSlider:(UIImage * _Nonnull)image withColour:(UIColor * _Nonnull)color;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class HDUserResizableTextView;

SWIFT_PROTOCOL_NAMED("HDUserResizableTextDelegate")
@protocol HDUserResizableTextDelegate <NSObject>
- (void)userResizableViewDidBeginEditing:(HDUserResizableTextView * _Nonnull)userResizableView;
- (void)userResizableViewDidEndEditing:(HDUserResizableTextView * _Nonnull)userResizableView;
- (void)userResizableViewDidValueChanged:(HDUserResizableTextView * _Nonnull)userResizableView;
- (BOOL)userResizableViewShouldBeginEditing:(HDUserResizableTextView * _Nonnull)userResizableView SWIFT_WARN_UNUSED_RESULT;
@end

@class UITextView;
@class UIEvent;

SWIFT_CLASS_NAMED("HDUserResizableTextView")
@interface HDUserResizableTextView : UIView <UITextViewDelegate>
@property (nonatomic, copy) NSString * _Nullable localID;
@property (nonatomic, readonly, strong) UIView * _Nullable border;
@property (nonatomic, strong) UIView * _Nullable contentView;
@property (nonatomic, weak) id <HDUserResizableTextDelegate> _Nullable delegate;
- (void)adjustFontSizeForTextViewWithTextView:(UITextView * _Nonnull)textView;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame withInset:(CGFloat)withInset OBJC_DESIGNATED_INITIALIZER;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)showEditingHandles;
- (void)hideEditingHandles;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)enterEditingMode;
@end

@protocol HDVideoBookPlayerViewControllerDelegate;
enum VideoPlayerViewStateUpdate : NSInteger;

/// An object that manages the UI of Video Player View
/// A HDVideoBookPlayerViewController object manages the UI and provides call backs for multiple actions performed
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK31HDVideoBookPlayerViewController")
@interface HDVideoBookPlayerViewController : UIViewController
/// The object that acts as the delegate of the HDVideoBookPlayerViewController.
/// The delegate must adopt the HDVideoBookPlayerViewControllerDelegate protocol.
@property (nonatomic, weak) id <HDVideoBookPlayerViewControllerDelegate> _Nullable delegate;
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// Initializes the HDVideoBookPlayerViewController object
/// This method should be called to initialize the HDVideoBookPlayerViewController object
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
/// \param videoPlayer UIView object where the video will be played/displayed.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel withVideoPlayer:(UIView * _Nonnull)videoPlayer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)bookmarkButtonTapped:(UIButton * _Nonnull)sender;
/// To set the video player view to full screen for Iphone.
- (void)setViewFullScreenForIphone;
/// To update the player view according to the state received
/// This method should be called to update the player view according to the state received.Set the state to kAudioBookUpdatePlayPauseState to update the play/pause button title according to the current state of the AudioBook.Set the state to kAudioBookUpdateReadingSpeed to update the text of the narration speed label.Set the state to kAudioBookUpdateCurrentTime to update the slider progress and time label text.
/// \param state state is an enum of  AudioBookStateUpdate
///
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel object
///
- (void)updatePlayerView:(enum VideoPlayerViewStateUpdate)state mediaBookModel:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// To update the chapter name and number for the current playing chapter of the AudioBook
/// This method should be called to update the chapter name and number for the current playing chapter of the AudioBook
/// \param enable chapterVO is the HDMediaBookChapterVO instance.This is instance of the current playing chapter.
///
- (void)setCurrentChapter:(HDMediaBookChapterVO * _Nullable)chapterVO;
/// To set the text color for the button title and selected narrated speed value
/// This method should be called to set the text color for apply button title and selected narrated speed value
/// \param color color is the UIColor instance.This is used to update the components apply button title and selected narrated speed value
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To hide/unhide the Bookmark
/// This method should be called to hide/unhide the Bookmark button.If this method is not called then by default the Bookmark button will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the Bookmark button will be hidden and vice versa.
///
- (void)hideBookmark:(BOOL)hide;
/// To disable the next chapter button.
/// This method should be called to disable the next chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disableNextChapter:(BOOL)disable;
/// To disable the previous chapter button.
/// This method should be called to disable the previous chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disablePreviousChapter:(BOOL)disable;
/// To disable the Bookmark  button.
/// This method should be called to disable the previous bookmark button.If this method is not called then by default the button will be in enabled state.
/// \param disable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disableBookmark:(BOOL)disable;
/// To enable/disable the Subtitle view.
/// This method should be called to enable/disable the previous Subtitle view. If this method is not called then by default the view will be in enabled state.
/// \param disable disable is a boolean. If the boolean is set to true then the view will be in disabled state and vice-versa.
///
- (void)setSubtitleViewState:(BOOL)disable;
/// To enable/disable the mute button.
/// This method should be called to enable/disable the mute button.
/// \param enable enable is a boolean.
///
- (void)enableDisbleMuteButton:(BOOL)enable;
/// To set color to  the Subtitle view.
/// This method should be called to set the color to Subtitle view. If this method is not called then by default the view color will be transparent.
/// \param color color is the color for view.
///
- (void)setSubtitleViewColor:(UIColor * _Nonnull)color;
/// To delete all the bookmarks on the view of the seek bar of the video player.
- (void)deleteAllBookmarks:(NSArray<SDKBookmarkVO *> * _Nonnull)bookmarksVO;
/// To add the bookmark view on the seek bar of the audio player
/// This method should be called to add the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)addBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To delete the bookmark view on the seek bar of the audio player
/// This method should be called to delete the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)deleteBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To update the user that whether the video is ready to play or not
/// This method should be called to update the user that whether the video is ready to play or not
/// \param isLoaded isLoaded is a boolean value. If the value is true then video is loaded and ready to play and vice versa
///
- (void)isVideoReadyToPlay:(BOOL)isLoaded;
/// This method should be called when view layout needed or device orientation changes.
- (void)updateViewOnOrientationChange;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end




/// The delegate of a HDVideoBookPlayerViewController object must adopt the HDVideoBookPlayerViewControllerDelegate protocol.
/// HDVideoBookPlayerViewControllerDelegate Protocol used to handle all the callbacks of HDVideoBookPlayerViewController Class.The HDVideoBookPlayerViewControllerDelegate protocol defines methods to provide callback when user perform any action on HDVideoBookPlayerViewController.
/// When configuring the HDVideoBookPlayerViewController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK39HDVideoBookPlayerViewControllerDelegate_")
@protocol HDVideoBookPlayerViewControllerDelegate
@optional
/// Delegate method when user tap on bookmark button
/// This method will be called when user tap on the bookmark button
- (void)didTapOnVideoBookmark;
/// Delegate method when tapped on play/pause button
/// This method will be called when user tap on the play/pause button
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (void)didTapOnVideoPlayPause:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// Delegate method when tapped on Narration Speed button
/// This method will be called when user tap on the Narration Speed button
- (void)didTapOnVideoNarrationSpeed:(UIButton * _Nonnull)button;
/// Delegate method when tapped on forward button
/// This method will be called when user tap on the forward button
- (void)didTapOnVideoForward;
/// Delegate method when tapped on backward button
/// This method will be called when user tap on the backward button
- (void)didTapOnVideoRewind;
/// Delegate method when tapped on next chapter button
/// This method will be called when user tap on the next chapter  button
- (void)didTapOnVideoNextChapter;
/// Delegate method when tapped on previous chapter button
/// This method will be called when user tap on the previous chapter  button
- (void)didTapOnVideoPreviousChapter;
/// Delegate method when update the UISlider position
/// This method will be called when user update the UISlider position
- (void)didVideoSeekBarValueChanged;
/// Delegate method when tapped on video mute button
/// This method will be called when user tap on the video mute  button
- (void)didTapOnVideoMute:(BOOL)isMute;
/// Delegate method when user tap on back button
/// This method will be called when user tap on the back button
- (void)didTapOnVideoBack;
/// Delegate method when user tap on full screen button
/// This method will be called when user tap on the full screen button
- (void)didTapOnVideoFullScreen:(BOOL)isFullScreen;
/// Delegate method when user taps on subtitle button.
/// This method will be called when user taps on subtitle button.
- (void)didTapOnSubtitleView:(BOOL)enabled;
/// Delegate method when user taps on the video more options button.
/// This method will be called when the user taps on the video more options button.
- (void)didTapOnVideoMoreOptions:(UIView * _Nonnull)view;
/// Delegate method when user taps on the video view.
/// This method will be called when the user taps on the video view.
- (void)didTapOnVideoView:(BOOL)enableControls;
@end


/// An object that manages the content of Audio/Video data, This class is only responsible for Audio & Video format file with TOC feature
/// @discussion The HDVideoTOCVO class is responsible for management of a json data such as, videoSeekTime, videoTitle,videoThumbnailURL and videoDescription data .
/// @superclass SuperClass : NSObject
SWIFT_CLASS_NAMED("HDVideoTOCVO")
@interface HDVideoTOCVO : NSObject
@property (nonatomic, copy) NSString * _Nullable videoSeekTime;
@property (nonatomic, copy) NSString * _Nullable videoTitle;
@property (nonatomic, copy) NSString * _Nullable videoThumbnailURL;
@property (nonatomic, copy) NSString * _Nullable videoDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HSModalPopupControllerDelegate;

/// An Object that manage a view For Modal Popup.
/// <ul>
///   <li>
///     The HSModalPopupController class defines a Layout where user can show any view with caption.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22HSModalPopupController")
@interface HSModalPopupController : UIViewController
- (void)viewDidLoad;
@property (nonatomic, weak) id <HSModalPopupControllerDelegate> _Nullable delegate;
/// To set Content View.
/// User can send any view and the view will added to current view with required size.
/// \param view view type Any.
///
- (void)setContentViewWithView:(id _Nonnull)view;
/// To set caption text for element.
/// \param text text type String.
///
- (void)setCaptionTextWithText:(NSString * _Nonnull)text;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("HSModalPopupControllerDelegate")
@protocol HSModalPopupControllerDelegate
- (void)didCloseModalPopupController;
@end

@class NSURLSession;
@protocol ImageDownloadTaskDelegate;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17ImageDownloadTask")
@interface ImageDownloadTask : NSObject
@property (nonatomic, strong) UIImage * _Nullable image;
- (nonnull instancetype)initWithPosition:(NSInteger)position urlString:(NSString * _Nonnull)urlString session:(NSURLSession * _Nonnull)session delegate:(id <ImageDownloadTaskDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (void)resume;
- (void)pause;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK25ImageDownloadTaskDelegate_")
@protocol ImageDownloadTaskDelegate
- (void)imageDownloadedWithPosition:(NSInteger)position;
- (void)imageDownloadingFailedWithError:(NSError * _Nonnull)error;
@end


SWIFT_CLASS_NAMED("InfomationPopOverContentViewController")
@interface InfomationPopOverContentViewController : UIViewController
/// To set Instruction Text View Top constraint.
@property (nonatomic, strong) NSLayoutConstraint * _Nullable instructionTextViewTopConstraint;
- (void)viewDidLoad;
/// The current text that is displayed by the Instruction.
/// <ul>
///   <li>
///     This property is nil by default. Assigning Instruction Description to instruction content view.
///   </li>
/// </ul>
/// \param instruction Text value that will set to Instruction content view.
///
- (void)setInstructionText:(NSString * _Nonnull)instruction;
/// To set Instruction Text Font
/// Assigning Font to Instruction Description.
/// \param font Font That will set to Instruction Text
///
- (void)setInstructionTextFont:(UIFont * _Nonnull)font;
/// The color  which will be set as background color for Instruction text
/// <ul>
///   <li>
///     This property is white by default. Assigning background color  to instruction text view.
///   </li>
/// </ul>
/// \param color Text background color
///
- (void)setInstructionTextBackgroundColor:(UIColor * _Nonnull)color;
- (CGSize)getInstructionTextSize SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)getInstructionTextLineHeight SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface InfomationPopOverContentViewController (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
/// This is used to save linkvo related to information popup
/// \param link KFLinkVO object related to information popup
///
- (void)setLinkVo:(KFLinkVO * _Nonnull)link;
/// This is used to get linkvo related to information popup
- (KFLinkVO * _Nullable)getLinkVo SWIFT_WARN_UNUSED_RESULT;
@end

@protocol Kitaboo3dPlayerViewControllerDelegate;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK29Kitaboo3dPlayerViewController")
@interface Kitaboo3dPlayerViewController : UIViewController <UIGestureRecognizerDelegate, UIScrollViewDelegate, WKNavigationDelegate>
@property (nonatomic, weak) id <Kitaboo3dPlayerViewControllerDelegate> _Nullable delegate;
- (void)initDataWithVideoPath:(NSString * _Nullable)videoPath with:(KFBookVO * _Nullable)bookVO with:(KFLinkVO * _Nullable)linkVO SWIFT_METHOD_FAMILY(none);
- (void)viewDidLoad;
- (void)play;
- (UIView * _Nonnull)getInlineVideoPlayer SWIFT_WARN_UNUSED_RESULT;
- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK37Kitaboo3dPlayerViewControllerDelegate_")
@protocol Kitaboo3dPlayerViewControllerDelegate <NSObject>
@optional
- (void)kitaboo3dPlayerDidClosed;
- (void)kitaboo3dPlayerFullscreenButtonTappedWithIsFullScreen:(BOOL)isFullScreen linkVo:(KFLinkVO * _Nonnull)linkVo;
@end

enum KitabooLogType : int32_t;

SWIFT_PROTOCOL_NAMED("KitabooLogProtocol")
@protocol KitabooLogProtocol
+ (void)logWithType:(enum KitabooLogType)type className:(Class _Nonnull)className message:(NSString * _Nonnull)message verboseMesage:(NSString * _Nonnull)verboseMesage;
@end


SWIFT_CLASS_NAMED("KitabooDebugLog")
@interface KitabooDebugLog : NSObject <KitabooLogProtocol>
+ (void)logWithType:(enum KitabooLogType)type className:(Class _Nonnull)className message:(NSString * _Nonnull)message verboseMesage:(NSString * _Nonnull)verboseMesage;
+ (void)enableLogsWithIsenabled:(BOOL)isenabled;
+ (void)enableVerboseWithIsenabled:(BOOL)isenabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM_NAMED(int32_t, KitabooLogType, "KitabooLogType", open) {
  KitabooLogTypeError = 0,
  KitabooLogTypeInformation = 1,
  KitabooLogTypeWarning = 2,
};


@class NetworkDataTaskOperation;
@class NSHTTPURLResponse;

SWIFT_CLASS_NAMED("KitabooServiceInterface")
@interface KitabooServiceInterface : NSObject
/// To initialize class.
/// <h3>Usage Example:</h3>
/// \code
/// [[KitabooServiceInterface alloc] initWithBaseURLString:@BASE_URL_STRING clientID:@API_CLIENT_ID];
///
/// \endcode\param baseURLString base url of sevice
///
/// \param clientID client id
///
- (nonnull instancetype)initWithBaseURLString:(NSString * _Nonnull)baseURLString clientID:(NSString * _Nonnull)clientID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBaseURLString:(NSString * _Nonnull)baseURLString clientID:(NSString * _Nonnull)clientID isMultisessionEnabled:(BOOL)isMultisessionEnabled OBJC_DESIGNATED_INITIALIZER;
/// For authenticating user credential , use for login purpose.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface authenticateWithUserName:signInUserNameTextField.text password:signInPasswordTextField.text successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userName username to authenticate.
///
/// \param password password to authenticate.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)authenticateWithUserName:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// For authenticating user credential , use for login purpose.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface authenticateGoogleClassRoomUserWithTokenSchema:tokenSchema successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param tokenSchema googleClassRoomTokenSchema to authenticate.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)authenticateGoogleClassRoomUserWithTokenSchema:(NSDictionary<NSString *, id> * _Nonnull)tokenSchema successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// When user token gets expired then to renew/refresh it use this service.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface refreshUserTokenWithToken:_user.userToken successHandler:^(NSDictionary<NSString *,id> * dict)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken userToken to refresh.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)refreshUserTokenWithToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To send user pushnotification token to server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface registerDeviceToken:_user.userToken,apnsToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param apnsToken current users device Token
///
/// \param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)registerDeviceToken:(NSString * _Nonnull)userToken apnsToken:(NSString * _Nonnull)apnsToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To deregister user from pushnotification  to server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface deRegisterDeviceToken:_user.userToken,apnsToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param apnsToken current users device Token
///
/// \param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)deRegisterDeviceToken:(NSString * _Nonnull)userToken apnsToken:(NSString * _Nonnull)apnsToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To get  push notification list for a user from server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiveInterface getNotificationListWithUserToken:_user.userToken userId:_user.userId successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError *error) {
///
/// }
///
/// \endcode\param userId current users id
///
/// \param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)getNotificationListWithUserToken:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To delete all  push notifications for a user from server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiveInterface deleteNotificationListWithUserToken:_user.userToken userId:_user.userId successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userId current users id
///
/// \param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)deleteNotificationListWithUserToken:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To mark notifications as read  from server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiveInterface markReadNotificationListWithUserToken:@"" userId:@"" messageIds:@[@""] markAll:false successHandler:^(NSDictionary *dic)
/// {
/// NSLog(@"%@",dic);
/// } failureHandler:^(NSError *error)
/// {
/// NSLog(@"error %@",error);
///
/// }];
///
/// \endcode\param userId current users id
///
/// \param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)markReadNotificationListWithUserToken:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId messageIds:(NSArray<NSString *> * _Nonnull)messageIds markAll:(BOOL)markAll successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)getUserInfo:(NSString * _Nonnull)userToken currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// This service is used, when user token gets expired and user wants to get NetworkDataTaskOperation to renew the expired token.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface renewUserTokenWithToken:_user.userToken successHandler:^(NSDictionary<NSString *,id> * dict)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken userToken to refresh.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)renewUserTokenWithToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To Fetch UGC for a book from given timestamp.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchUGCOperation:userToken bookId:[NSString stringWithFormat:@"%ld",[bookID integerValue]] timestamp:[dbManager getLastSyncedDateForBookID:bookID ForUserID:userID] successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookId Id of book for which UGC has to fetch
///
/// \param timestamp to fetch ugc from given time
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchUGCOperation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timestamp:(NSString * _Nonnull)timestamp bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Fetch UGC for a book from given timestamp.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchUGC:userToken bookId:[NSString stringWithFormat:@"%ld",[bookID integerValue]] timestamp:[dbManager getLastSyncedDateForBookID:bookID ForUserID:userID] successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookId Id of book for which UGC has to fetch
///
/// \param timestamp to fetch ugc from given time
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchUGC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timestamp:(NSString * _Nonnull)timestamp bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Save UGC for a book.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveUGCData:userToken bookId:@"" ugcData:data successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookId Id of book for which UGC has to save
///
/// \param ugcData ugcData which has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveUGCData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId ugcData:(NSData * _Nonnull)ugcData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To get kaltura video url for playing kaltura video use this service.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface getKalturaSessionURL:_user.userToken entryID:linkVo.url type:TYPE_KALTURA successHandler:^(NSDictionary *dict)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param entryID url of link
///
/// \param type as of now we are passing 1
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)getKalturaSessionURL:(NSString * _Nonnull)userToken entryID:(NSString * _Nonnull)entryID type:(NSInteger)type successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Save UGC for a book.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveUGCData:userToken bookId:@"" ugcData:data successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookId Id of book for which UGC has to save
///
/// \param ugcData ugcData which has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveUGCDataOperation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId ugcData:(NSData * _Nonnull)ugcData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Save UGC for a book with Meta Data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveUGCDataOperation:userToken bookId:@"" ugcData:data metaDataObject:metaData successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookId Id of book for which UGC has to save
///
/// \param ugcData ugcData which has to save
///
/// \param metaData Meta Data
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveUGCDataOperation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId ugcData:(NSData * _Nonnull)ugcData metaDataObject:(KitabooServiceMetaData * _Nullable)metaData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save shared data with meta Data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveColllabData:userToken collabData:unsynedCollabUGCdata bookId:[bookID stringValue] metaDataObject:metaData successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param collabData shared data which has to save
///
/// \param bookId Id of book for which data has to save
///
/// \param metaData Meta Data
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveColllabData:(NSString * _Nonnull)userToken collabData:(NSData * _Nonnull)collabData bookId:(NSString * _Nonnull)bookId metaDataObject:(KitabooServiceMetaData * _Nullable)metaData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save shared data with meta Data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveColllabDataForPagination:userToken collabData:unsynedCollabUGCdata bookId:[bookID stringValue] metaDataObject:metaData successHandler:^(NSDictionary<NSString *,id> * json, NSData *successedcollabData) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param collabData shared data which has to save
///
/// \param bookId Id of book for which data has to save
///
/// \param metaData Meta Data
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveColllabDataForPagination:(NSString * _Nonnull)userToken collabData:(NSData * _Nonnull)collabData bookId:(NSString * _Nonnull)bookId metaDataObject:(KitabooServiceMetaData * _Nullable)metaData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSData * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Validate access code.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface validateAccessCode:@"1234" successHandler:^(NSDictionary *json){
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param accessCode access code to validate.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)validateAccessCodeWith_userToken:(NSString * _Nonnull)_userToken withAccessCode:(NSString * _Nonnull)accessCode successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To Change password of user.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface changePasswordForUserWith:userToken username:@"abc@gmail.com" password:@"abc" toNewPassword:@"def" newPassword:@"def" successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param username username of user for which password has to change
///
/// \param password password of user which has to change
///
/// \param toNewPassword toNewPassword which has to set
///
/// \param newPassword newPassword which has to set
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)changePasswordForUserWith:(NSString * _Nonnull)userToken username:(NSString * _Nonnull)username password:(NSString * _Nonnull)password toNewPassword:(NSString * _Nonnull)newPassword successHandler:(void (^ _Nonnull)(void))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To reset password of user.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface resetPasswordWithUsername:@"abc@gmail.com" successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param username username of user for which password has to reset
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)resetPasswordWithUsername:(NSString * _Nonnull)username successHandler:(void (^ _Nonnull)(void))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nullable))failureHandler;
/// To fetch book class information(for example how many teachers or students assigned for class).
/// <h3>Usage Example:</h3>
/// \code
/// [[kitabooServiceInterface fetchBookClassInfo:userToken bookIds:(@[[NSString stringWithFormat:@"%@",bookID]]) successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookIds id of book for which class information has to fetch
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchBookClassInfo:(NSString * _Nonnull)userToken bookIds:(NSArray<NSString *> * _Nonnull)bookIds successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To download all books.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param state state offline/online
///
/// \param bookList List of books of which download url is needed
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)downloadAllBooks:(NSString * _Nonnull)userToken withState:(NSString * _Nonnull)state withBookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To delete all books.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param bookList List of books of which download url is needed
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)deleteAllBooks:(NSString * _Nonnull)userToken withBookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To save Session history.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param SessionHistory List of books id and time stamp
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveSessionHistory:(NSString * _Nonnull)userToken withSessionHistory:(NSDictionary<NSString *, NSArray<NSDictionary<NSString *, id> *> *> * _Nonnull)SessionHistory successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSDictionary<NSString *, NSArray<NSDictionary<NSString *, id> *> *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To get updated list of books being assigned to the user, if user do not send time stamp then currnet time is taken by default.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param bookIdAndTypeDict Dictionary of bookIds and type(UPDATE,NEW,DELETE). If not sent then all three will be return
///
/// \param timeStamp time from which user needs to fetch books that has been added
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)refreshBookList:(NSString * _Nonnull)userToken withBookIdAndType:(NSDictionary<NSString *, id> * _Nonnull)bookIdAndTypeDict withTimeStamp:(NSString * _Nullable)timeStamp successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To mark book as favourite.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param book bookid which needs to be marked as favourite
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)markFavourite:(NSString * _Nonnull)userToken withFavouriteBook:(NSDictionary<NSString *, id> * _Nonnull)book successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To unmark book as favourite.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param book bookid which needs to be unmarked as favourite
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)unmarkFavourite:(NSString * _Nonnull)userToken withFavouriteBook:(NSString * _Nonnull)book successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch favourite books.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchFavourite:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch booklist for user.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchBookList:_user.userToken successHandler:^(NSDictionary *jsonDic)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchBookList:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch book list for category .
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchBookListForCategory:_user.userToken withCategoryName:@"abc" withStartIndex:nil withEndIndex:nil successHandler:^(NSDictionary * jsonDic) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param categoryName category name for which book list has to fetch
///
/// \param startIndex Index from which booklist has to start(optional)
///
/// \param endIndex Index on which booklist has to end(optional)
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchBookListForCategory:(NSString * _Nonnull)userToken withCategoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId withStartIndex:(NSNumber * _Nullable)startIndex withEndIndex:(NSNumber * _Nullable)endIndex successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch category list.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchCategoryList:_user.userToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchCategoryList:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch books of collection present in category.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchBooksForCollection:_user.userToken withCategoryName:@"abc" withCollectionName:@"ab" withStartIndex:nil withEndIndex:nil successHandler:^(NSDictionary * jsonDic) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param categoryName category name which has collection of books
///
/// \param collectionName collection name for which book list has to fetch
///
/// \param startIndex Index from which booklist has to start(optional)
///
/// \param endIndex Index on which booklist has to end(optional)
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchBooksForCollection:(NSString * _Nonnull)userToken withCategoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId withCollectionName:(NSString * _Nonnull)collectionName withStartIndex:(NSNumber * _Nullable)startIndex withEndIndex:(NSNumber * _Nullable)endIndex successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch recently viewed books.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchRecentlyViewedBooks:_user.userToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the responsere
///
- (NetworkDataTaskOperation * _Nonnull)fetchRecentlyViewedBooks:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch user settings.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchUserSettings:[json objectForKey:@"userToken"] successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)fetchUserSettings:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To fetch shared data and list of users with whom data has been shared.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchCollabShare:userToken bookId:[NSString stringWithFormat:@"%@",bookID] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which data has to fetch
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchCollabShare:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch shared data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchCollabUGC:userToken bookId:[NSString stringWithFormat:@"%@",bookID] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which data has to fetch
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchCollabUGC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch shared data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchCollabUGC:userToken bookId:[NSString stringWithFormat:@"%@",bookID] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which data has to fetch
///
/// \param timestamp to fetch ugc from given time
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchCollabUGC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timestamp:(NSString * _Nonnull)timestamp bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch teacher annotations.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchTeacherAnnotations:_user.userToken bookId:@"101" successHandler:^(NSDictionary * jsonDic) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which teacher annotation has to fetch
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchTeacherAnnotations:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch student annotations.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchStudentAnnotations:_user.userToken bookId:@"101" learnerId:@"111" successHandler:^(NSDictionary * jsonDic) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which student annotation has to fetch
///
/// \param learnerId learner id of student
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchStudentAnnotations:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId learnerId:(NSString * _Nonnull)learnerId bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To save shared data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveColllabData:userToken collabData:unsynedCollabUGCdata bookId:[bookID stringValue] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param collabData shared data which has to save
///
/// \param bookId Id of book for which data has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveColllabData:(NSString * _Nonnull)userToken collabData:(NSData * _Nonnull)collabData bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save highlights .
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveHighlightData:userToken highlightData:data bookId:[bookID stringValue] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param highlightData highlight data which has to save
///
/// \param bookId Id of book for which data has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)saveHighlightData:(NSString * _Nonnull)userToken highlightData:(NSData * _Nonnull)highlightData bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// The data which is needed to be tracked (for a instance opening note , deleting note etc.), should be tracked with this service.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveTrackingData:userToken bookId:[bookID stringValue] analyticsData:data successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which data has to save
///
/// \param analyticsData analytics data which has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveTrackingData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId analyticsData:(NSData * _Nonnull)analyticsData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To fetch Analytics Data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface getAnalyticsData:userToken bookId:[bookID stringValue] classId:classId] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which data has to be fetched
///
/// \param classId Id of class for which data has to be fetched
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)getAnalyticsData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId classId:(NSNumber * _Nonnull)classId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch search response for word.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface elasticSearch:userToken searchData:jsonBodyData successHandler:^(NSDictionary *dict) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param searchData the data on which search action needs to be performed
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)elasticSearch:(NSString * _Nonnull)userToken searchData:(NSData * _Nonnull)searchData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To chnage user information such as name,profile photo,cover photo use this service.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface updateUserDetailsWith:_user.userToken profilePhotoData:profileData coverPhotoData:coverData firstName:@"abc" lastName:@"def" successHandler:^{
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param profilePhotoData profile photo data to update
///
/// \param coverPhotoData cover photo data to update
///
/// \param firstName first name to update
///
/// \param lastName last name to update
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)updateUserDetailsWith:(NSString * _Nonnull)userToken profilePhotoData:(NSData * _Nonnull)profilePhotoData coverPhotoData:(NSData * _Nonnull)coverPhotoData firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName successHandler:(void (^ _Nonnull)(void))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save accepted or rejected shared data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface acceptRejectCollab:userToken collabData:data successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param collabData shared data which has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)acceptRejectCollab:(NSString * _Nonnull)userToken collabData:(NSData * _Nonnull)collabData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To download book url.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface downloadBookURLWith:userToken bookId:bookID formatType:bookInfo.formatName successHandler:^(NSDictionary *dic){
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book which is to download
///
/// \param formatType As of now for all books we pass ‘IPAD’
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)downloadBookURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)downloadMediaBookURLWith:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSHTTPURLResponse * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)downloadBookOnlineURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType timeStamp:(int64_t)timeStamp successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)authenticateHLSPackageWith:(int64_t)packageId baseURL:(NSString * _Nonnull)baseURL userToken:(NSString * _Nonnull)userToken timeStamp:(int64_t)timeStamp successHandler:(void (^ _Nonnull)(NSHTTPURLResponse * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To delete book url, when book is deleted from local storage then to mark it as deleted we use this.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface releaseBookURLWith:userToken bookId:cell.bookID formatType:bookInfo.formatName successHandler:^(NSDictionary *dic){
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book which is to download
///
/// \param formatType As of now for all books we pass ‘IPAD’
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)releaseBookURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// When book is downloaded then to mark it as consumed use this.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiveInterface consumeBookURLWith:userToken bookId:[[path lastPathComponent] integerValue] formatType:bookInfo.formatName successHandler:^(NSDictionary *dic){
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book which is to download
///
/// \param formatType As of now for all books we pass ‘IPAD’
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)consumeBookURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save teacher annotations for a student.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveTeacherAnnotation:userToken annotation:data bookId:[NSString stringWithFormat:@"%d",bookId.intValue] learnerId:learnerId successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param annotation annotation which has to save
///
/// \param bookId Id of book for which annotation has to save
///
/// \param learnerId learner id of student
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveTeacherAnnotation:(NSString * _Nonnull)userToken annotation:(NSData * _Nonnull)annotation bookId:(NSString * _Nonnull)bookId learnerId:(NSString * _Nonnull)learnerId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save student annotations(such as pentool,FIB).
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface submitAnotation:userToken bookId:[NSString stringWithFormat:@"%ld",[bookID integerValue]] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which annotation has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)submitAnotation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save SCORM data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveSCORMData:userToken bookId:[NSString stringWithFormat:@"%@",bookID] scormData:data  successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which SCORM data has to save
///
/// \param scormData scormData which has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveSCORMData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId scormData:(NSData * _Nonnull)scormData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To fetch SCORM data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchScromData:userToken classID:classId bookId:[NSString stringWithFormat:@"%@",bookID] successHandler:^(NSDictionary *json)  {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param classID Id of class
///
/// \param bookId Id of book for which SCORM data has to fetch
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchScromData:(NSString * _Nonnull)userToken classID:(NSString * _Nonnull)classID bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)getBookDetails:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)getBookDetailsWithID:(NSString * _Nonnull)bookId userToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)forceUpdate:(NSString * _Nonnull)appVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)packageURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)fetchReadingSpeedInformation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)fetchLastPageAccessed:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)saveLastPageAccessed:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId lastPageData:(NSString * _Nonnull)lastPageData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)fetchFurthestPage:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)saveFurthestPageData:(NSString * _Nonnull)userToken furthestPageData:(NSData * _Nonnull)furthestPageData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)fetchBookListForCategorySecured:(NSString * _Nonnull)userToken withCategoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId withStartIndex:(NSNumber * _Nullable)startIndex withEndIndex:(NSNumber * _Nullable)endIndex currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)fetchBooksForCollectionSecured:(NSString * _Nonnull)userToken withCategoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId withCollectionName:(NSString * _Nonnull)collectionName withStartIndex:(NSNumber * _Nullable)startIndex withEndIndex:(NSNumber * _Nullable)endIndex currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)getBookDetailsSecured:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)fetchRecentlyViewedBooksSecured:(NSString * _Nonnull)userToken currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch favourite books.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchFavouriteSecured:(NSString * _Nonnull)userToken currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To get updated list of books being assigned to the user, if user do not send time stamp then currnet time is taken by default.
/// <h3>Usage Example:</h3>
/// \code
///
/// \endcode\param userToken current users userToken
///
/// \param bookIdAndTypeDict Dictionary of bookIds and type(UPDATE,NEW,DELETE). If not sent then all three will be return
///
/// \param timeStamp time from which user needs to fetch books that has been added
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)refreshBookListSecured:(NSString * _Nonnull)userToken withBookIdAndType:(NSDictionary<NSString *, id> * _Nonnull)bookIdAndTypeDict withTimeStamp:(NSString * _Nullable)timeStamp currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)refreshCategoryListSecured:(NSString * _Nonnull)userToken categoryIdList:(NSDictionary<NSString *, id> * _Nonnull)categoryIdList currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To download all books.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param state state offline/online
///
/// \param bookList List of books of which download url is needed
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)downloadAllBooksSecured:(NSString * _Nonnull)userToken withState:(NSString * _Nonnull)state withBookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch book list for category .
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchBookListForCategoryV1:_user.userToken withCategoryName:@"abc" successHandler:^(NSDictionary * jsonDic) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param categoryName category name for which book list has to fetch
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchBookListForCategoryV1:(NSString * _Nonnull)userToken withCategoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId withStartIndex:(NSNumber * _Nullable)startIndex withEndIndex:(NSNumber * _Nullable)endIndex successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch category list.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchCategoryListV1:_user.userToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchCategoryListV1:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (void)fetchPrefferedLanguage:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)savePrefferedLanguage:(NSString * _Nonnull)userToken languauge:(NSString * _Nonnull)languauge successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)fetchBookTOC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)fetchStudentMarkupReport:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId classId:(NSString * _Nonnull)classId chapters:(NSString * _Nonnull)chapters emailID:(NSString * _Nonnull)emailID userIds:(NSString * _Nonnull)userIds successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To get screenshot count from server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface getScreenshotCount:_user.userToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)getScreenshotCountWithUserToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To update screenshot count from server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface updateScreenshotCount:_user.userToken,screenshotCount successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param screenshotCount screenshot count to update on server
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)updateScreenshotCountWithUserToken:(NSString * _Nonnull)userToken screenshotCount:(NSInteger)screenshotCount successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To   get list of all active sessions..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchAllDeviceSession:_user.userToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)fetchAllDeviceSessionWithUserToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To   get delete session..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface deleteSession:_user.userToken, uuId:uuid, successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param uuId uuId of the session to be deleted
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)deleteSessionWithUserToken:(NSString * _Nonnull)userToken uuId:(NSString * _Nonnull)uuId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To   get delete all sessions.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface deleteAllSession:_user.userToken, successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)deleteAllSessionWithUserToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)refreshUserTokenWithDate:(NSString * _Nonnull)userToken currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To fetch user partner details.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchUserPartnerDetailsWithUserToken: userToken startIndex: startIndex endIndex: endIndex successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current user userToken
///
/// \param startIndex Index from which booklist has to start
///
/// \param endIndex Index on which booklist has to end
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)fetchUserPartnerDetailsWithUserToken:(NSString * _Nonnull)userToken startIndex:(NSString * _Nonnull)startIndex endIndex:(NSString * _Nonnull)endIndex successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To switch partner.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface switchPartner: userToken partnerReferenceId: partnerReferenceId successHandler: ^(NSDictionary *json)
/// {
///
/// } failureHandler: ^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current user userToken
///
/// \param partnerReferenceId partner reference Id for which the books has to be fetched
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)switchPartnerWithUserToken:(NSString * _Nonnull)userToken partnerReferenceId:(NSString * _Nonnull)partnerReferenceId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To switch partner.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface getImmersiveReaderToken: userToken successHandler: ^(NSDictionary *json)
/// {
///
/// } failureHandler: ^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current user userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)getImmersiveReaderTokenWithUserToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An Object that will be contains additional infromation to hit a service e.g. initialisedValue or actionType.
SWIFT_CLASS_NAMED("KitabooServiceMetaData")
@interface KitabooServiceMetaData : NSObject
/// A Value from where service is being Initialised.E.g.Reader or Bookshelf etc.
/// <h3>Usage Example:</h3>
/// \code
/// kitabooServiceMetaData.initialisedValue = "A";
///
/// \endcode
@property (nonatomic, copy) NSString * _Nonnull initialisedValue;
/// A Value which will represent the service action type. E.g. Send or Resend.
/// <h3>Usage Example:</h3>
/// \code
/// kitabooServiceMetaData.actionType = "S";
///
/// \endcode
@property (nonatomic, copy) NSString * _Nonnull actionType;
/// To initialize KitabooServiceMetaData class.
/// <h3>Usage Example:</h3>
/// \code
/// let kitabooServiceMetaData = KitabooServiceMetaData();
///
/// \endcode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// KitabooUser is responsible for storing user information.
/// <ul>
///   <li>
///     KitabooUser defines all the parameters/atrributes which are required to store user information(Ex- emailID, name, id, profile pic etc..).
///   </li>
///   <li>
///     SuperClass : NSObject
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("KitabooUser")
@interface KitabooUser : NSObject
@property (nonatomic, copy) NSString * _Nullable clientID;
@property (nonatomic, copy) NSString * _Nullable coverPhotoURL;
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable level;
@property (nonatomic, copy) NSString * _Nullable profilePicURL;
@property (nonatomic, copy) NSArray * _Nullable roles;
@property (nonatomic, copy) NSString * _Nullable userID;
@property (nonatomic, copy) NSString * _Nullable userToken;
@property (nonatomic, copy) NSString * _Nullable role;
@property (nonatomic, copy) NSString * _Nullable userName;
@property (nonatomic, copy) NSString * _Nullable userLoggedInTime;
@property (nonatomic, copy) NSString * _Nullable serverUserID;
@property (nonatomic, copy) NSString * _Nullable partnerReferenceId;
/// Initiate KitabooUser with userInfo, userToken and role.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooUser initWithUserInfo :[json objectForKey:@"user"] userToken:[json objectForKey:@"userToken"] role:[json objectForKey:@"role"]];
///
/// \endcode\param userInfo Is the dictionary value which contains user information.
///
/// \param userToken Is string value which is received from server.
///
/// \param role Is string value which specify role of user (teacher/student).
///
- (nonnull instancetype)initWithUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo userToken:(NSString * _Nonnull)userToken role:(NSString * _Nonnull)role OBJC_DESIGNATED_INITIALIZER;
/// Initiate KitabooUser with userInfo and userToken.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooUser initWithUserInfo :[json objectForKey:@"user"] userToken:[json objectForKey:@"userToken"]];
///
/// \endcode\param userInfo Is the dictionary value which contains user information.
///
/// \param userToken Is string value which is received from server.
///
- (nonnull instancetype)initWithUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo userToken:(NSString * _Nonnull)userToken OBJC_DESIGNATED_INITIALIZER;
/// Initiate KitabooUser with userInfo and userToken.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooUser initWithUserInfo :[json objectForKey:@"user"] userToken:[json objectForKey:@"userToken"] userLoggedInTime:[json objectForKey:@"timestamp"]];
///
/// \endcode\param userInfo Is the dictionary value which contains user information.
///
/// \param userToken Is string value which is received from server.
///
/// \param loggedInTime Is string value which is user login time received from server.
///
- (nonnull instancetype)initWithUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo userToken:(NSString * _Nonnull)userToken userLoggedInTime:(NSString * _Nullable)loggedInTime OBJC_DESIGNATED_INITIALIZER;
/// Initiate KitabooUser with userInfo, userToken and userID.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooUser initWithuUerId:@"123456" UserInfo :[json objectForKey:@"user"] userToken:[json objectForKey:@"userToken"]];
///
/// \endcode\param userId User id of the user
///
/// \param userInfo Is the dictionary value which contains user information.
///
/// \param userToken Is string value which is received from server.
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo userToken:(NSString * _Nonnull)userToken OBJC_DESIGNATED_INITIALIZER;
/// Initiate KitabooUser with userInfo, userToken and userID.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooUser initWithuUerId:@"123456" UserInfo :[json objectForKey:@"user"] userToken:[json objectForKey:@"userToken"] userLoggedInTime:[json objectForKey:@"timestamp"]];
///
/// \endcode\param userId User id of the user
///
/// \param userInfo Is the dictionary value which contains user information.
///
/// \param userToken Is string value which is received from server.
///
/// \param loggedInTime Is string value of user login time which is received from server.
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo userToken:(NSString * _Nonnull)userToken userLoggedInTime:(NSString * _Nullable)loggedInTime OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUserToken:(NSString * _Nonnull)userToken userID:(NSString * _Nonnull)userID firstName:(NSString * _Nonnull)firstName lastName:(NSString * _Nonnull)lastName email:(NSString * _Nonnull)email OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol LinkDropDownViewControllerDelegate;

/// An object that manages the content for links in Dropdown.
/// A LinkDropDownViewController object manages the content of the link in the dropdown list and allows the selection of items from the dropdown list.
SWIFT_CLASS_NAMED("LinkDropDownViewController")
@interface LinkDropDownViewController : UIViewController <UIGestureRecognizerDelegate>
/// The object that acts as the delegate of the LinkDropDownViewController.
/// The delegate must adopt the LinkDropDownViewControllerDelegate protocol. The delegate is not retained.
@property (nonatomic, strong) id <LinkDropDownViewControllerDelegate> _Nullable delegate;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// Initializes an allocated LinkDropDownViewController object with DropDown Items and a DropDown.
/// \param dropDownItemsArray DropDown Items
///
/// \param dropDown Selected DropDown
///
- (nonnull instancetype)initWithDropDownData:(NSArray<NSString *> * _Nonnull)dropDownItemsArray withDropDown:(UIButton * _Nonnull)dropDown OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface LinkDropDownViewController (SWIFT_EXTENSION(Kitaboo_Reader_SDK)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// Methods for managing selection, close actions in a DropDown.
SWIFT_PROTOCOL_NAMED("LinkDropDownViewControllerDelegate")
@protocol LinkDropDownViewControllerDelegate
/// Tells the delegate that the specified DropDown item is now selected.
/// The delegate handles selections in this method. One of the things it can do is save the selected DropDown Text.  This method will be called when the DropDown Item is Select..
/// \param selectedText Selected DropDown Item Text.
///
/// \param dropDown Selected DropDown
///
- (void)didSelectDropDownItemWithText:(NSString * _Nonnull)selectedText forDropDown:(UIButton * _Nonnull)dropDown;
/// Tells the delegate that the specified DropDown needs to be closed.
/// Use this method to detect when a DropDown is need to removed.
- (void)didSelectActionToCloseDropDown;
@end


SWIFT_CLASS_NAMED("LocalizationHelper")
@interface LocalizationHelper : NSObject
/// Used to set the bundle for string localization.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nullable readerLanguageBundle;)
+ (NSBundle * _Nullable)readerLanguageBundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setReaderLanguageBundle:(NSBundle * _Nullable)value;
/// This method should be called to localize the string
/// <h3>Usage Example:</h3>
/// \code
/// [LocalizationHelper localizedStringWithKey:@"A"];
///
///
/// \endcode\param key The key value of the localized string.
///
+ (NSString * _Nonnull)localizedStringWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)localizedStringWithKey:(NSString * _Nonnull)key tableName:(NSString * _Nonnull)tableName bundle:(NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// An Object to get TOC controller section type whether it is CHAPTER, TRANSCRIPT or BOOKMARK.
typedef SWIFT_ENUM(NSInteger, MediaBookTOCFilter, open) {
  MediaBookTOCFilterCHAPTER = 0,
  MediaBookTOCFilterTRANSCRIPT = 1,
  MediaBookTOCFilterBOOKMARK = 2,
};





SWIFT_CLASS_NAMED("Operation")
@interface Operation : NSOperation
@property (nonatomic, getter=isExecuting) BOOL executing;
@property (nonatomic, getter=isFinished) BOOL finished;
- (void)start;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("NetworkDataTaskOperation")
@interface NetworkDataTaskOperation : Operation <NSURLSessionDataDelegate>
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NetworkDataTaskOperation (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
+ (NetworkDataTaskOperation * _Nonnull)requestOperation:(NSURLRequest * _Nonnull)request withSession:(NSURLSession * _Nonnull)session andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface NetworkDataTaskOperation (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
+ (NetworkDataTaskOperation * _Nonnull)sendRequest:(NSURLRequest * _Nonnull)request withSession:(NSURLSession * _Nonnull)session andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)sendRequest:(NSURLRequest * _Nonnull)request withCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)sendRequestWithURL:(NSURL * _Nonnull)url withSession:(NSURLSession * _Nonnull)session andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)sendRequestWithURL:(NSURL * _Nonnull)url andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface NetworkDataTaskOperation (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
+ (NetworkDataTaskOperation * _Nonnull)operationWithRequest:(NSURLRequest * _Nonnull)request withSession:(NSURLSession * _Nonnull)session andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)operationWithRequest:(NSURLRequest * _Nonnull)request andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)operationWithURL:(NSURL * _Nonnull)url withSession:(NSURLSession * _Nonnull)session andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)operationWithURL:(NSURL * _Nonnull)url andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface NetworkDataTaskOperation (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)responseData:(void (^ _Nonnull)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler;
- (void)responseJSON:(NSJSONReadingOptions)options completionHandler:(void (^ _Nonnull)(NetworkDataTaskOperation * _Nullable, NSHTTPURLResponse * _Nullable, id _Nullable, NSError * _Nullable))completionHandler;
- (void)responseJSONWithResponseString:(NSJSONReadingOptions)options completionHandler:(void (^ _Nonnull)(NetworkDataTaskOperation * _Nullable, NSHTTPURLResponse * _Nullable, id _Nullable, NSError * _Nullable, NSString * _Nullable))completionHandler;
@end


SWIFT_CLASS_NAMED("NetworkDownloadTaskOperation")
@interface NetworkDownloadTaskOperation : NetworkDataTaskOperation <NSURLSessionDownloadDelegate>
- (void)cancel;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes;
@end



SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK25NumberLocalizationHandler")
@interface NumberLocalizationHandler : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull languageCode;)
+ (NSString * _Nonnull)languageCode SWIFT_WARN_UNUSED_RESULT;
+ (void)setLanguageCode:(NSString * _Nonnull)value;
+ (void)setLanguageCodeForNumberLocalizationWithCodeWithCode:(NSString * _Nonnull)code;
/// To localize number in system language
/// <h3>Usage Example:</h3>
/// \code
/// [NumberLocalizationHandler localizeNumber:"10"];
///
/// \endcode\param number number to be localized
///
+ (NSString * _Nonnull)localizeNumberWithNumber:(id _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
/// To localize number in system language
/// <h3>Usage Example:</h3>
/// \code
/// [NumberLocalizationHandler localizeNumber:"10"];
///
/// \endcode\param number number to be localized
///
/// \param fractionalPoints how many digits needed after decimal point. default is 2
///
+ (NSString * _Nonnull)localizeNumberWithNumber:(id _Nonnull)number fractionalPoints:(NSInteger)fractionalPoints SWIFT_WARN_UNUSED_RESULT;
/// To localize time in system language
/// <h3>Usage Example:</h3>
/// \code
/// [NumberLocalizationHandler localizeTime:"10:10"];
///
/// \endcode\param time time/date to be localized
///
+ (NSString * _Nonnull)localizeTimeWithTime:(NSString * _Nonnull)time SWIFT_WARN_UNUSED_RESULT;
/// To localize time in system language
/// <h3>Usage Example:</h3>
/// \code
/// [NumberLocalizationHandler localizeTime:"10:10"];
///
/// \endcode\param time time/date to be localized
///
/// \param format In which format passed time is hh:mm:ss. If you don’t pass default format is mm:ss
///
+ (NSString * _Nonnull)localizeTimeWithTime:(NSString * _Nonnull)time format:(NSString * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
/// To localize number in system language
/// <h3>Usage Example:</h3>
/// \code
/// [NumberLocalizationHandler localizeNumber:"10"];
///
/// \endcode\param number number to be localized
///
+ (NSString * _Nonnull)localizeNumberWithoutFormatWithNumber:(id _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol PrintPageViewDelegate;

/// A control that executes Print page controller code in response to user interactions.
SWIFT_CLASS_NAMED("PrintPageButton")
@interface PrintPageButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// The object that acts as the delegate of the PrintPageButton.
/// The delegate must adopt the PrintPageViewDelegate protocol. The delegate is not retained.
@property (nonatomic, strong) id <PrintPageViewDelegate> _Nullable delegate;
/// An unique page Identifier.
@property (nonatomic, strong) NSNumber * _Nullable pageNumber;
@end

@protocol PrintPageViewControllerDelegate;
@class UIViewPrintFormatter;
@class UIPrintInteractionController;
@class UIPrintPaper;

/// An object that manages printing user interface.
/// The shared instance of it represents a print job, printing page status.
/// Responding to user interactions with Print Controller.
SWIFT_CLASS_NAMED("PrintPageViewController")
@interface PrintPageViewController : UIViewController <UIPrintInteractionControllerDelegate>
/// The object that acts as the delegate of the PrintPageViewController.
/// The delegate must adopt the PrintPageViewControllerDelegate protocol.
@property (nonatomic, strong) id <PrintPageViewControllerDelegate> _Nullable delegate;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
/// Initializes an allocated PrintPageViewController object with Print Image.
/// \param printImage printImage of Type UIImage for print.
///
- (nonnull instancetype)initWithPrintImage:(UIImage * _Nonnull)printImage;
- (nonnull instancetype)initWithPrintFormatter:(UIViewPrintFormatter * _Nonnull)printFormatter;
- (nonnull instancetype)initWithPrintPage:(id _Nonnull)printPageData;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)printInteractionControllerDidDismissPrinterOptions:(UIPrintInteractionController * _Nonnull)printInteractionController;
- (void)printInteractionControllerDidFinishJob:(UIPrintInteractionController * _Nonnull)printInteractionController;
- (void)printInteractionControllerWillStartJob:(UIPrintInteractionController * _Nonnull)printInteractionController;
- (UIPrintPaper * _Nonnull)printInteractionController:(UIPrintInteractionController * _Nonnull)printInteractionController choosePaper:(NSArray<UIPrintPaper *> * _Nonnull)paperList SWIFT_WARN_UNUSED_RESULT;
@end


/// The delegate of a PrintPageViewController object must adopt the PrintPageViewControllerDelegate protocol.
/// PrintPageViewControllerDelegate Protocol used to handle all the callbacks of PrintPageViewController Class.The PrintPageViewControllerDelegate protocol defines a method that allow user to manage print task.
/// When configuring the PrintPageViewController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL_NAMED("PrintPageViewControllerDelegate")
@protocol PrintPageViewControllerDelegate
/// Tells the delegate that the PrintPageViewController is being dismissed.
/// This callback will be initialised when the user taps Print on the printing-options view or when the user dismisses the view by tapping outside it.
- (void)printPageViewControllerDidDismiss;
/// Tells the delegate that the PrintPageViewController has finished its Task .
- (void)PrintPageViewControllerDidFinishJob;
/// Tells the delegate that the device does not support printing.
- (void)deviceNotSupportsPagePrinting;
/// Tells the delegate that the Page Printed Successfully.
- (void)didPagePrintedSuccessFully;
/// Tells the delegate that the Page Printing Task failed with error.
/// \param error Instance of Error.
///
- (void)didPagePrintingFailedWithError:(NSError * _Nullable)error;
@end


/// The delegate of a PrintPageButton object must adopt the PrintPageViewDelegate protocol.
/// PrintPageViewDelegate Protocol used to handle all the callbacks of PrintPageButton Class.The PrintPageViewDelegate protocol defines a method that allows the user to manage interactions.
/// When configuring the PrintPageButton object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL_NAMED("PrintPageViewDelegate")
@protocol PrintPageViewDelegate
/// Tells the delegate that the specified Print Button is now Tapped.
/// \param pageNumber Selected Print Button Page Number.
///
- (void)didTapOnPrintPageWithPageNumber:(NSNumber * _Nullable)pageNumber;
@end


/// A control that use to handle Protractor selection.
/// When User selects any  button that has focus, the button performs any actions attached to it.
SWIFT_CLASS_NAMED("ProtractorSelectionButton")
@interface ProtractorSelectionButton : UIButton
/// An universally unique value that can be used to identify a selected Protractor.
@property (nonatomic, copy) NSString * _Nullable penToolUUID;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK37RTLorLTRFlowLayoutForUICollectionView")
@interface RTLorLTRFlowLayoutForUICollectionView : UICollectionViewFlowLayout
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL flipsHorizontallyInOppositeLayoutDirection;
@end


SWIFT_CLASS_NAMED("ReflowableCustomSlider")
@interface ReflowableCustomSlider : UISlider
- (CGRect)trackRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(int32_t, SDKError, "SDKError", open) {
  SDKErrorKSDKErrorImageLoadingFailed = 0,
  SDKErrorKSDKErrorBookLoadingFailed = 1,
  SDKErrorKSDKErrorFontFileLoadingFailed = 2,
};

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18SDKHLSDownloadInfo")
@interface SDKHLSDownloadInfo : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface SDKHLSDownloadInfo (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
@property (nonatomic, copy) NSData * _Nullable assetDownloadedData;
@property (nonatomic, strong) NSNumber * _Nullable assetDownloadingBitrate;
@property (nonatomic, copy) NSData * _Nullable assetEncKeyData;
@property (nonatomic, copy) NSString * _Nullable assetM3U8Name;
@property (nonatomic, copy) NSString * _Nullable assetM3U8Path;
@property (nonatomic, copy) NSString * _Nullable bookId;
@property (nonatomic, strong) NSObject * _Nullable cookies;
@property (nonatomic, strong) NSNumber * _Nullable isDownloaded;
@property (nonatomic, strong) NSNumber * _Nullable totalAssets;
@end


SWIFT_CLASS_NAMED("SDKUtility")
@interface SDKUtility : NSObject
+ (NSString * _Nonnull)getSDKDomain SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, SleepAction, open) {
  SleepActionKSleepActionNone = 0,
  SleepActionKSleepAction15Min = 1,
  SleepActionKSleepAction30Min = 2,
  SleepActionKSleepAction45Min = 3,
  SleepActionKSleepActionCustom = 4,
};

typedef SWIFT_ENUM_NAMED(NSInteger, TaskStatus, "TaskStatus", open) {
  TaskStatusUnknown = 0,
  TaskStatusGettingInfo = 1,
  TaskStatusStarted = 2,
  TaskStatusDownloading = 3,
  TaskStatusPaused = 4,
  TaskStatusCancelled = 5,
  TaskStatusFinished = 6,
  TaskStatusFailed = 7,
};

@class NSMutableArray;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20TeacherReviewFibView")
@interface TeacherReviewFibView : UIView
@property (nonatomic, strong) SDKFIBVO * _Nullable fibVO;
@property (nonatomic, strong) NSMutableArray * _Nonnull fibVOArray;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






@interface UIView (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)setAccessibilityForElementID:(NSString * _Nonnull)elementID WithFile:(NSString * _Nonnull)file argument:(NSString * _Nonnull)text;
- (void)setAccessibilityForElementID:(NSString * _Nonnull)elementID WithFile:(NSString * _Nonnull)file;
- (void)setAccessibilityWithElementID:(NSString * _Nonnull)elementID WithFile:(NSString * _Nonnull)file withArgument:(NSString * _Nonnull)text;
- (void)disableAccessibilityOnView:(UIView * _Nonnull)view;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK7Utility")
@interface Utility : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// An Object of VideoPlayerViewStateUpdate.
typedef SWIFT_ENUM(NSInteger, VideoPlayerViewStateUpdate, open) {
  VideoPlayerViewStateUpdateKVideoUpdatePlayPauseState = 0,
  VideoPlayerViewStateUpdateKVideoUpdateReadingSpeed = 1,
  VideoPlayerViewStateUpdateKVideoUpdateCurrentTime = 2,
};

enum WatermarkPosition : NSInteger;

/// An object that manages the content for the watermark on the screen.
/// A WatermarkHolderView object adds content within its bounds rectangle and handles any interactions with that content. Use WatermarkHolderView to add watermark, it can be a label,  image etc.
/// <ul>
///   <li>
///     SuperClass : UIView
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19WatermarkHolderView")
@interface WatermarkHolderView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// To display WatermarkHolderView.
/// Used this method to show hidden watermark .
- (void)showWatermark;
/// To hide WatermarkHolderView.
/// A hidden view disappears from its window. It remains in its superview’s list of subviews.
- (void)hideWatermark;
/// To set WaterMark Position.
/// Use this method to set <em>waterMark Position</em>. Default Position of waterMark is bottomLeft.
/// \param position WaterMarkPosition.
///
- (void)setWatermarkHolderViewPosition:(enum WatermarkPosition)position;
/// To get WaterMark Position.
/// Use this method to get <em>waterMark Position</em>.
///
/// returns:
/// WatermarkPosition .
- (enum WatermarkPosition)getWatermarkHolderViewPosition SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

/// WatermarkPosition is used to set position to WatermarkHolderView.
typedef SWIFT_ENUM(NSInteger, WatermarkPosition, open) {
/// Top Left Position of Page
  WatermarkPositionTopLeft = 0,
/// Top center Position of Page
  WatermarkPositionTopCenter = 1,
/// Top Right Position of Page
  WatermarkPositionTopRight = 2,
/// Bottom Left Position of Page
  WatermarkPositionBottomLeft = 3,
/// Bottom Center Position of Page
  WatermarkPositionBottomCenter = 4,
/// Bottom Right Position of Page
  WatermarkPositionBottomRight = 5,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
